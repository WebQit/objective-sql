{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@webqit/util/js/isArray.js","webpack:///./node_modules/@webqit/util/js/isString.js","webpack:///./node_modules/@webqit/util/js/isUndefined.js","webpack:///./node_modules/@webqit/util/js/isNull.js","webpack:///./node_modules/@webqit/util/js/isTypeFunction.js","webpack:///./node_modules/@webqit/util/js/isTypeObject.js","webpack:///./node_modules/@webqit/util/js/isEmpty.js","webpack:///./node_modules/@webqit/util/js/isObject.js","webpack:///./node_modules/@webqit/util/arr/from.js","webpack:///./node_modules/@webqit/util/js/isTypeArray.js","webpack:///./node_modules/@webqit/util/js/isNumeric.js","webpack:///./node_modules/@webqit/util/js/isNumber.js","webpack:///./node_modules/@webqit/util/obj/each.js","webpack:///./src/database/_Driver.js","webpack:///./node_modules/@webqit/util/js/isFunction.js","webpack:///./node_modules/@webqit/util/arr/intersect.js","webpack:///./node_modules/@webqit/util/arr/difference.js","webpack:///./src/database/_Database.js","webpack:///./node_modules/@webqit/util/arr/unique.js","webpack:///./node_modules/@webqit/util/obj/merge.js","webpack:///./src/database/DuplicateKeyViolationError.js","webpack:///./node_modules/@webqit/util/str/wrapped.js","webpack:///./src/database/_Table.js","webpack:///./node_modules/@webqit/util/arr/all.js","webpack:///./src/database/_Cursor.js","webpack:///./src/database/odb/ODBCursor.js","webpack:///./src/database/odb/ODBStore.js","webpack:///./src/database/odb/ODBDatabase.js","webpack:///./src/database/idb/IDBCursor.js","webpack:///./src/database/idb/IDBProgressiveCursor.js","webpack:///./src/database/idb/IDBStore.js","webpack:///./src/database/idb/IDBDatabase.js","webpack:///./src/browser-entry.js","webpack:///./src/database/odb/ODBDriver.js","webpack:///./src/database/idb/IDBDriver.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Array","isArray","val","String","arguments","length","undefined","keys","castObject","slice","values","Number","isNaN","returnValue","obj","forEach","k","callback","parseFloat","this","$","schema","defaultDB","defaultDBParams","Error","databaseName","params","ifNotExists","createDatabase","ifExists","dropDatabase","databaseDump","databases","data","database","Promise","all","map","async","tableSchema","tableName","tableData","createTable","addAll","tableNames","tables","table","getSchema","getAll","databaseSchema","_databaseSchema","tablenName","databaseList","databasename","filter","db","version","toString","arr2","arr","val1","val2","indexOf","driver","def","newTableSchemaOrCallback","getDatabaseSchema","schemaColumns","columns","columnName","columnDef","setDatabaseSchema","newSchema","cloneTableSchema","prevSchema","schemaChanges","add","alter","drop","primaryKey","foreignKeys","indexes","jsonColumns","renamedColumns","renameTo","schemaChangeRecorders","action","newColumnsDef","prevColumnsDef","currentColumns","prevColumns","referencedEntity","index","type","unique","keyPath","fulltext","toLowerCase","currentColumnProps","prevColumnProps","changes","current","prev","addedProps","alteredProps","prop","isSame","droppedProps","concat","self","includes","newTableName","newPrimaryKeyDef","prevPrimaryKeyDef","join","newKeysDef","prevKeysDef","currentKeys","prevKeys","keyName","newIndexesDef","prevIndexesDef","currentProps","prevProps","assert","column","e","a","b","reduce","v","temp","keys_a","keys_b","subject","startsWith","openingTag","endsWith","closingTag","derived","keyPaths","indexName","push","cursor","putAll","cache","rowObj","existing","readKeyPath","matchingKey","row","match","uniqueKeys","alias","existingRow","constraintName","multiValues","duplicateKeyCallback","forceAutoIncrement","ongoingAdd","forUpdates","inserts","line","_columns","handleInput","shouldMatchInput","duplicateRow","resolve","beforeAdd","timestamp","Date","toISOString","field","default","multiRows","ongoingPut","beforePut","put","prevTest","itm","onupdate","multiIDs","delete","beforeDelete","applyDefaults","rowObjColumns","unknownFields","col","_value","nullable","_Cursor","rows","flags","_onfinish","__eof","super","ongoingWrite","_store","rowID","primaryKeyColumn","autoIncrementColumn","autoIncrement","store","DuplicateKeyViolationError","processPrimaryKey","reject","assertExisting","splice","canAutoIncrement","primaryKeyVal","primaryKeyPath","newTableSchema","getTableSchema","cloneSchema","diffSchema","changeName","changeDef","applyToStore","oldDef","oldName","newName","delta","indexNames","contains","deleteIndex","createIndex","newColumnName","_storeFetch","onsuccess","target","result","fetch","IDBProgressiveCursor","_eof","_cursorRequest","_countRequest","_handleCursorFetch","_continueCursor","count","_count","openCursor","_cursor","continue","getStore","getAllRequest","tx_store","onerror","error","parseInt","getRequest","query","countRequest","addRequest","message","putRequest","deleteAll","delRequest","objectStoreNames","_mode","transaction","objectStore","alterDatabase","storeParams","createObjectStore","deleteObjectStore","window","WebQit","ObjectiveSQL","ODB","matchDatabaseList","setDefaultDB","unsetDatabaseSchema","vars","dbDriver","ObjSQL","parse","eval","IDB","indexedDB","open","dbOpenRequest","onupgradeneeded","then","upgradeneededCalled","callbackReturn","deleteDatabase"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\n/**\r\n * Tells if val is of type \"array\".\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val);\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"string\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"undefined\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is null.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === null || val === '';\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"function\".\r\n * This holds true for both regular functions and classes.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn typeof val === 'function';\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"object\".\r\n * This holds true for anything object, including built-ins.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNull from './isNull.js';\r\nimport _isUndefined from './isUndefined.js';\r\nimport _isTypeObject from './isTypeObject.js';\r\n\r\n/**\r\n * Tells if val is empty in its own type.\r\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\r\n * objects without keys, empty arrays.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \r\n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\r\n};\r\n","\r\n/**\r\n * Tells if val is pure object.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isTypeArray from '../js/isTypeArray.js';\r\nimport _isEmpty from '../js/isEmpty.js';\r\nimport _isObject from '../js/isObject.js';\r\n\r\n/**\r\n * Casts an array-like object to an array.\r\n *\r\n * @param mixed \tval\r\n * @param bool\t \tcastObject\r\n *\r\n * @return array\r\n */\r\nexport default function(val, castObject = true) {\r\n\tif (_isArray(val)) {\r\n\t\treturn val;\r\n\t};\r\n\tif (!castObject && _isObject(val)) {\r\n\t\treturn [val];\r\n\t};\r\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\r\n\t\treturn [];\r\n\t};\r\n\tif (_isTypeArray(val)) {\r\n\t\treturn Array.prototype.slice.call(val);\r\n\t};\r\n\tif (_isObject(val)) {\r\n\t\treturn Object.values(val);\r\n\t};\r\n\treturn [val];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from './isString.js';\r\nimport _isUndefined from './isUndefined.js';\r\n\r\n/**\r\n * Tells if val is \"array-like\".\r\n * This holds true for anything that has a length property.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !_isString(val) && !_isUndefined(val.length);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumber from './isNumber.js';\r\n/**\r\n * Tells if val is of type \"string\" or a numeric string.\r\n * This holds true for both numbers and numeric strings.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isNumber(val) || (val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1));\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"number\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val instanceof Number || (typeof val === 'number');\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Loops thru obj flatly with a callback function.\r\n * Stops when callback returns a non-undefined value.\r\n *\r\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\r\n * @param function \t\t\t\tcallback \t\tThe callback function.\r\n *\r\n * @return mixed|null\t\t\tAny non-null return from callback\r\n */\r\nexport default function(obj, callback) {\r\n\tvar returnValue = undefined;\r\n\tif (_isTypeObject(obj)) {\r\n\t\tObject.keys(obj).forEach((k, i) => {\r\n\t\t\tif (returnValue !== false) {\r\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn returnValue;\r\n};\r\n","\n/**\n * @imports\n */\nimport _isNumeric from '@webqit/util/js/isNumeric.js';\nimport _isObject from '@webqit/util/js/isObject.js';\nimport _isArray from '@webqit/util/js/isArray.js';\nimport _isEmpty from '@webqit/util/js/isEmpty.js';\nimport _isNull from '@webqit/util/js/isNull.js';\nimport _isUndefined from '@webqit/util/js/isUndefined.js';\nimport _each from '@webqit/util/obj/each.js';\n\n/**\n * --------------------------\n * The Driver class.\n * --------------------------\n */\nexport default class Driver {\n    \n    constructor() {\n        this.$ = {schema: {},};\n        this.defaultDB = 'db1';\n        this.defaultDBParams = {};\n    }\n\n    /**\n     * Sets default database.\n     * \n     * @param Object schema\n     * \n     * @return this\n     */\n    async bindSchema(schema) {\n        if (!_isObject(schema)) {\n            throw new Error(`Schema must be an object.`);\n        }\n        this.$.schema = schema;\n        return this;\n    }\n\n    /**\n     * Sets default database.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return this\n     */\n    async setDefaultDB(databaseName, params = this.defaultDBParams) {\n        this.defaultDB = databaseName;\n        this.defaultDBParams = params;\n        return this;\n    }\n\n    /**\n     * @forwardsTo: createDatabase().\n     * @with: params.ifNotExixts = true\n     */\n    async createDatabaseIfNotExists(databaseName, params = this.defaultDBParams) {\n        params = {...params};\n        params.ifNotExists = true;\n        return this.createDatabase(databaseName, params);\n    }\n\n    /**\n     * @forwardsTo: dropDatabase().\n     * @with: params.ifExixts = true\n     */\n    async dropDatabaseIfExists(databaseName, params = {}) {\n        params = {...params};\n        params.ifExists = true;\n        return this.dropDatabase(databaseName, params);\n    }\n\n    /**\n     * ---------\n     * IMPORT/EXPORT\n     * ---------\n     */\n\n    /**\n     * Imports a database.\n     * \n     * @param String databaseName\n     * @param Object databaseDump\n     * @param Object params\n     * \n     * @return Array\n     */\n    async importDatabase(databaseName, databaseDump, params = {}) {\n        if ((await this.databases(databaseName, params)).length) {\n            if (params.ifNotExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} already exists.`);\n        }\n        if (!_isObject(databaseDump.schema) || (databaseDump.data && !_isObject(databaseDump.data))) {\n            throw new Error(`Malformed import data.`);\n        }\n        var database = await this.createDatabase(databaseName, params);\n        return Promise.all(Object.keys(databaseDump.schema).map(async tableName => {\n            var tableSchema = databaseDump.schema[tableName];\n            var tableData = (databaseDump.data || {})[tableName];\n            if (_isNumeric(tableName)) {\n                tableName = tableSchema.name;\n            }\n            if (!tableName || !_isObject(tableSchema) || (tableData && !_isArray(tableData))) {\n                throw new Error(`Malformed import data for table ${tableName}.`);\n            }\n            var table = await database.createTable(tableName, tableSchema);\n            return table.addAll(tableData || []);\n        }));\n    }\n\n    /**\n     * Exports a database.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Array\n     */\n    async exportDatabase(databaseName, params) {\n        if (!(await this.databases(databaseName, params)).length) {\n            if (params.ifExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} does not exist.`);\n        }\n        var database = await this.database(databaseName, params);\n        // -------------------\n        var databaseDump = {schema: {}, data: {}};\n        // -------------------\n        var tableNames = await database.tables();\n        await Promise.all(tableNames.map(async tableName => {\n            var table = await database.table(tableName);\n            databaseDump.schema[tableName] = await table.getSchema();\n            databaseDump.data[tableName] = await table.getAll();\n        }));\n        return databaseDump;\n    }\n\n    /**\n     * Returns the database schema.\n     * \n     * @param String databaseName \n     * \n     * @returns Object\n     */\n    getDatabaseSchema(databaseName = this.defaultDB) {\n        return this.$.schema[databaseName] || {};\n    }\n\n    /**\n     * Sets the database schema.\n     * \n     * @param String databaseName \n     * @param Object databaseSchema \n     * \n     * @returns this\n     */\n    setDatabaseSchema(databaseName, databaseSchema) {\n        const _databaseSchema = {};\n        _each(databaseSchema, (tablenName, tableSchema) => {\n            if (tableSchema.name && tableSchema.name !== tablenName) {\n                _databaseSchema[tableSchema.name] = tableSchema;\n                delete tableSchema.name;\n            } else {\n                _databaseSchema[tablenName] = tableSchema;\n            }\n        });\n        this.$.schema[databaseName] = _databaseSchema;\n        return this;\n    }\n\n    /**\n     * Removes the database schema.\n     * \n     * @param String databaseName \n     * \n     * @returns this\n     */\n    unsetDatabaseSchema(databaseName) {\n        delete this.$.schema[databaseName];\n        return this;\n    }\n\n    /**\n     * ---------------------------------------\n     */\n\n    /**\n     * \n     * @param Array databaseList \n     * @param String databasename \n     * @param Object params \n     * \n     * @returns Array\n     */\n    matchDatabaseList(databaseList, databasename = null, params = []) {\n        return databaseList.filter(db => (\n            _isUndefined(databasename) || _isNull(databasename) || db.name === databasename\n        ) && (\n            _isEmpty(params) || !('version' in params) || !('version' in db) || db.version === params.version\n        ));\n    }\n}","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"function\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the intersection of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) !== -1\r\n\t);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the difference of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) === -1\r\n\t);\r\n};\r\n","\n\n/**\n * @imports\n */\nimport _isObject from '@webqit/util/js/isObject.js';\nimport _isArray from '@webqit/util/js/isArray.js';\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _each from '@webqit/util/obj/each.js';\nimport _intersect from '@webqit/util/arr/intersect.js';\nimport _unique from '@webqit/util/arr/unique.js';\nimport _difference from '@webqit/util/arr/difference.js';\n\n/**\n * ---------------------------\n * _Database class\n * ---------------------------\n */\t\t\t\t\n\nexport default class _Database {\n\t\n\t/**\n\t * @constructor\n\t */\n\tconstructor(driver, databaseName, def) {\n\t\tthis.driver = driver;\n\t\tthis.databaseName = databaseName;\n\t\tthis.def = def;\n\t}\n\t\n    /**\n     * @inheritdoc\n     */\n     async tables() {}\n\n    /**\n     * Drops a database.\n     * \n     * @param String            tableName\n     * \n     * @return Bool\n     */\n    async table(tableName) {}\n\n    /**\n     * CREATE/ALTER/DROP\n     */\n\n    /**\n     * Creates table.\n     * \n     * @param String            tableName\n     * @param Object            tableSchema\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async createTable(tableName, tableSchema = {}, params = {}) {}\n\n    /**\n     * Alters table.\n     * \n     * @param String            tableName\n     * @param Object|Function   newTableSchemaOrCallback\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async alterTable(tableName, newTableSchemaOrCallback, params = {}) {}\n\n    /**\n     * Drops table.\n     * \n     * @param String            tableName\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async dropTable(tableName, params = {}) {}\n\n    /**\n     * ---------\n     * SCHEMA\n     * ---------\n     */\n\n    /**\n     * Returns a table schema.\n     * \n     * @param String            tableName\n     * \n     * @return Object\n     */\n    getTableSchema(tableName) {\n        return this.driver.getDatabaseSchema(this.databaseName)[tableName];\n    }\n\n    /**\n     * Sets a table schema.\n     * \n     * @param String            tableName\n     * @param Object            schema\n     * \n     * @return this\n     */\n    setTableSchema(tableName, schema) {\n        const schemaColumns = {};\n        _each(schema.columns, (columnName, columnDef) => {\n            if (columnDef.name && columnDef.name !== columnName) {\n                schemaColumns[columnDef.name] = columnDef;\n                delete columnDef.name;\n            } else {\n                schemaColumns[columnName] = columnDef;\n            }\n        });\n        schema.columns = schemaColumns;\n        // ---------------\n        const databaseSchema = this.driver.getDatabaseSchema(this.databaseName);\n        databaseSchema[tableName] = schema;\n        this.driver.setDatabaseSchema(this.databaseName, databaseSchema);\n        return this;\n    }\n\n    /**\n     * Sets a table schema.\n     * \n     * @param String            tableName\n     * \n     * @return this\n     */\n    unsetTableSchema(tableName) {\n        delete this.driver.getDatabaseSchema(this.databaseName)[tableName];\n        return this;\n    }\n\n    /**\n     * Deep-clones a table schema.\n     * \n     * @param Any               schema\n     * \n     * @return Any\n     */\n     cloneTableSchema(schema) {\n        if (_isObject(schema)) {\n            var newSchema = {};\n            _each(schema, (name, value) => {\n                newSchema[name] = this.cloneTableSchema(value);\n            });\n            return newSchema;\n        }\n        if (_isArray(schema)) {\n            return schema.map(value => this.cloneTableSchema(value));\n        }\n        return schema;\n    }\n\n    /**\n     * Deep-diffs the given schema into action items.\n     * \n     * @param Object            prevSchema\n     * @param Object            newSchema\n     * \n     * @return Object\n     */\n    diffTableSchema(prevSchema, newSchema, tableName) {\n\n        const schemaChanges = {\n            columns: {add: {}, alter: {}, drop: {}},\n            primaryKey: {},\n            foreignKeys: {add: {}, alter: {}, drop: {}},\n            indexes: {add: {}, alter: {}, drop: {}},\n            jsonColumns: {add: {}, alter: {}, drop: {}},\n            renamedColumns: {},\n            renameTo: null,\n        };\n    \n        const schemaChangeRecorders = {\n    \n            // Columns\n            columns: (action, newColumnsDef, prevColumnsDef) => {\n                \n                // -------\n                // Identify added/altered/dropped keys\n                // -------\n                var currentColumns = Object.keys(action === 'drop' ? {} : newColumnsDef),\n                    prevColumns = Object.keys(action === 'add' ? {} : prevColumnsDef);\n    \n                _difference(currentColumns, prevColumns).forEach(columnName => {\n                    schemaChanges.columns.add[columnName] = newColumnsDef[columnName];\n                    // -------\n                    if (newColumnsDef[columnName].primaryKey) {\n                        schemaChanges.primaryKey.add = columnName;\n                    }\n                    if (newColumnsDef[columnName].referencedEntity) {\n                        schemaChanges.foreignKeys.add['fk_index__' + columnName] = {columnName, ...newColumnsDef[columnName].referencedEntity};\n                    }\n                    if (newColumnsDef[columnName].index) {\n                        schemaChanges.indexes.add['index__' + columnName] = {keys: columnName, type: 'index'};\n                    }\n                    if (newColumnsDef[columnName].unique) {\n                        schemaChanges.indexes.add['unique_index__' + columnName] = {keyPath: columnName, type: 'unique'};\n                    }\n                    if (newColumnsDef[columnName].fulltext) {\n                        schemaChanges.indexes.add['fulltext_index__' + columnName] = {keyPath: columnName, type: 'fulltext'};\n                    }\n                    // -------\n                    if ((newColumnsDef[columnName].type || '').toLowerCase() === 'json') {\n                        schemaChanges.jsonColumns.add['json_check_constraint__' + columnName] = columnName;\n                    }\n                });\n               _intersect(currentColumns, prevColumns).forEach(columnName => {\n                    // -------\n                    // Identify added/altered/dropped properties\n                    // -------\n                    var currentColumnProps = Object.keys(newColumnsDef[columnName]),\n                        prevColumnProps = Object.keys(prevColumnsDef[columnName]);\n    \n                    var changes = {\n                        current: newColumnsDef[columnName], \n                        prev: prevColumnsDef[columnName],\n                        addedProps: _difference(currentColumnProps, prevColumnProps),\n                        alteredProps: _intersect(currentColumnProps, prevColumnProps).filter(prop => !isSame(newColumnsDef[columnName][prop], prevColumnsDef[columnName][prop])),\n                        droppedProps: _difference(prevColumnProps, currentColumnProps),\n                    };\n                    \n                    // -------\n                    if (_difference(_unique([].concat(changes.addedProps, changes.alteredProps, changes.droppedProps)), ['name', 'primaryKey', 'referencedEntity', 'index', 'unique', 'fulltext', ]).length) {\n                        schemaChanges.columns.alter[columnName] = changes;\n                    }\n                    // -------\n                    if (changes.addedProps.includes('name') || (changes.alteredProps.includes('name') && newColumnsDef[columnName].name !== columnName)) {\n                        schemaChanges.renamedColumns[columnName] = newColumnsDef[columnName].name;                        \n                    }\n                    if (changes.addedProps.includes('primaryKey') || (changes.alteredProps.includes('primaryKey') && newColumnsDef[columnName].primaryKey)) {\n                        schemaChanges.primaryKey.add = columnName;\n                    } else if (changes.droppedProps.includes('primaryKey') || (changes.alteredProps.includes('primaryKey') && !newColumnsDef[columnName].primaryKey)) {\n                        schemaChanges.primaryKey.drop = columnName;\n                    }\n                    if (changes.addedProps.includes('referencedEntity') || (changes.alteredProps.includes('referencedEntity') && newColumnsDef[columnName].referencedEntity)) {\n                        schemaChanges.foreignKeys.add['fk_index__' + columnName] = newColumnsDef[columnName].referencedEntity;\n                    } else if (changes.droppedProps.includes('referencedEntity') || (changes.alteredProps.includes('referencedEntity') && !newColumnsDef[columnName].referencedEntity)) {\n                        schemaChanges.foreignKeys.drop['fk_index__' + columnName] = prevColumnsDef[columnName].referencedEntity;\n                    }\n                    if (changes.addedProps.includes('index') || (changes.alteredProps.includes('index') && newColumnsDef[columnName].index)) {\n                        schemaChanges.indexes.add['index__' + columnName] = {keys: columnName, type: 'index'};\n                    } else if (changes.droppedProps.includes('index') || (changes.alteredProps.includes('index') && !newColumnsDef[columnName].index)) {\n                        schemaChanges.indexes.drop['index__' + columnName] = {keys: columnName, type: 'index'};\n                    }\n                    if (changes.addedProps.includes('unique') || (changes.alteredProps.includes('unique') && newColumnsDef[columnName].unique)) {\n                        schemaChanges.indexes.add['unique_index__' + columnName] = {keyPath: columnName, type: 'unique'};\n                    } else if (changes.droppedProps.includes('unique') || (changes.alteredProps.includes('unique') && !newColumnsDef[columnName].unique)) {\n                        schemaChanges.indexes.drop['unique_index__' + columnName] = {keyPath: columnName, type: 'unique'};\n                    }\n                    if (changes.addedProps.includes('fulltext') || (changes.alteredProps.includes('fulltext') && newColumnsDef[columnName].fulltext)) {\n                        schemaChanges.indexes.add['fulltext_index__' + columnName] = {keyPath: columnName, type: 'fulltext'};\n                    } else if (changes.droppedProps.includes('fulltext') || (changes.alteredProps.includes('fulltext') && !newColumnsDef[columnName].fulltext)) {\n                        schemaChanges.indexes.drop['fulltext_index__' + columnName] = {keyPath: columnName, type: 'fulltext'};\n                    }\n                    // -------\n                    if ((changes.addedProps.includes('type') || changes.alteredProps.includes('type')) && (newColumnsDef[columnName].type || '').toLowerCase() === 'json') {\n                        schemaChanges.jsonColumns.add['json_check_constraint__' + columnName] = columnName;\n                    } else if ((changes.droppedProps.includes('type') || changes.alteredProps.includes('type')) && (prevColumnsDef[columnName].type || '').toLowerCase() === 'json') {\n                        schemaChanges.jsonColumns.drop['json_check_constraint__' + columnName] = columnName;\n                    }\n                \n                });\n                _difference(prevColumns, currentColumns).forEach(columnName => {\n                    schemaChanges.columns.drop[columnName] = prevColumnsDef[columnName];\n                    // -------\n                    if (prevColumnsDef[columnName].primaryKey) {\n                        schemaChanges.primaryKey.drop = columnName;\n                    }\n                    if (prevColumnsDef[columnName].referencedEntity) {\n                        schemaChanges.foreignKeys.drop['fk_index__' + columnName] = prevColumnsDef[columnName].referencedEntity;\n                    }\n                    if (prevColumnsDef[columnName].index) {\n                        schemaChanges.indexes.drop['index__' + columnName] = {keys: columnName, type: 'index'};\n                    }\n                    if (prevColumnsDef[columnName].unique) {\n                        schemaChanges.indexes.drop['unique_index__' + columnName] = {keyPath: columnName, type: 'unique'};\n                    }\n                    if (prevColumnsDef[columnName].fulltext) {\n                        schemaChanges.indexes.drop['fulltext_index__' + columnName] = {keyPath: columnName, type: 'fulltext'};\n                    }\n                    // -------\n                    if ((prevColumnsDef[columnName].type || '').toLowerCase() === 'json') {\n                        schemaChanges.jsonColumns.drop['json_check_constraint__' + columnName] = true;\n                    }\n                });\n            },\n\n            // Name\n            name: (action, newTableName) => {\n                if (action === 'drop') {\n                    return;\n                }\n                if (newTableName !== tableName) {\n                    schemaChanges.renameTo = newTableName;\n                }\n            },\n    \n            // Primary Key\n            primaryKey: (action, newPrimaryKeyDef, prevPrimaryKeyDef) => {\n                var keyName = _arrFrom(newPrimaryKeyDef).join('___');\n                var prevKeyName = _arrFrom(prevPrimaryKeyDef).join('___');\n                if (keyName !== prevKeyName) {\n                    schemaChanges.primaryKey[action] = action === 'drop' ? prevPrimaryKeyDef : newPrimaryKeyDef;\n                }\n            },\n    \n            // Unique Keys\n            foreignKeys: (action, newKeysDef, prevKeysDef) => {\n                \n                // -------\n                // Identify added/altered/dropped keys\n                // -------\n                var currentKeys = Object.keys(action === 'drop' ? {} : newKeysDef),\n                    prevKeys = Object.keys(action === 'add' ? {} : prevKeysDef);\n    \n                _difference(currentKeys, prevKeys).forEach(keyName => {\n                    schemaChanges.foreignKeys.add[keyName] = newKeysDef[keyName];\n                });\n                _intersect(currentKeys, prevKeys).forEach(keyName => {\n                    schemaChanges.foreignKeys.alter[keyName] = {\n                        current: newKeysDef[keyName],\n                        prev: prevKeysDef[keyName],\n                    };\n                });\n                _difference(prevKeys, currentKeys).forEach(keyName => {\n                    schemaChanges.foreignKeys.drop[keyName] = prevKeysDef[keyName];\n                });\n    \n            },\n    \n            // Unique Keys\n            indexes: (action, newIndexesDef, prevIndexesDef) => {\n                \n                // -------\n                // Identify added/altered/dropped keys\n                // -------\n                var currentKeys = Object.keys(action === 'drop' ? {} : newIndexesDef),\n                    prevKeys = Object.keys(action === 'add' ? {} : prevIndexesDef);\n    \n                _difference(currentKeys, prevKeys).forEach(keyName => {\n                    schemaChanges.indexes.add[keyName] = newIndexesDef[keyName];\n                });\n                _intersect(currentKeys, prevKeys).forEach(keyName => {\n                    schemaChanges.indexes.alter[keyName] = {\n                        current: newIndexesDef[keyName], \n                        prev: prevIndexesDef[keyName],\n                    };\n                });\n                _difference(prevKeys, currentKeys).forEach(keyName => {\n                    schemaChanges.indexes.drop[keyName] = prevIndexesDef[keyName];\n                });\n    \n            },\n    \n        };\n    \n        // ------------------\n        var currentProps = Object.keys(newSchema),\n            prevProps = Object.keys(prevSchema);\n        _difference(currentProps, prevProps).forEach(prop => {\n            // Add all these props\n            schemaChangeRecorders[prop]('add', newSchema[prop], null);\n        });\n        _intersect(currentProps, prevProps).forEach(prop => {\n            // Alter all these props\n            schemaChangeRecorders[prop]('alter', newSchema[prop], prevSchema[prop]);\n        });\n        _difference(prevProps, currentProps).forEach(prop => {\n            // Drop all these props\n            schemaChangeRecorders[prop]('drop', null, prevSchema[prop]);\n        });\n        // ------------------\n    \n        return schemaChanges;\n    }\n\n    /**\n     * Deep-validates the given schema.\n     * \n     * @param Object schema\n     * @param Bool assert\n     * \n     * @return Bool\n     */\n     validateSchema(schema, assert = false) {\n        try {\n            if (!_isObject(schema)) {\n                throw new Error('Table definition must be an object.');\n            }\n            if (!schema.name) {\n                throw new Error('Table must have a name.');\n            }\n            if (!_isObject(schema.columns)) {\n                throw new Error('Table must have a valid \"columns\" list.');\n            }\n            _each(schema.columns, (columnName, column) => {\n                if (!_isObject(column)) {\n                    throw new Error('Invalid column definition: \"' + columnName + '\" at \"' + schema.name + '\".');\n                }\n                if (column.referencedEntity\n                    && !(_isObject(column.referencedEntity) && column.referencedEntity.name)) {\n                    throw new Error('Invalid foreign key definition: \"' + columnName + '\" at \"' + schema.name + '\".');\n                }\n            });\n        } catch(e) {\n            if (assert) throw e;\n            return false;\n        }\n        return true;\n    }\n\n}\nconst isSame = (a, b) => {\n    if (a === b) return true;\n    if (_isArray(a) && _isArray(b) && a.length === b.length) {\n        return a.reduce((prev, v) => prev && b.includes(v), true);\n    }\n    var temp = {};\n    if (_isObject(a) && _isObject(b) && (temp.keys_a = Object.keys(a)).length === (temp.keys_b = Object.keys(b)).length) {\n        return temp.keys_a.reduce((prev, k) => prev && isSame(a[k], b[k]), true);\n    }\n    return false;\n};\n","\r\n/**\r\n * Returns a list of unique items.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n *\t *\r\n * @return array\r\n */\r\nexport default function(arr) {\r\n\tconst distinct = (value, index, self) => {\r\n\t\treturn self.indexOf(value) === index;\r\n\t};\r\n\treturn arr.filter(distinct);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(...objs) {\r\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\r\n\t\treturn true;\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","export default class extends Error {}","\r\n/**\r\n * Tells if the string is warapped with the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return bool\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\r\n};\r\n","\n/**\n * @imports\n */\nimport _isTypeObject from '@webqit/util/js/isTypeObject.js';\nimport _isObject from '@webqit/util/js/isObject.js';\nimport _isEmpty from '@webqit/util/js/isEmpty.js';\nimport _isNull from '@webqit/util/js/isNull.js';\nimport _isString from '@webqit/util/js/isString.js';\nimport _isNumeric from '@webqit/util/js/isNumeric.js';\nimport _isUndefined from '@webqit/util/js/isUndefined.js';\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _intersect from '@webqit/util/arr/intersect.js';\nimport _all from '@webqit/util/arr/all.js';\nimport _each from '@webqit/util/obj/each.js';\nimport _wrapped from '@webqit/util/str/wrapped.js';\n\n/**\n * ---------------------------\n * Table class\n * ---------------------------\n */\t\t\t\t\n\nexport default class _Table {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(database, tableName, def, params = {}) {\n\t\t// -----------------\n\t\tthis.database = database;\n\t\tthis.name = tableName;\n\t\tthis.def = def;\n\t\tthis.params = params;\n\t\t// -----------------\n\t\tif (_isEmpty(def.schema)) {\n\t\t\tdef.schema = {\n\t\t\t\tprimaryKey: '',\n\t\t\t\tcolumns: {},\n\t\t\t\tindexes: {},\n\t\t\t\tderived: true,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * ----------\n\t * SCHEMA UTILS\n\t * ----------\n\t */\n\n\t/**\n\t * Get Primary Key columns from schema.\n\t * \n\t * @returns Array\n\t */\n\tgetKeyPathForPrimaryKey() {\n\t\tvar keyPath = Object.keys(this.def.schema.columns).filter(name => this.def.schema.columns[name].primaryKey);\n\t\tif (!keyPath.length && this.def.schema.primaryKey) {\n\t\t\tkeyPath = _arrFrom(this.def.schema.primaryKey);\n\t\t}\n\t\treturn keyPath;\n\t}\n\n\t/**\n\t * Get Index columns from schema.\n\t * \n\t * @param String type\n\t * \n\t * @returns Array\n\t */\n\t getKeyPathsForIndex(type) {\n\t\tvar keyPaths = Object.keys(this.def.schema.columns).filter(name => this.def.schema.columns[name][type]);\n\t\tif (this.def.schema.indexes) {\n\t\t\tObject.keys(this.def.schema.indexes).filter(indexName => this.def.schema.indexes[indexName].type === type).forEach(indexName => {\n\t\t\t\tkeyPaths.push(_arrFrom(this.def.schema.indexes[indexName].keyPath));\n\t\t\t});\n\t\t}\n\t\treturn keyPaths;\n\t}\n\n\t/**\n\t * ----------\n\t * QUERY UTILS\n\t * ----------\n\t */\n\n\t/**\n\t * Syncs a cursor.\n\t * \n\t * @param Cursor cursor\n\t * \n\t * @return Number\n\t */\n\tasync syncCursor(cursor) {\n\t\treturn await this.putAll(cursor.cache);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync match(rowObj) {\n\t\t// -----------\n\t\tvar primaryKey, existing;\n\t\tif (this.def.schema.primaryKey \n\t\t&& (primaryKey = readKeyPath(rowObj, this.def.schema.primaryKey)) \n\t\t&& (existing = await this.get(primaryKey))) {\n\t\t\treturn {\n\t\t\t\tmatchingKey: 'PRIMARY_KEY',\n\t\t\t\tprimaryKey,\n\t\t\t\trow: existing,\n\t\t\t};\n\t\t}\n\t\t// -----------\n\t\tvar match, uniqueKeys = Object.keys(this.def.schema.indexes).filter(alias => this.def.schema.indexes[alias].type === 'unique');\n\t\tif (uniqueKeys.length) {\n\t\t\t(await this.getAll()).forEach((existingRow, i) => {\n\t\t\t\tif (match) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tuniqueKeys.forEach(constraintName => {\n\t\t\t\t\tvar keyPath = this.def.schema.indexes[constraintName].keyPath;\n\t\t\t\t\tif (existingRow && readKeyPath(rowObj, keyPath) === readKeyPath(existingRow, keyPath)) {\n\t\t\t\t\t\tmatch = {\n\t\t\t\t\t\t\tmatchingKey: constraintName,\n\t\t\t\t\t\t\tprimaryKey: this.def.schema.primaryKey ? readKeyPath(existingRow, this.def.schema.primaryKey) : i,\n\t\t\t\t\t\t\trow: {...existingRow},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn match;\n\t}\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync addAll(multiValues, columns = [], duplicateKeyCallback = null, forceAutoIncrement = false) {\n\n\t\tvar ongoingAdd;\n\t\tvar forUpdates = [];\n\n\t\tvar inserts = await Promise.all(multiValues.map(async (values, line) => {\n\n\n\t\t\tvar rowObj = {};\n\t\t\tif (_isObject(values)) {\n\t\t\t\trowObj = values;\n\t\t\t} else {\n\t\t\t\tvar _columns = columns.length ? columns : Object.keys(this.def.schema.columns);\n\t\t\t\tif (_columns.length && _columns.length !== values.length) {\n\t\t\t\t\tthrow new Error('Column/values count mismatch at line ' + line + '!');\n\t\t\t\t}\n\t\t\t\t_columns.forEach((columnName, i) => {\n\t\t\t\t\trowObj[columnName] = values[i];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// -------------\n\t\t\tthis.handleInput(rowObj, true);\t\t\t\t\t\n\t\t\t// -------------\n\n\t\t\tif (this.shouldMatchInput(rowObj) || duplicateKeyCallback) {\n\t\t\t\tongoingAdd/* block next iteration */ = new Promise(async resolve => {\n\t\t\t\t\tawait ongoingAdd;/* wait prev iteration */\n\n\t\t\t\t\tvar match = await this.match(rowObj);\n\t\t\t\t\tif (match && duplicateKeyCallback) {\n\t\t\t\t\t\tvar duplicateRow = {...match.row};\n\t\t\t\t\t\tif (duplicateKeyCallback(duplicateRow, rowObj)) {\n\t\t\t\t\t\t\tforUpdates.push(duplicateRow);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// The duplicate situation had been handled\n\t\t\t\t\t\t// ...positive or negative\n\t\t\t\t\t\treturn resolve('0');\n\t\t\t\t\t}\n\n\t\t\t\t\t// We're finally going to add!\n\t\t\t\t\t// We must not do this earlier...\n\t\t\t\t\t// as \"onupdate\" rows will erronously take on a new timestamp on this column\n\t\t\t\t\tawait this.beforeAdd(rowObj, match);\n\t\t\t\t\tresolve(this.add(rowObj));\n\t\t\t\t});\n\n\t\t\t\treturn ongoingAdd;\n\t\t\t}\n\n\t\t\tawait this.beforeAdd(rowObj);\n\t\t\treturn this.add(rowObj);\n\t\t}));\n\n\t\t// OnDuplicateKey updates\n\t\tif (forUpdates.length) {\n\t\t\tinserts = inserts.concat(await this.putAll(forUpdates));\n\t\t}\n\n\t\treturn inserts.filter((n, i) => n !== 0 && inserts.indexOf(n) === i);\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforeAdd(rowObj, match) {\n\t\tvar timestamp = (new Date).toISOString();\n\t\t_each(this.def.schema.columns || {}, (name, field) => {\n\t\t\tif ((field.type === 'datetime' || field.type === 'timestamp') && field.default === 'CURRENT_TIMESTAMP') {\n\t\t\t\trowObj[name] = timestamp;\n\t\t\t}\n\t\t});\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync putAll(multiRows) {\n\t\tvar ongoingPut;\n\t\tvar updates = await Promise.all(multiRows.map(async rowObj => {\n\n\t\t\t// -------------\n\t\t\tthis.handleInput(rowObj);\t\t\t\t\t\n\t\t\t// -------------\n\t\t\tif (this.shouldMatchInput(rowObj)) {\n\t\t\t\tongoingPut/* block next iteration */ = new Promise(async resolve => {\n\t\t\t\t\tawait ongoingPut;/* wait prev iteration */\n\n\t\t\t\t\tawait this.beforePut(rowObj, await this.match(rowObj));\n\t\t\t\t\tresolve(this.put(rowObj));\n\n\t\t\t\t});\n\n\t\t\t\treturn ongoingPut;\n\t\t\t}\n\n\t\t\tawait this.beforePut(rowObj);\n\t\t\treturn this.put(rowObj);\n\t\t}));\n\n\t\treturn updates;\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforePut(rowObj, match) {\n\t\tif (match && !_all(Object.keys(rowObj), key => rowObj[key] === match.row[key])) {\n\t\t\tvar timestamp = (new Date).toISOString();\n\t\t\t_each(this.def.schema.columns || {}, (name, field) => {\n\t\t\t\tif ((field.type === 'datetime' || field.type === 'timestamp') && field.onupdate === 'CURRENT_TIMESTAMP') {\n\t\t\t\t\trowObj[name] = timestamp;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync deleteAll(multiIDs) {\n\t\tvar deletes = await Promise.all(multiIDs.map(async primaryKey => {\n\t\t\treturn this.delete(await this.beforeDelete(primaryKey));\n\t\t}));\n\n\t\treturn deletes;\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforeDelete(primaryKey) {\t\n\t\treturn primaryKey;\n\t}\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * @inheritdoc\n\t */\n\thandleInput(rowObj, applyDefaults = false) {\n\t\tvar rowObjColumns = Object.keys(rowObj);\n\t\tvar schemaColumns = Object.keys(this.def.schema.columns);\n\t\t// ------------------\n\t\tvar unknownFields = rowObjColumns.filter(col => schemaColumns.indexOf(col) === -1);\n\t\tif (unknownFields.length) {\n\t\t\tthrow new Error('Unknown column: ' + unknownFields[0]);\n\t\t}\n\t\t// ------------------\n\t\tschemaColumns.forEach(columnName => {\n\t\t\tvar value = rowObj[columnName];\n\t\t\tvar field = _isObject(this.def.schema.columns[columnName]) ? this.def.schema.columns[columnName] : {};\n\t\t\tif (rowObjColumns.includes(columnName)) {\n\t\t\t\t// TODO: Validate supplied value\n\t\t\t\tif (field.type === 'json') {\n\t\t\t\t\tif (!_isTypeObject(_value) && (!_isString(value) || (!_wrapped(value, '[', ']') && !_wrapped(value, '{', '}')))) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['char', 'tinytext', 'smalltext', 'text', 'bigtext', 'varchar'].includes(field.type)) {\n\t\t\t\t\tif (!_isString(value)) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['bit', 'tinyint', 'smallint', 'int', 'bigint', 'decimal', 'number', 'float', 'real'].includes(field.type)) {\n\t\t\t\t\tif (!_isNumeric(value)) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['enum', 'set'].includes(field.type)) {\n\t\t\t\t\tif (!_isNumeric(value)) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['date', 'datetime', 'timestamp'].includes(field.type)) {\n\t\t\t\t\tif (!_isString(value)) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (applyDefaults && !_intersect(_arrFrom(columnName), _arrFrom(this.def.schema.primaryKey)).length) {\n\t\t\t\t// DONE: Apply defaults...\n\t\t\t\trowObj[columnName] = ('default' in field) && !(['date', 'datetime', 'timestamp'].includes(field.type) && field.default === 'CURRENT_TIMESTAMP') \n\t\t\t\t\t? field.default \n\t\t\t\t\t: null;\n\t\t\t}\n\t\t\t// Non-nullable\n\t\t\tif (field.nullable === false && (_isNull(rowObj[columnName]) || _isUndefined(rowObj[columnName]))) {\n\t\t\t\tthrow new Error('Inserting NULL on non-nullable column: ' + columnName);\n\t\t\t}\n\t\t});\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tshouldMatchInput(rowObj) {\n\t\treturn Object.keys(this.def.schema.columns).filter(name => {\n\t\t\tvar field = this.def.schema.columns[name];\n\t\t\treturn ['datetime', 'timestamp'].includes(field.type) \n\t\t\t\t&& (field.default === 'CURRENT_TIMESTAMP' || field.onupdate === 'CURRENT_TIMESTAMP')\n\t\t}).length;\n\t}\n}\n\n/**\n * @AutoIncremen\n */\nconst readKeyPath = (rowObj, keyPath) => {\n\treturn _arrFrom(keyPath).map(key => rowObj[key]).filter(v => v).join('-');\n};\n","\r\n/**\r\n * Tells if ALL items pass the test.\r\n *\r\n * @param array \tarr\r\n * @param function \tcallback\r\n *\r\n * @return bool\r\n */\r\nexport default function(arr, callback) {\r\n\treturn arr.reduce((prevTest, itm, i) => prevTest && callback(itm, i), true);\r\n};\r\n","\n\n/**\n * ---------------------------\n * _Cursor class\n * ---------------------------\n */\t\t\t\t\n\nexport default class _Cursor {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(rows) {\n\t\tthis.cache = rows;\n\t\tthis.key = 0;\n\t\tthis.flags = {};\n\t\tthis._onfinish = [];\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tonfinish(callback) {this._onfinish.push(callback);}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tnext() {\n\t\tif (!this.cache.length || this.key === this.cache.length - 1) {\n\t\t\tthis.__eof = true;\n\t\t\tthis._onfinish.forEach(callback => callback());\n\t\t\tthis.key = 0;\n\t\t\treturn;\n\t\t}\n        this.key ++;\n\t}\n\t\t \n\t/**\n\t * @inheritdoc\n\t */\n\teof() {\n\t\treturn !this.cache.length || this.key === this.cache.length - 1;\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tif (this.key < this.cache.length) {\n\t\t\treturn this.cache[this.key];\n\t\t}\n\t}\n}","\n\n/**\n * @imports\n */\nimport _Cursor from '../_Cursor.js';\n\n/**\n * ---------------------------\n * ODBCursor class\n * ---------------------------\n */\t\t\t\t\n\nexport default class ODBCursor extends _Cursor {}","\n/**\n * @imports\n */\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _merge from '@webqit/util/obj/merge.js';\nimport _each from '@webqit/util/obj/each.js';\nimport DuplicateKeyViolationError from '../DuplicateKeyViolationError.js';\nimport _Table from '../_Table.js';\nimport ODBCursor from './ODBCursor.js';\n\n/**\n * ---------------------------\n * ODBStore class\n * ---------------------------\n */\t\t\t\t\n\nexport default class ODBStore extends _Table {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(database, tableName, def, params = {}) {\n\t\tsuper(...arguments);\n\t\tthis.ongoingWrite = null;\n\t}\n\n\t/**\n\t * Returns a cursor.\n\t * \n\t * @return Cursor\n\t */\n\tgetCursor() {\n\t\treturn new ODBCursor(\n\t\t\t// IMPORTANT: Deep copy... that is... copy each row\n\t\t\t(this.def.data || []).reduce((_store, row) => _store.concat(row ? {...row} : undefined), []).filter(row => row)\n\t\t);\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync getAll() {\n\t\t// IMPORTANT: Deep copy... that is... copy each row\n\t\treturn (this.def.data || []).reduce((_store, row) => _store.concat(row ? {...row} : undefined), []);\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync get(rowID) {\n\t\tvar primaryKeyColumn = Object.keys(this.def.schema.columns).filter(name => this.def.schema.columns[name].primaryKey)[0];\n        var autoIncrementColumn = Object.keys(this.def.schema.columns).filter(name => this.def.schema.columns[name].autoIncrement)[0];\n\t\tif (!primaryKeyColumn) {\n\t\t\tthrow new Error('Table must define a Primary Key to fetch an item by Primary Key.');\n\t\t}\n\t\tvar store = this.def.data;\n\t\trowID = _arrFrom(rowID).join('-');\n\t\tif (primaryKeyColumn === autoIncrementColumn) {\n\t\t\treturn store[rowID - 1] ? {...store[rowID - 1]} : undefined;\n\t\t}\n\t\treturn store[rowID] ? {...store[rowID]} : undefined;\n\t}\n\t\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync count() {\n\t\tvar store = this.def.data;\n\t\treturn store.length;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tshouldMatchInput(rowObj) {\n\t\treturn this.def.schema.primaryKey || super.shouldMatchInput(rowObj);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforeAdd(rowObj, match) {\n\t\tif (match) {\n\t\t\tthrow new DuplicateKeyViolationError('Inserting duplicate values on unique key constraint: ' + match.matchingKey);\n\t\t} else {\n\t\t\tvar store = this.def.data;\n\t\t\tprocessPrimaryKey(store, rowObj, this.def.schema.primaryKey, this.def.schema.autoIncrement);\n\t\t}\n\n\t\tawait super.beforeAdd(rowObj, match);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tadd(rowObj) {\n\t\tthis.ongoingWrite = new Promise(async (resolve, reject) => {\n\t\t\ttry { await this.ongoingWrite; } catch(e) {}\n\t\t\tvar store = this.def.data;\n\t\t\tvar primaryKey = readKeyPath(rowObj, this.def.schema.primaryKey);\n\t\t\tif (this.def.schema.autoIncrement) {\n\t\t\t\tstore[primaryKey - 1] = rowObj;\n\t\t\t} else {\n\t\t\t\tstore[primaryKey] = rowObj;\n\t\t\t}\n\t\t\tresolve(primaryKey);\n\t\t});\n\n\t\treturn this.ongoingWrite;\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforePut(rowObj, match) {\n\t\tif (match) {\n\t\t\t_each(match.row, (key, value) => {\n\t\t\t\tif (!(key in rowObj)) {\n\t\t\t\t\trowObj[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tvar store = this.def.data;\n\t\t\tprocessPrimaryKey(store, rowObj, this.def.schema.primaryKey, this.def.schema.autoIncrement);\n\t\t}\n\n\t\tawait super.beforePut(rowObj, match);\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tput(rowObj) {\n\t\tthis.ongoingWrite = new Promise(async resolve => {\n\t\t\ttry { await this.ongoingWrite; } catch(e) {}\n\t\t\tvar store = this.def.data,\n\t\t\t\tprimaryKey = readKeyPath(rowObj, this.def.schema.primaryKey);\n\t\t\tif (this.def.schema.autoIncrement) {\n\t\t\t\tstore[primaryKey - 1] = rowObj;\n\t\t\t} else {\n\t\t\t\tstore[primaryKey] = rowObj;\n\t\t\t}\n\t\t\tresolve(primaryKey);\n\t\t});\n\n\t\treturn this.ongoingWrite;\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tdelete(rowID, assertExisting = true) {\n\t\tthis.ongoingWrite = new Promise(async (resolve, reject) => {\n\t\t\ttry { await this.ongoingWrite; } catch(e) {}\n\t\t\tvar primaryKey, store = this.def.data;\n\t\t\tif (this.def.schema.autoIncrement) {\n\t\t\t\tif (store[rowID - 1]) {\n\t\t\t\t\tdelete store[rowID - 1];\n\t\t\t\t\tprimaryKey = rowID;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (store[rowID]) {\n\t\t\t\t\tdelete store[rowID];\n\t\t\t\t\tprimaryKey = rowID;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!primaryKey && assertExisting) {\n\t\t\t\treturn reject(new Error('The given row (with ' + _arrFrom(this.def.schema.primaryKey).join(',') + ' = ' + primaryKey + ') does not exist in the store.'));\n\t\t\t}\n\t\t\tresolve(primaryKey);\n\t\t});\n\n\t\treturn this.ongoingWrite;\n\t}\n\t\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync clear() {\n\t\tvar store = this.def.data;\n\t\tstore.splice(0);\n\t\treturn true;\n\t}\n\n}\n\n/**\n * @AutoIncremen\n */\nvar readKeyPath = (rowObj, keyPath) => {\n\treturn _arrFrom(keyPath).map(key => rowObj[key]).filter(v => v).join('-');\n};\n\n/**\n * @AutoIncremen\n */\nexport function processPrimaryKey(store, rowObj, primaryKey, canAutoIncrement) {\n\tif (!primaryKey) {\n\t\treturn;\n\t}\n\t\n\tvar primaryKeyVal = readKeyPath(rowObj, primaryKey);\n\t\tvar primaryKeyPath = _arrFrom(primaryKey);\n\t\tif (primaryKeyPath.length > 1) {\n\t\t\tthrow new Error('The Auto-Increment flag cannot be used with Composite Primary Keys.');\n\t\t}\n\t\tprimaryKeyVal = store.length + 1;\n\t\trowObj[primaryKeyPath[0]] = primaryKeyVal;\n\tif (!primaryKeyVal && canAutoIncrement) {\n\t}\n\n\treturn primaryKeyVal;\n}","\n\n/**\n * @imports\n */\nimport _isObject from '@webqit/util/js/isObject.js';\nimport _isFunction from '@webqit/util/js/isFunction.js';\nimport _each from '@webqit/util/obj/each.js';\nimport _Database from '../_Database.js';\nimport ODBStore from './ODBStore.js';\n\n/**\n * ---------------------------\n * ODBDatabase class\n * ---------------------------\n */\t\t\t\t\n\nexport default class ODBDatabase extends _Database {\n    \n    /**\n     * @inheritdoc\n     */\n    async tables() {\n        return Object.keys(this.def.schema);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async table(tableName, params = {}) {\n        return new ODBStore(this, tableName, {\n            schema: this.def.schema[tableName], \n            data: this.def.data[tableName],\n        }, params);\n    }\n\n    /**\n     * CREATE/ALTER/DROP\n     */\n\n    /**\n     * @inheritdoc\n     */\n    async createTable(tableName, tableSchema, params = {}) {\n        if ((await this.tables()).includes(tableName)) {\n            if (params.ifNotExists) {\n                return;\n            }\n            throw new Error(`Store name \"${tableName}\" already exists!`);\n        }\n        this.def.schema[tableName] = tableSchema;\n        this.def.data[tableName] = [];\n        return new ODBStore(this, tableName, {\n            schema: this.def.schema[tableName],\n            data: this.def.data[tableName],\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async alterTable(tableName, newTableSchemaOrCallback, params = {}) {\n\n        var tableSchema = await this.getTableSchema(tableName),\n            newTableSchema;\n        if (_isFunction(newTableSchemaOrCallback)) {\n            // Modify existing schema\n            newTableSchema = this.cloneSchema(tableSchema);\n            await newTableSchemaOrCallback(newTableSchema);\n        } else if (_isObject(callback)) {\n            newTableSchema = newTableSchemaOrCallback;\n        } else {\n            throw new Error('Table/store modification expects only an object (new schema) or a function (callback that recieves existing schema).')\n        }\n\n        if (!(await this.tables()).includes(tableName)) {\n            if (params.ifExists) {\n                return;\n            }\n            throw new Error(`Store name \"${tableName}\" does not exist!`);\n        }\n\n        var store = this.def.data[tableName];\n        _each(this.diffSchema(tableSchema, newTableSchema), (changeName, changeDef) => {\n            if (changeName !== 'renamedColumns') {\n                // \"primaryKey\", \"columns\", \"foreignKeys\", \"indexes\", \"jsonColumns\"\n                _each(changeDef.add, (prop, def) => {\n                    this.applyToStore[changeName](store, prop, def, 'add');\n                });\n                _each(changeDef.alter, (prop, changes) => {\n                    this.applyToStore[changeName](store, prop, changes.current, 'alter');\n                });\n                _each(changeDef.drop, (prop, oldDef) => {\n                    this.applyToStore[changeName](store, prop, oldDef, 'drop');\n                });\n            } else {\n                // \"renamedColumns\" actually comes last from source...\n                // and really should\n                _each(changeDef, (oldName, newName) => {\n                    this.applyToStore[changeName](store, oldName, newName);\n                });\n            }\n        });\n\n        return new ODBStore(this, tableName, {\n            schema: this.def.schema[tableName],\n            data: store,\n        }, {});\n\n    }\n\n    /**\n     * Drops table.\n     * \n     * @param String tableName\n     * @param Object params\n     * \n     * @return Bool\n     */\n    async dropTable(tableName, params = {}) {\n        if (!(await this.tables()).includes(tableName)) {\n            if (params.ifExists) {\n                return;\n            }\n            throw new Error(`Store name \"${tableName}\" does not exist!`);\n        }\n        delete this.def.schema[tableName];\n        delete this.def.data[tableName];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getTableSchema(tableName) {\n        return this.def.schema[tableName];\n    }\n}\n\nODBDatabase.prototype.applyToStore = {\n    primaryKey: (store, columnName, def, delta) => {},\n\n    columns: (store, columnName, def, delta) => {},\n\n    foreignKeys: (store, columnName, def, delta) => {},\n\n    indexes: (store, alias, def, delta) => {\n        if (delta === 'drop') {\n            store.deleteIndex(alias);\n            return;\n        }\n        if (delta === 'alter' && store.indexNames.contains(alias)) {\n            store.deleteIndex(alias);\n        }\n        store.createIndex(alias, def.keyPath, {unique: def.type === 'unique'});\n    },\n\n    jsonColumns: (store, alias, columnName, delta) => {},\n\n    renamedColumns: (store, columnName, newColumnName) => {\n        return 'ALTER COLUMN `' + columnName + '` RENAME TO `' + newColumnName + '`';\n    },\n};","\n/**\n * @imports\n */\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _Cursor from '../_Cursor.js';\n\n\n/**\n * ---------------------------\n * IDBCursor class\n * ---------------------------\n */\t\t\t\t\n\nexport default class IDBCursor extends _Cursor {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(store) {\n\t\tsuper([]);\n\t\t// ---------------\n\t\tthis._store = store;\n\t\t// ---------------\n\t\tthis._storeFetch = new Promise(async resolve => {\n\t\t\tvar store = await this._store;\n\t\t\tvar getAllRequest = store.getAll();\n\t\t\tgetAllRequest.onsuccess = e => {\n\t\t\t\tthis.cache = _arrFrom(e.target.result);\n\t\t\t\tresolve();\n\t\t\t};\n\t\t});\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tawait this._storeFetch;\n\t\treturn super.fetch();\n\t}\n}","\n/**\n * ---------------------------\n * IDBProgressiveCursor class\n * ---------------------------\n */\t\t\t\t\n\nexport default class IDBProgressiveCursor {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(store) {\n\t\t// ---------------\n\t\tthis._store = store;\n\t\t// ---------------\n\t\tthis.cache = [];\n\t\tthis.key = 0;\n\t\tthis._onfinish = [];\n\t\tthis.flags = {};\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tonfinish(callback) {this._onfinish.push(callback);}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tnext() {\n\t\tif (!this._eof) {\n\t\t\tif (!this._cursorRequest) {\n\t\t\t\tthrow new Error('fetch() must be called before calling next()');\n\t\t\t}\n\t\t\tthis.key ++;\n\t\t} else {\n\t\t\tif (!this.cache.length || this.key === this.cache.length - 1) {\n\t\t\t\tthis._onfinish.forEach(callback => callback());\n\t\t\t\tthis.key = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.key ++;\n\t\t}\n\t}\n\t\t \n\t/**\n\t * @inheritdoc\n\t */\n\teof() {\n\t\t// The store must reach eof before we can be correct with this.cache.length\n\t\treturn this._eof && (!this.cache.length || this.key === this.cache.length - 1);\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tvar store = await this._store;\n\t\treturn new Promise(resolve => {\n\t\t\t// After having filled this.cache from store\n\t\t\tif (this._eof || this.key < this.cache.length) {\n\t\t\t\tresolve(this.cache[this.key]);\n\t\t\t} else {\n\t\t\t\tif (!this._countRequest) {\n\t\t\t\t\t// First time reading from store\n\t\t\t\t\tthis._countRequest = store.count();\n\t\t\t\t\tthis._countRequest.onsuccess = e => {\n\t\t\t\t\t\tthis._count = e.target.result;\n\t\t\t\t\t\tthis._cursorRequest = store.openCursor();\n\t\t\t\t\t\tthis._handleCursorFetch(resolve);\n\t\t\t\t\t\tthis._continueCursor = () => this._cursor.continue();\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tthis._handleCursorFetch(resolve);\n\t\t\t\t\tthis._continueCursor();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Helps handle cursor result\n\t * \n\t * @param Function resolve\n\t * \n\t * @return void\n\t */\n\t_handleCursorFetch(resolve) {\n\t\tthis._cursorRequest.onsuccess = e => {\n\t\t\tthis._cursor = e.target.result;\n\t\t\tif (this._cursor) {\n\t\t\t\tvar value = this._cursor.value;\n\t\t\t\tthis.cache.push(value);\n\t\t\t\tif (this.cache.length === this._count) {\n\t\t\t\t\tthis._eof = true;\n\t\t\t\t}\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\tthis._eof = true;\n\t\t\t\tresolve();\n\t\t\t}\n\t\t}\n\t}\n}\n","\n/**\n * @imports\n */\nimport _isArray from '@webqit/util/js/isArray.js';\nimport _isNumeric from '@webqit/util/js/isNumeric.js';\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport DuplicateKeyViolationError from '../DuplicateKeyViolationError.js';\nimport _Table from '../_Table.js';\nimport IDBCursor from './IDBCursor.js';\nimport IDBProgressiveCursor from './IDBProgressiveCursor.js';\n\n/**\n * ---------------------------\n * IDBStore class\n * ---------------------------\n */\t\t\t\t\n\nexport default class IDBStore extends _Table {\n\n\t/**\n\t * Returns a cursor.\n\t * \n\t * @return IDBCursor\n\t */\n\tgetCursor() {\n\t\treturn new IDBCursor(this.def.getStore());\n\t}\n\n\t/**\n\t * Returns a cursor.\n\t * \n\t * @return IDBProgressiveCursor\n\t */\n\tgetProgressiveCursor() {\n\t\treturn new IDBProgressiveCursor(this.def.getStore());\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tgetAll() {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tvar getAllRequest = (this.tx_store || this.def.getStore('readonly')).getAll();\n\t\t\tgetAllRequest.onsuccess = e => resolve(_arrFrom(e.target.result));\n\t\t\tgetAllRequest.onerror = e => reject(e.target.error);\n\t\t});\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tget(primaryKey) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// Now this is very important\n\t\t\tprimaryKey = _isNumeric(primaryKey) ? parseInt(primaryKey) : primaryKey;\n\t\t\tvar getRequest = (this.tx_store || this.def.getStore('readonly')).get(primaryKey);\n\t\t\tgetRequest.onsuccess = e => resolve(e.target.result);\n\t\t\tgetRequest.onerror = e => reject(e.target.error);\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tcount(...query) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tvar countRequest = this.def.getStore().count(...query);\n\t\t\tcountRequest.onsuccess = e => resolve(e.target.result);\n\t\t\tcountRequest.onerror = e => reject(e.target.error);\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\taddAll(multiValues, columns = [], duplicateKeyCallback = null) {\n\t\tthis.tx_store = this.def.getStore();\n\t\treturn super.addAll(...arguments);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tadd(rowObj) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tvar addRequest = (this.tx_store || this.def.getStore()).add(rowObj);\n\t\t\taddRequest.onsuccess = e => resolve(e.target.result);\n\t\t\taddRequest.onerror = e => {\n\t\t\t\tvar error = e.target.error;\n\t\t\t\tif (error.name === 'ConstraintError') {\n\t\t\t\t\treject(new DuplicateKeyViolationError(error.message));\n\t\t\t\t} else {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tputAll(rowObj) {\n\t\tthis.tx_store = this.def.getStore();\n\t\treturn super.putAll(...arguments);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tput(rowObj) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tvar putRequest = (this.tx_store || this.def.getStore()).put(rowObj);\n\t\t\tputRequest.onsuccess = e => resolve(e.target.result);\n\t\t\tputRequest.onerror = e => reject(e.target.error);\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tdeleteAll(primaryKey) {\n\t\tthis.tx_store = this.def.getStore();\n\t\treturn super.deleteAll(...arguments);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tdelete(primaryKey) {\n\t\tif (_isArray(primaryKey)) {\n\t\t\tif (primaryKey.length > 1) {\n\t\t\t\tthrow new Error('IDB does not support Composite Primary Keys');\n\t\t\t}\n\t\t\tprimaryKey = primaryKey[0];\n\t\t}\n\t\t// Now this is very important\n\t\tprimaryKey = _isNumeric(primaryKey) ? parseInt(primaryKey) : primaryKey;\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tvar delRequest = (this.tx_store || this.def.getStore()).delete(primaryKey);\n\t\t\tdelRequest.onsuccess = e => resolve(primaryKey);\n\t\t\tdelRequest.onerror = e => reject(e.target.error);\n\t\t});\n\t}\n}","\n\n/**\n * @imports\n */\nimport _isObject from '@webqit/util/js/isObject.js';\nimport _isFunction from '@webqit/util/js/isFunction.js';\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _each from '@webqit/util/obj/each.js';\nimport _Database from '../_Database.js';\nimport IDBStore from './IDBStore.js';\n\n/**\n * ---------------------------\n * IDBDatabase class\n * ---------------------------\n */\t\t\t\t\n\nexport default class IDBDatabase extends _Database {\n\t\n    /**\n     * @inheritdoc\n     */\n     async tables() {\n        return _arrFrom(this.def.objectStoreNames);\n     }\n\n    /**\n     * @inheritdoc\n     */\n    async table(tableName, params = {}) {\n        var getStore = _mode => {\n            var transaction = this.def.transaction([tableName], _mode || params.mode);\n            // We can worry not about onerror, onabort, oncomplete\n            return transaction.objectStore(tableName);\n        };\n\t\treturn new IDBStore(this, tableName, {\n            schema: await this.getTableSchema(tableName),\n            getStore,\n        }, params);\n    }\n\n    /**\n     * CREATE/ALTER/DROP\n     */\n\n    /**\n     * @inheritdoc\n     */\n    async createTable(tableName, tableSchema, params = {}) {\n        return this.driver.alterDatabase(this.name, database => {\n            if (_arrFrom(database.objectStoreNames).includes(tableName)) {\n                if (params.ifNotExists) {\n                    return;\n                }\n                throw new Error(`Store name \"${tableName}\" already exists!`);\n            }\n            var storeParams = {};\n            // ...with primary key\n            var primaryKeyColumn = Object.keys(tableSchema.columns).filter(name => tableSchema.columns[name].primaryKey)[0];\n            var autoIncrementColumn = Object.keys(tableSchema.columns).filter(name => tableSchema.columns[name].autoIncrement)[0];\n            if (primaryKeyColumn) {\n                storeParams.keyPath = primaryKeyColumn;\n                if (primaryKeyColumn === autoIncrementColumn) {\n                    storeParams.autoIncrement = true;\n                }\n            }\n            var store = database.createObjectStore(tableName, storeParams);\n            _each(this.diffSchema({}, tableSchema), (changeName, changeDef) => {\n                if (changeName === 'primaryKey') {\n                    return;\n                }\n                _each(changeDef.add, (prop, def) => {\n                    this.applyToStore[changeName](store, prop, def);\n                });\n            });\n            this.def.schema[tableName] = tableSchema;\n            return new IDBStore(this, tableName, {\n                schema: tableSchema,\n                getStore: () => store,\n            }, {});\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async alterTable(tableName, newTableSchemaOrCallback, params = {}) {\n\n        var tableSchema = await this.getTableSchema(tableName),\n            newTableSchema;\n        if (_isFunction(newTableSchemaOrCallback)) {\n            // Modify existing schema\n            newTableSchema = this.cloneSchema(tableSchema);\n            await newTableSchemaOrCallback(newTableSchema);\n        } else if (_isObject(callback)) {\n            newTableSchema = newTableSchemaOrCallback;\n        } else {\n            throw new Error('Table/store modification expects only an object (new schema) or a function (callback that recieves existing schema).')\n        }\n\n        return this.driver.alterDatabase(this.name, database => {\n            if (!_arrFrom(database.objectStoreNames).includes(tableName)) {\n                if (params.ifExists) {\n                    return;\n                }\n                throw new Error(`Store name \"${tableName}\" does not exist!`);\n            }\n\n            var transaction = database.transaction([tableName], 'readwrite');\n            var store = transaction.objectStore(tableName);\n            _each(this.diffSchema(tableSchema, newTableSchema), (changeName, changeDef) => {\n                if (changeName !== 'renamedColumns') {\n                    // \"primaryKey\", \"columns\", \"foreignKeys\", \"indexes\", \"jsonColumns\"\n                    _each(changeDef.add, (prop, def) => {\n                        this.applyToStore[changeName](store, prop, def, 'add');\n                    });\n                    _each(changeDef.alter, (prop, changes) => {\n                        this.applyToStore[changeName](store, prop, changes.current, 'alter');\n                    });\n                    _each(changeDef.drop, (prop, oldDef) => {\n                        this.applyToStore[changeName](store, prop, oldDef, 'drop');\n                    });\n                } else {\n                    // \"renamedColumns\" actually comes last from source...\n                    // and really should\n                    _each(changeDef, (oldName, newName) => {\n                        this.applyToStore[changeName](store, oldName, newName);\n                    });\n                }\n            });\n            this.def.schema[tableName] = newTableSchema;\n            return new IDBStore(this, tableName, {\n                schema: tableSchema,\n                getStore: () => store,\n            }, {});\n    \n        });\n    }\n\n    /**\n     * Drops table.\n     * \n     * @param String tableName\n     * @param Object params\n     * \n     * @return Bool\n     */\n    async dropTable(tableName, params = {}) {\n        return this.driver.alterDatabase(this.name, database => {\n            if (_arrFrom(database.objectStoreNames).includes(tableName)) {\n                if (params.ifExists) {\n                    return;\n                }\n                throw new Error(`Store name \"${tableName}\" does not exist!`);\n            }\n            delete this.def.schema[tableName];\n            database.deleteObjectStore(tableName);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getTableSchema(tableName) {\n        return this.def.schema[tableName];\n    }\n}\n\nIDBDatabase.prototype.applyToStore = {\n    primaryKey: (store, columnName, def, delta) => {},\n\n    columns: (store, columnName, def, delta) => {},\n\n    foreignKeys: (store, columnName, def, delta) => {},\n\n    indexes: (store, alias, def, delta) => {\n        if (delta === 'drop') {\n            store.deleteIndex(alias);\n            return;\n        }\n        if (delta === 'alter' && store.indexNames.contains(alias)) {\n            store.deleteIndex(alias);\n        }\n        store.createIndex(alias, def.keyPath, {unique: def.type === 'unique'});\n    },\n\n    jsonColumns: (store, alias, columnName, delta) => {},\n\n    renamedColumns: (store, columnName, newColumnName) => {\n        return 'ALTER COLUMN `' + columnName + '` RENAME TO `' + newColumnName + '`';\n    },\n};","\n/**\n * @imports\n */\nimport ODB from './database/odb/ODBDriver.js';\nimport IDB from './database/idb/IDBDriver.js';\n\n// As globals\nif (!window.WebQit) {\n\twindow.WebQit = {};\n}\nwindow.WebQit.ObjectiveSQL = {\n\tODB,\n\tIDB\n};\n","\n/**\n * @imports\n */\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _isNumeric from '@webqit/util/js/isNumeric.js';\nimport Driver from '../_Driver.js';\nimport ODBDatabase from './ODBDatabase.js';\n\n/**\n * ---------------------------\n * ODBDriver class\n * ---------------------------\n */\t\t\t\t\n \nexport default class ODBDriver extends Driver {\n\n    /**\n     * Instance.\n     */\n    constructor() {\n        super();\n        this.$.data = {};\n        this.name = 'odb';\n    }\n\n\t/**\n     * Returns a list of databases.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Array\n\t */\n    async databases(databaseName = null, params = {}) {\n        var databaseList = Object.keys(this.$.schema).map(name => ({name}));\n        return this.matchDatabaseList(databaseList, databaseName, params);\n\t}\n\n    /**\n     * Returns a database handle.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return SQLDatabase\n     */\n    async database(databaseName = this.defaultDB, params = this.defaultDBParams) {\n        if (params.version && !_isNumeric(params.version)) {\n            throw new Error(`Database version (params.version) must be numeric.`);\n        }\n        var databases = await this.databases(databaseName, params);\n        if (!databases.length) {\n            // Fire upgradedneeded!\n        }\n        if (!(databaseName in this.$.data)) {\n            // ----------------\n            this.setDatabaseSchema(databaseName, {});\n            this.$.data[databaseName] = {};\n            // ----------------\n        }\n        return new ODBDatabase(this, databaseName, {\n            schema: this.getDatabaseSchema(databaseName),\n            data: this.$.data[databaseName],\n        }, params);\n    }\n\n    /**\n     * CREATE/DROP\n     */\n\n    /**\n     * Creates.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Object\n     */\n    async createDatabase(databaseName, params = this.defaultDBParams) {\n        if ((await this.databases(databaseName, params)).length) {\n            if (params.ifNotExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} already exists.`);\n        }\n        // ----------------\n        this.setDatabaseSchema(databaseName, {});\n        this.$.data[databaseName] = {};\n        // ----------------\n        await this.setDefaultDB(databaseName, params);\n        return new ODBDatabase(this, databaseName, {\n            schema: this.getDatabaseSchema(databaseName),\n            data: this.$.data[databaseName],\n        }, params);\n    }\n\n    /**\n     * Drops a database.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Bool\n     */\n    async dropDatabase(databaseName, params = {}) {\n        if (!(await this.databases(databaseName, params)).length) {\n            if (params.ifExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} does not exist.`);\n        }\n        this.unsetDatabaseSchema(databaseName);\n    }\n\n    /**\n     * ---------\n     * QUERY\n     * ---------\n     */\n    \n    /**\n     * @inheritdoc\n     */\n    async query(query, vars = [], params = {}) {\n        params = {...params};\n        params.vars = vars;\n        params.dbDriver = this;\n        return ObjSQL.parse(query, null, params).eval(this);\n    }\n}","\n\n/**\n * @imports\n */\nimport _arrFrom from '@webqit/util/arr/from.js';\nimport _isNumeric from '@webqit/util/js/isNumeric.js';\nimport Driver from '../_Driver.js';\nimport IDBDatabase from './IDBDatabase.js';\n\n/**\n * ---------------------------\n * IDBDriver class\n * ---------------------------\n */\t\t\t\t\n\nexport default class IDBDriver extends Driver {\n\n    /**\n     * @inheritdoc\n\t */\n    constructor() {\n        super();\n        if (typeof indexedDB === 'undefined') {\n            throw new Error('IndexedDB is not in scope.');\n        }\n        this.indexedDB = indexedDB;\n        this.name = 'idb';\n    }\n\n\t/**\n     * Returns a list of databases.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Array\n\t */\n    async databases(databaseName = null, params = {}) {\n        var databaseList = _arrFrom(await this.indexedDB.databases());\n        return this.matchDatabaseList(databaseList, databaseName, params);\n\t}\n\n\t/**\n     * Returns a database handle.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return SQLDatabase\n\t */\n\tasync database(databaseName = this.defaultDB, params = this.defaultDBParams) {\n\t\treturn new Promise(resolve => {\n\t\t\tvar dbOpenRequest = this.indexedDB.open(databaseName, params.version || 0);\n\t\t\tdbOpenRequest.onsuccess = e => {\n\t\t\t\tresolve(new IDBDatabase(this, databaseName, {\n                    database: e.target.result,\n                }, params));\n\t\t\t};\n\t\t});\n\t}\n\n    /**\n     * CREATE/ALTER/DROP\n     */\n\n    /**\n     * Creates.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Object\n     */\n    async createDatabase(databaseName, params = this.defaultDBParams) {\n        if ((await this.databases(databaseName, params)).length) {\n            if (params.ifNotExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} already exists.`);\n        }\n        return new Promise(resolve => {\n            var dbOpenRequest = this.indexedDB.open(databaseName, params.version);\n            // Define schema?\n            if ((schema || []).length) {\n                dbOpenRequest.onupgradeneeded = e => {\n                    //databaseCreateSchema(e.target.result, schema);\n                };\n            }\n            // Catch success\n            dbOpenRequest.onsuccess = e => {\n                // ----------------\n                this.setDatabaseSchema(databaseName, {})\n                // ----------------\n                this.setDefaultDB(databaseName, params).then(() => {\n                    resolve(new IDBDatabase(this, databaseName, {\n                        database: e.target.result,\n                        schema: this.getDatabaseSchema(databaseName)\n                    }, params));\n                });\n            };\n        });\n    }\n\n    /**\n     * Initiates \"alter DB\".\n     * \n     * @param String databaseName\n     * @param Object params\n     * @param Function callback\n     * \n     * @return Any\n\t */\n    async alterDatabase(databaseName, params, callback) {\n        if (!_isNumeric(params.version)) {\n            throw new Error(`Database version (params.version) must be numeric.`);\n        }\n        if (!(await this.databases(databaseName, params.version)).length) {\n            if (params.ifExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} does not exist.`);\n        }\n        return new Promise(resolve => {\n            // Define schema\n            var upgradeneededCalled, callbackReturn;\n            var dbOpenRequest = this.indexedDB.open(databaseName, params.version);\n            dbOpenRequest.onupgradeneeded = e => {\n                upgradeneededCalled = true;\n                callbackReturn = callback(e.target.result);\n            };\n            // Catch success\n            dbOpenRequest.onsuccess = e => {\n                if (!upgradeneededCalled) {\n                    throw new Error(`Store name \"${databaseName}@${params.version}\" could not be accessed for modification!`);\n                }\n                resolve(callbackReturn);\n            };\n        });\n    }\n\n    /**\n     * Drops a database.\n     * \n     * @param String databaseName\n     * @param Object params\n     * \n     * @return Bool\n     */\n    async dropDatabase(databaseName, params = {}) {\n        if (!(await this.databases(databaseName, params)).length) {\n            if (params.ifExists) {\n                return;\n            }\n            throw new Error(`Database ${databaseName} does not exist.`);\n        }\n        return new Promise(resolve => {\n            var dbDeleteRequest = this.indexedDB.deleteDatabase(databaseName);\n            // Catch success\n            dbDeleteRequest.onsuccess = e => {\n                // ----------------\n                this.unsetDatabaseSchema(databaseName)\n                // ----------------\n                resolve(true);\n            };\n        });\n    }\n\n    /**\n     * ---------\n     * QUERY\n     * ---------\n     */\n\t \n\t/**\n     * @inheritdoc\n\t */\n\tasync query(query, vars = [], params = {}) {\n        params = {...params};\n        params.vars = vars;\n        params.dbDriver = this;\n        return ObjSQL.parse(query, null, params).eval(this);\n    }\n}"],"sourceRoot":""}