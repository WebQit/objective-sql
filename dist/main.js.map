{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../jsen/node_modules/@onephrase/util/js/isArray.js","webpack:///../jsen/node_modules/@onephrase/util/js/isTypeFunction.js","webpack:///../jsen/node_modules/@onephrase/util/js/isFunction.js","webpack:///../jsen/node_modules/@onephrase/util/js/isObject.js","webpack:///../jsen/node_modules/@onephrase/util/js/isTypeObject.js","webpack:///../jsen/node_modules/@onephrase/util/js/isNumeric.js","webpack:///../jsen/node_modules/@onephrase/util/obj/getAllPropertyNames.js","webpack:///../jsen/node_modules/@onephrase/util/obj/getPrototypeChain.js","webpack:///../jsen/node_modules/@onephrase/util/arr/pushUnique.js","webpack:///../jsen/node_modules/@onephrase/util/obj/mergeCallback.js","webpack:///../jsen/node_modules/@onephrase/util/obj/merge.js","webpack:///../jsen/node_modules/@onephrase/util/js/isNull.js","webpack:///../jsen/node_modules/@onephrase/util/js/isUndefined.js","webpack:///../jsen/node_modules/@onephrase/util/arr/remove.js","webpack:///../jsen/node_modules/@onephrase/util/js/instanceof.js","webpack:///../jsen/node_modules/@onephrase/util/js/isNumber.js","webpack:///../jsen/node_modules/@onephrase/util/js/isPlainObject.js","webpack:///../jsen/node_modules/@onephrase/util/js/isBoolean.js","webpack:///../jsen/node_modules/@onephrase/util/obj/each.js","webpack:///../jsen/node_modules/@onephrase/util/obj/even.js","webpack:///../jsen/node_modules/@onephrase/util/obj/compareCallback.js","webpack:///../jsen/src/ExprInterface.js","webpack:///../jsen/src/Expr/ReferenceInterface.js","webpack:///../jsen/src/Expr/CallInterface.js","webpack:///../jsen/src/Expr/FuncInterface.js","webpack:///../jsen/src/Expr/IfInterface.js","webpack:///../jsen/src/SyntaxError.js","webpack:///../jsen/src/Jsen.js","webpack:///../jsen/node_modules/@onephrase/util/js/isClass.js","webpack:///../jsen/node_modules/@onephrase/util/js/isString.js","webpack:///../jsen/node_modules/@onephrase/util/str/after.js","webpack:///../jsen/node_modules/@onephrase/util/str/before.js","webpack:///../jsen/node_modules/@onephrase/util/arr/unique.js","webpack:///../jsen/src/ReferenceError.js","webpack:///../jsen/src/Scope.js","webpack:///../jsen/node_modules/@onephrase/util/str/wrapped.js","webpack:///../jsen/node_modules/@onephrase/util/str/unwrap.js","webpack:///../jsen/node_modules/@onephrase/util/str/beforeLast.js","webpack:///../jsen/node_modules/@onephrase/util/arr/from.js","webpack:///../jsen/node_modules/@onephrase/util/js/isEmpty.js","webpack:///../jsen/node_modules/@onephrase/util/js/isTypeArray.js","webpack:///../jsen/node_modules/@onephrase/util/arr/flatten.js","webpack:///../jsen/node_modules/@onephrase/util/arr/first.js","webpack:///../jsen/node_modules/@onephrase/util/arr/last.js","webpack:///../jsen/node_modules/@onephrase/util/obj/copyPlain.js","webpack:///../jsen/node_modules/@onephrase/util/str/Lexer.js","webpack:///../jsen/src/Expr/AbstractionInterface.js","webpack:///../jsen/src/Expr/Abstraction.js","webpack:///../jsen/src/Expr/ArrInterface.js","webpack:///../jsen/src/Expr/Arr.js","webpack:///../jsen/src/Expr/ArgumentsInterface.js","webpack:///../jsen/src/Expr/Arguments.js","webpack:///../jsen/src/Expr/AssertionInterface.js","webpack:///../jsen/src/Expr/Assertion.js","webpack:///../jsen/src/Expr/AssignmentInterface.js","webpack:///../jsen/src/Expr/Assignment.js","webpack:///../jsen/node_modules/@onephrase/util/obj/copy.js","webpack:///../jsen/src/Expr/BlockInterface.js","webpack:///../jsen/src/Expr/ReturnInterface.js","webpack:///../jsen/src/Expr/Block.js","webpack:///../jsen/src/Expr/BoolInterface.js","webpack:///../jsen/src/Expr/Bool.js","webpack:///../jsen/src/Expr/Call.js","webpack:///../jsen/src/Expr/ComparisonInterface.js","webpack:///../jsen/src/Expr/Comparison.js","webpack:///../jsen/src/Expr/ConditionInterface.js","webpack:///../jsen/src/Expr/Condition.js","webpack:///../jsen/src/Expr/DeletionInterface.js","webpack:///../jsen/src/Expr/Deletion.js","webpack:///../jsen/src/Expr/Func.js","webpack:///../jsen/src/Expr/If.js","webpack:///../jsen/node_modules/@onephrase/util/arr/intersect.js","webpack:///../jsen/src/Expr/MathInterface.js","webpack:///../jsen/src/Expr/Math.js","webpack:///../jsen/src/Expr/NumInterface.js","webpack:///../jsen/src/Expr/Num.js","webpack:///../jsen/src/Expr/ObjInterface.js","webpack:///../jsen/src/Expr/Obj.js","webpack:///../jsen/src/Expr/PresenceInterface.js","webpack:///../jsen/src/Expr/Presence.js","webpack:///../jsen/src/Expr/Reference.js","webpack:///../jsen/src/Expr/Return.js","webpack:///../jsen/src/Expr/StrInterface.js","webpack:///../jsen/src/Expr/Str.js","webpack:///../jsen/src/Expr/VoidInterface.js","webpack:///../jsen/src/Expr/Void.js","webpack:///../jsen/src/index.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isString.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isUndefined.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isTypeFunction.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isFunction.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isArray.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isNull.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isTypeObject.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isEmpty.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isObject.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/from.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isTypeArray.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isNumeric.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/flatten.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/first.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/last.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/pushUnique.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/getAllPropertyNames.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/getPrototypeChain.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/mergeCallback.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/merge.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isNumber.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isPlainObject.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/isBoolean.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/each.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/even.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/compareCallback.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/copyPlain.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/str/Lexer.js","webpack:///./src/Rql.js","webpack:///./src/ExprInterface.js","webpack:///./src/Expr/Assertion.js","webpack:///./src/Expr/Comparison.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/str/after.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/str/before.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/str/beforeLast.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/str/unwrap.js","webpack:///./src/Base/Schema.js","webpack:///./src/ArrowReference.js","webpack:///./src/Expr/Reference.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/remove.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/mixin.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/find.js","webpack:///./src/Expr/AggrInterface.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/inherit.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/str/wrapped.js","webpack:///./src/Expr/WindowInterface.js","webpack:///./src/Expr/OrderByInterface.js","webpack:///./src/Expr/OrderBy.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/sort.js","webpack:///./src/Expr/Window.js","webpack:///./src/Expr/Aggr.js","webpack:///./src/Stmt/DeleteInterface.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/unique.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/promise.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/from.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/copy.js","webpack:///./src/Stmt/SelectInterface.js","webpack:///./src/Stmt/UnionInterface.js","webpack:///./src/Base/Cursor.js","webpack:///./src/Base/Table.js","webpack:///./src/Base/FetchInterface.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/intersect.js","webpack:///./src/Base/DerivedTable.js","webpack:///./src/Base/IDBCursor.js","webpack:///./src/Base/IDBTable.js","webpack:///./src/Uac/Query.js","webpack:///./src/Uac/Client.js","webpack:///./src/Expr/TableInterface.js","webpack:///./src/Expr/Table.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/sum.js","webpack:///./src/Base/Row.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/avg.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/max.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/min.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/arr/rand.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/obj/get.js","webpack:///./src/Base/Base.js","webpack:///./src/Stmt/Stmt.js","webpack:///C:/Users/ox_ha/Documents/CODE/onephrase/util/js/instanceof.js","webpack:///./src/Stmt/Delete.js","webpack:///./src/Expr/FieldInterface.js","webpack:///./src/Expr/Field.js","webpack:///./src/Expr/GroupByInterface.js","webpack:///./src/Expr/GroupBy.js","webpack:///./src/Stmt/InsertInterface.js","webpack:///./src/Stmt/Insert.js","webpack:///./src/Expr/JoinInterface.js","webpack:///./src/Expr/Join.js","webpack:///./src/Expr/PlaceholderInterface.js","webpack:///./src/Stmt/Select.js","webpack:///./src/Stmt/UpdateInterface.js","webpack:///./src/Stmt/Update.js","webpack:///./src/index.js","webpack:///./src/Stmt/Union.js","webpack:///./src/Expr/Condition.js","webpack:///./src/Expr/Placeholder.js","webpack:///./src/browser-entry.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Array","isArray","val","toString","isNaN","keysAll","until","prototypalChain","obj","indexOf","push","getPrototypeOf","forEach","items","itm","arr","getOwnPropertyNames","mergeCallback","objs","callback","deepProps","isReplace","withSymbols","depth","obj1","shift","length","Error","obj2","valAtObj1","valAtObj2","getOwnPropertyDescriptor","e","k","arguments","undefined","limit","splice","classB","mixinTest","classA","Function","prototypes","reduce","prevAns","constructor","Number","returnValue","keys","parseFloat","assertion","obj1Keys","obj2Keys","result","contn","v1","testPass","v2","netComparison","contrast","returnOnFirstFalse","Expr","jsenType","this","Super","comments","meta","vars","Interface","ExprInterface","args","super","cache","expr","Parsers","params","_parsed","allowCache","parseOne","parsers","values","grammars","parsed","assert","SyntaxError","Parser","deepVars","parse","_expr","_Parsers","_params","subStmt","lodge","ReferenceInterface","CallInterface","_var","reference","context","FuncInterface","IfInterface","onTrue","concat","onFalse","explain","String","search","subject","pos","afterLast","lastIndexOf","substr","beforeLast","filter","index","self","stack","errorLevel","local","$local","trap","observe","props","prop","_has","main","scope","changes","references","delta","map","path","oldValue","subtree","tags","unobserve","final","level","callMain","handle","bindThis","contxtObj","contxtMeta","advance","_get","test","initKeyword","type","set","_set","cntxt","localContxtMeta","LogicalError","ReferenceError","deleteProperty","del","prop2","contextObj2","fn","exec","apply","execUnknown","has","startsWith","openingTag","endsWith","closingTag","castObject","slice","_flatten","withObjects","acc","count","firsts","amount","reverse","str","delims","options","copyResult","nesting","maxDepth","tokens","matches","matchesi","$cache","cached","lex","$str","$options","blocks","$blocks","quotes","$quotes","$comments","runtime","cursor","_evalCharsAt","join","charWidth","commentTest","quoteTest","nestingTest","openComment","_testQuotes","openQuote","_testComments","ending","_push","chars","starting","_testNesting","stopChar","_testChars","stopChars","stopCharForward","matchedDelim","preserveDelims","quote","block","Math","max","testList","ret","useRegex","match","RegExp","ci","toLowerCase","target","isNewSeries","splitSeries","splitSeries2","regParse","AbstractionInterface","eval","stringify","parseCallback","ArrInterface","exprs","newExprs","exprA","uniqueSoFar","exprB","even","trim","split","ArgumentsInterface","list","arg","AssertionInterface","logic","Assertion","negation","operators","toUpperCase","isOr","or","isNor","nor","isAnd","and","isNand","nand","lastResult","trues","Assignment","AssignmentInterface","operator","postIncrDecr","initialVal","getEval","includes","operandA","operandB","_pushUnique","message","testBlockEnd","isIncrDecr","a","b","BlockInterface","stmts","delim","stringifyEach","callEval","stmt","catch","results","isDirectEventTarget","f","v","isIndirectEventTarget","ReturnInterface","BoolInterface","state","pop","ComparisonInterface","operand1","operand2","compare","oper","strict","exact","is","isNull","equalsTo","strictlyNotEqualsTo","notEqualsTo","relative","lesserThan","greaterThan","lesserThanOrEqualsTo","greaterThanOrEqualsTo","between","partial","contains","any","in","ConditionInterface","splits","Deletion","DeletionInterface","red","Func","paramters","statements","arrowFunctionFormatting","parentParams","ownParams","nameInParent","nameInSelf","defaultValInParent","defaultValInSelf","sup","instance","newMainContext","defaultVal","nestedContext","retrn","body","headNoWrap","head","bodyNoWrap","funcHead","funcBody","param","paramSplit","_context","onTrueIsBlock","onFalseIsBlock","rest","arr2","val1","val2","MathInterface","currentTotal","sub","NumInterface","int","dec","parseInt","Obj","ObjInterface","entries","_entriesSplit","entry","Presence","PresenceInterface","backticks","sourceContext","subjectContext","separator","nameSplit","isContext","exprLc","StrInterface","VoidInterface","If","Return","Abstraction","Condition","Comparison","Arr","Num","Str","Bool","Void","Call","Reference","nextIndex","mutates","placeholdersTransformed","console","log","opts","AND","OR","like","_getDatabases","databases","version","databaseName","tables","replace","_return","currentDatabases","getDatabases","existingVersions","dropDatabase","_createDatabase","schemas","databaseCreateTables","table","schema","content","database","Promise","async","hasDatabase","_dropDatabase","resolve","qualifiedDatabaseName","openDatabase","_getTables","qualifiedTableName","tableDefinition","tableName","hasTable","dropTable","_createTable","getTables","_dropTable","update","openObjectStore","_seedTable","_emptyTable","createIfNotExists","fields","fieldName","field","referencedEntity","validateTableSchema","arrLeft","arrRight","baseSchema","table1","table2","SCHEMAS","isIncoming","actingKey","sourceTable","select","_sourceTable","primaryKey","foreignKey","isArrowReference","isReference","tempRow","isTableName","contexts","findContexts","isFieldName","arrowContext","_c","Traps","classes","Base","supersMap","Mixin","_class","supers","supersReturnValues","supr","_find","deep","subKey","prev","curr","OrderByInterface","columns","withRollup","tempRows","order","rows","by","grouping","row","_for","_arr","sort","localeCompare","ordering","WindowInterface","dfn","definitions","uuid","partitionBy","partitioning","partition","orderBy","WINDOWS","clauseType","AggrInterface","unshift","window","AGGR","aggrMatch","aggrMatchRegex","funcs","funcName","funcCategory","normal","explicitOver","support","handler","Cursor","_rows","flags","_onfinish","DB","storeName","alias","store","getStore","multiValues","duplicateKeyCallback","all","line","rowObj","schemaColumns","unknownFields","col","schemaColumnName","keyColumnPosition","default","columnName","append","onduplicateCallback","uniqueConstraints","successCode","primaryKeyPath","primaryKeyAutoIncrement","autoIncrement","uniqueKeys","existingRow","constraintViolation","constraintName","keyPath","_rowObj","IDBCursor","_store","_eof","_cursorRequest","_countRequest","_handleCursorFetch","_continueCursor","onsuccess","_count","openCursor","_cursor","continue","transaction","objectStore","progressive","getAllRequest","getAll","reject","addRequest","add","onerror","error","putRequest","put","USER","byRow","tableNameSplit","id","parent","lineage","privileges","where","uac","EXPLICIT_TABLE_ACCESS_QUERY","query","getExplicitRulesQuery","on","EXPLICIT_ROW_ACCESS_QUERY","attributionKey","account","ownerGuestRelationshipQuery","getOwnerGuestRelationshipQuery","AUTHOR_USER_RELATIONSHIP_QUERY","deriveEntityAccess","targetInLineageQuery","groupConcat","accessRightQueries","compiledAccessRights","right","accessType","withActingRights","entityAccess","getRightsRulesIntersectionExpression","rules","getGuestRightsExpression","fieldsAccesses","fieldAccess","rights","AUTHOR_USER_TOKEN_QUERY","rightsExpression","explicitFirstRule","nodeAccessAssertions","rule","ruleSql","OBJECT_QUERY","organicRights","priorityAccounts","accountSchema","ACCOUNT_QUERY","getAuthorUserRelationshipQuery","accesses","overObject","orAsRelatedTo","withFields","objectId","standardAccesses","entityJson","fieldsJson","deriveFieldsAccess","access","allFieldsJson","accessesDocs","TableInterface","claused","getName","defaultDB","engine","getSchema","_schema","derivedQuery","derivedTable","getTable","derivedTableSchema","getAliasOfField","getFields","getAlias","keyPathAliased","getDatabaseName","fieldsByReference","getEngine","then","isIndexedDB","getIDBDatabase","isIDBDatabase","tableParse","withUac","SelectInterface","UnionInterface","indexedDB","open","IDBDatabase","_indexedDB","total","next","column","vals","COLUMN","min","rand","floor","random","onColumns","isRollup","cum","byStr","columnStr","doc","reciever","_ctxt","ctxt","_key","exists","JSON","doc1","doc2","joins","cursors","getCursor","current","onfinish","eof","rowCompositionRejection","baseCursor","baseRowData","fetch","joinedCursors","joinedRowData","joinCursor","joinRow","conditionClause","condition","conditionRowComposition","rowComposition","rowMember","mainTable","strArray","clause","clauses","stmtClauses","_exprParse","__exprParse","arrowReferences","smartJoins","arrowRef","baseTable","arrowRefEval","joinStmt","DeleteInterface","base","getBase","getToString","stmtParse","getParse","FieldInterface","exprParse","GroupByInterface","having","groupBy","group","summaryRow","$","InsertInterface","insertType","onDuplicateKeyUpdate","tableBase","tableSchema","assignment","insert","newRow","tableColumnSplit","JoinInterface","TableBase","windows","offset","applyFields","collectAggrs","aggr","win","aggrs","x","fieldValObject","aggrExprs","_fields","_field","Mql","aggrFields","completed","_tempRow","_even","windowName","windowsByName","windowSplit","flag","UpdateInterface","assignments","Union","queries","q","onDuplicate","paramsRegex","selects","lastStmtSplit","Select","Insert","Update","Delete","Join","Aggr","Placeholder","PlaceholderInterface","notation","WN","Rql","WebNative"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\n/**\r\n * Tells if val is of type \"array\".\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val);\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"function\".\r\n * This holds true for both regular functions and classes.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn typeof val === 'function';\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"function\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\r\n};\r\n","\r\n/**\r\n * Tells if val is pure object.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"object\".\r\n * This holds true for anything object, including built-ins.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"string\" or a numeric string.\r\n * This holds true for both numbers and numeric strings.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _pushUnique from '../arr/pushUnique.js';\r\nimport _getPrototypeChain from './getPrototypeChain.js';\r\n\r\n/**\r\n * Eagerly retrieves object members all down the prototype chain.\r\n *\r\n * @param object\t \tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return array\r\n */\r\nexport default function(obj, until) {\r\n\tvar keysAll = [];\r\n\t_getPrototypeChain(obj, until).forEach(obj => {\r\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\r\n\t});\r\n\treturn keysAll;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the prototype chain.\r\n *\r\n * @param object \t\tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj, until) {\r\n\tuntil = until || Object.prototype;\r\n\tuntil = until && !_isArray(until) ? [until] : until;\r\n\t// We get the chain of inheritance\r\n\tvar prototypalChain = [];\r\n\tvar obj = obj;\r\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\r\n\t\tprototypalChain.push(obj);\r\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\r\n\t}\r\n\treturn prototypalChain;\r\n};\r\n","\r\n/**\r\n * Adds an item if not already exist.\r\n *\r\n * @param array \tarr\r\n * @param array\t \t...itms\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, ...items) {\r\n\titems.forEach(itm => {\r\n\t\tif (arr.indexOf(itm) < 0) {\r\n\t\t\tarr.push(itm);\r\n\t\t}\r\n\t});\r\n\treturn arr;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\nimport _getAllPropertyNames from './getAllPropertyNames.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function mergeCallback(objs, callback, deepProps = false, isReplace = false, withSymbols = true) {\r\n\tvar depth = 0;\r\n\tvar obj1 = objs.shift();\r\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\r\n\t\tdepth = obj1;\r\n\t\tobj1 = objs.shift();\r\n\t}\r\n\tif (!objs.length) {\r\n\t\tthrow new Error('_merge() requires two or more array/objects.');\r\n\t}\r\n\tobjs.forEach((obj2, i) => {\r\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.getOwnPropertyNames(obj2)).forEach(key => {\r\n\t\t\tvar valAtObj1 = obj1[key];\r\n\t\t\tvar valAtObj2 = obj2[key];\r\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \r\n\t\t\t&& (depth === true || depth > 0)) {\r\n\t\t\t\t// RECURSE...\r\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\r\n\t\t\t\tmergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace, withSymbols);\r\n\t\t\t} else if (callback(key, obj1, obj2, i)) {\r\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\t\t\tif (isReplace) {\r\n\t\t\t\t\t\tobj1[key] = valAtObj2;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tobj1.push(valAtObj2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// In case we're setting a read-only property\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (withSymbols) {\r\n\t\t\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tobj1[key] = obj2[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch(e) {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn obj1;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(...objs) {\r\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\r\n\t\treturn true;\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is null.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === null || val === '';\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"undefined\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\r\n};\r\n","\r\n/**\r\n * Removes instances of reference up to <limit> times.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \titm\r\n * @param int|bool \tlimit\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, itm, limit = false) {\r\n\tvar i = arr.indexOf(itm);\r\n\twhile (i > -1 && (limit || limit === false)) {\r\n\t\tarr.splice(i, 1);\r\n\t\tif (limit > 0) {\r\n\t\t\tlimit --;\r\n\t\t};\r\n\t\ti = arr.indexOf(itm);\r\n\t};\r\n\treturn arr;\r\n};\r\n","\r\n/**\r\n * Instanceof that supports our multi-inheritance implementstion.\r\n *\r\n * @param object\t \tobj1\r\n * @param object\t \tclassB\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj, classB) {\r\n\tif (!obj) {\r\n\t\treturn false;\r\n\t}\r\n\tif (obj instanceof classB) {\r\n\t\treturn true;\r\n\t}\r\n\tvar mixinTest = classA => {\r\n\t\twhile (classA && classA !== Function.prototype) {\r\n\t\t\tif (classA === classB || (classA.prototypes && classA.prototypes.reduce((prevAns, prototype) => prevAns || (prototype === classB) || mixinTest(prototype), false))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tclassA = Object.getPrototypeOf(classA);\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\treturn mixinTest(obj.constructor);\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"number\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val instanceof Number || (typeof val === 'number');\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from './isObject.js';\r\n\r\n/**\r\n * Tells if an object is direct instance of Object.prototype.\r\n * Quite useful in differentiating native objects and class instances from plain objects ({}).\r\n *\r\n * @param object \tobj\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj) {\r\n\treturn _isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"boolean\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === true || val === false;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Loops thru obj flatly with a callback function.\r\n * Stops when callback returns a non-undefined value.\r\n *\r\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\r\n * @param function \t\t\t\tcallback \t\tThe callback function.\r\n *\r\n * @return mixed|null\t\t\tAny non-null return from callback\r\n */\r\nexport default function(obj, callback) {\r\n\tvar returnValue = undefined;\r\n\tif (_isTypeObject(obj)) {\r\n\t\tObject.keys(obj).forEach((k, i) => {\r\n\t\t\tif (returnValue !== false) {\r\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn returnValue;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumber from '../js/isNumber.js';\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isPlainObject from '../js/isPlainObject.js';\r\nimport _compareCallback from './compareCallback.js';\r\n\r\n/**\r\n * Asserts (members of) the first value against (members of) subsequent values.\r\n * Assertion could be TRUE, FALSE, or custom.\r\n *\r\n * @param mixed \t\t\tobj1\r\n * @param mixed \t\t\tobj2\r\n * @param bool|function\t\tassertion\r\n * @param int\t\t\t\tdepth\r\n *\r\n * @return bool\r\n */\r\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\r\n\tif (_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length) {\r\n\t\treturn !assertion;\r\n\t}\r\n\tif (_isObject(obj1) && _isObject(obj2)) {\r\n\t\tvar obj1Keys = Object.keys(obj1);\r\n\t\tvar obj2Keys = Object.keys(obj2);\r\n\t\tif (!obj1Keys.length && !obj2Keys.length) {\r\n\t\t\t// Objects that won't show keys must be compared by instance\r\n\t\t\t// Many native objects won't. So we can't judge by keys alone.\r\n\t\t\treturn _isPlainObject(obj1) && _isPlainObject(obj2) \r\n\t\t\t\t? assertion\r\n\t\t\t\t: (obj1 === obj2) === assertion;\r\n\t\t}\r\n\t\tif (!_even(obj1Keys, obj2Keys)) {\r\n\t\t\treturn !assertion;\r\n\t\t}\r\n\t}\r\n\tif (depth > 0 && ((_isArray(obj1) && _isArray(obj2)) || (_isObject(obj1) && _isObject(obj2)))) {\r\n\t\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\r\n\t\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\r\n\t\treturn _isArray(result) \r\n\t\t\t? result.length === obj1.length && result.length === obj2.length \r\n\t\t\t: (_isObject(result) && _isObject(obj1) \r\n\t\t\t\t? Object.keys(result).length === Object.keys(obj1).length && Object.keys(result).length ===  Object.keys(obj2).length \r\n\t\t\t\t: result);\r\n\t}\r\n\treturn _isFunction(assertion) ? assertion(obj1, obj2) : (\r\n\t\t_isNumber(obj1) && _isNumber(obj2) && isNaN(obj1) && isNaN(obj2) \r\n\t\t\t? assertion \r\n\t\t\t: (obj1 === obj2) === assertion\r\n\t);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _even;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isBoolean from '../js/isBoolean.js';\r\nimport _each from './each.js';\r\n\r\n/**\r\n * Gets the match(es) between (members of) two values;\r\n * assertion optionally custom.\r\n *\r\n * @param mixed \t\t\tob1\r\n * @param mixed \t\t\tobj2\r\n * @param string|function\tassertion\r\n * @param bool\t\t\t\tnetComparison\r\n * @param bool\t\t\t\tcontrast\r\n * @param bool\t\t\t\treturnOnFirstFalse\r\n *\r\n * @return bool|array|object\r\n */\r\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\r\n\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\tvar result = [];\r\n\t\tvar contn = true;\r\n\t\tobj1.forEach(v1 => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = false;\r\n\t\t\t_each(obj2, (k, v2) => {\r\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\r\n\t\t\t\t\ttestPass = assertion(v1, v2);\r\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\t\t\ttestPass = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\r\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\r\n\t\t\t\t\t\tv1 = testPass;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult.push(netComparison ? testPass : v1);\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult.push(testPass);\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult.push(v1);\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tif (_isObject(obj1) && _isObject(obj2)) {\r\n\t\tvar result = {};\r\n\t\tvar contn = true;\r\n\t\tObject.keys(obj1).forEach(k => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);\r\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\ttestPass = false;\r\n\t\t\t}\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult[k] = testPass;\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult[k] = obj1[k];\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\nimport _even from '@onephrase/util/obj/even.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ExprInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class {\r\n\t\r\n\t/**\r\n\t * Compares the current instance with another object.\r\n\t *\r\n\t * @param object Expr\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\teven(Expr) {\r\n\t\tif (_isObject(Expr) && Expr.jsenType === this.jsenType) {\r\n\t\t\treturn _even(Expr, this);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Inherits properties from a super Expr.\r\n\t *\r\n\t * @param ExprInterface Super\r\n\t *\r\n\t * @return this\r\n\t */\r\n\tinherit(Super) {\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds comments to the instance.\r\n\t *\r\n\t * @param string\t comments\r\n\t *\r\n\t * @return this\r\n\t */\r\n\twithComments(comments) {\r\n\t\tif (!this.meta) {\r\n\t\t\tthis.meta = {};\r\n\t\t}\r\n\t\tthis.meta.comments = comments;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds variables to the instance.\r\n\t *\r\n\t * @param array\t\t vars\r\n\t *\r\n\t * @return this\r\n\t */\r\n\twithVars(vars) {\r\n\t\tif (!this.meta) {\r\n\t\t\tthis.meta = {};\r\n\t\t}\r\n\t\tthis.meta.vars = vars;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Evaluates the expression instance for a result,\r\n\t * optionally in the context of an object.\r\n\t *\r\n\t * @param object context\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t//eval(context = null, params = {})\r\n\t\r\n\t/**\r\n\t * SAttempts to parse a string into the class instance.\r\n\t *\r\n\t * @param string expr\r\n\t * @param object params\r\n\t *\r\n\t * @return ExprInterface\r\n\t */\r\n\t//static parse(expr, params = {})\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ReferenceInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Reference'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * CallInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'CallExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * FuncInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'FunctionType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * IfInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'IfConditional'; },\r\n});\r\nexport default Interface;\r\n","/**\r\n * SyntaxError\r\n */\r\nexport default class extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.name = 'Syntax Error';\r\n    }\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _merge from '@onephrase/util/obj/merge.js';\r\nimport _isEmpty from '@onephrase/util/js/isEmpty.js';\r\nimport _remove from '@onephrase/util/arr/remove.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _instanceof from '@onephrase/util/js/instanceof.js';\r\nimport ReferenceInterface from './Expr/ReferenceInterface.js';\r\nimport CallInterface from './Expr/CallInterface.js';\r\nimport FuncInterface from './Expr/FuncInterface.js';\r\nimport IfInterface from './Expr/IfInterface.js';\r\nimport SyntaxError from './SyntaxError.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Jsen (base) class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst cache = {};\r\nexport default class Jsen {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, Parsers, params = {}) {\r\n\t\tif (expr.length) {\r\n\t\t\tif (cache[expr] && !Parsers && params.allowCache !== false) {\r\n\t\t\t\tvar _parsed;\r\n\t\t\t\tif (_parsed = this.parseOne(expr, cache[expr], params)) {\r\n\t\t\t\t\treturn _parsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar parsers = Object.values(Parsers || this.grammars);\r\n\t\t\tfor (var i = 0; i < parsers.length; i ++) {\r\n\t\t\t\tvar parsed = this.parseOne(expr, parsers[i], params);\r\n\t\t\t\tif (parsed) {\r\n\t\t\t\t\tif (!Parsers && params.allowCache !== false) {\r\n\t\t\t\t\t\tcache[expr] = parsers[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn parsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tif (params.assert === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new SyntaxError(expr);\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\r\n\tstatic parseOne(expr, Parser, params = {}) {\r\n\t\t// From this point forward, all vars is within current scope\r\n\t\tvar vars = [], deepVars = [];\r\n\t\tvar parsed = Parser.parse(expr, (_expr, _Parsers, _params = {}) => {\r\n\t\t\tvar subStmt = this.parse(_expr, _Parsers, _params ? _merge({}, params, _params) : params);\r\n\t\t\tif (_params.lodge !== false) {\r\n\t\t\t\tif (_instanceof(subStmt, ReferenceInterface) || _instanceof(subStmt, CallInterface)) {\r\n\t\t\t\t\tvars.push(subStmt);\r\n\t\t\t\t}\r\n\t\t\t\tif (subStmt) {\r\n\t\t\t\t\tsubStmt.meta.vars.forEach(_var => vars.push(_var));\r\n\t\t\t\t\tsubStmt.meta.deepVars.forEach(_var => deepVars.push(_var));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn subStmt;\r\n\t\t}, params);\r\n\t\t// Add/remove vars to scope\r\n\t\tif (parsed) {\r\n\t\t\tif (!parsed.meta) {\r\n\t\t\t\tparsed.meta = {};\r\n\t\t\t}\r\n\t\t\tparsed.meta.vars = vars;\r\n\t\t\tparsed.meta.deepVars = deepVars;\r\n\t\t\tif (_instanceof(parsed, CallInterface)) {\r\n\t\t\t\tif (parsed.reference.context) {\r\n\t\t\t\t\tparsed.meta.vars.push(parsed.reference.context);\r\n\t\t\t\t}\r\n\t\t\t} else if (_instanceof(parsed, FuncInterface)) {\r\n\t\t\t\tparsed.meta.vars.splice(0);\r\n\t\t\t\tparsed.meta.deepVars.splice(0);\r\n\t\t\t} else if (_instanceof(parsed, IfInterface)) {\r\n\t\t\t\tif (parsed.onTrue) {\r\n\t\t\t\t\tparsed.onTrue.meta.vars.concat(parsed.onTrue.meta.deepVars).forEach(_var => {\r\n\t\t\t\t\t\t_remove(parsed.meta.vars, _var);\r\n\t\t\t\t\t\tparsed.meta.deepVars.push(_var);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (parsed.onFalse) {\r\n\t\t\t\t\tparsed.onFalse.meta.vars.concat(parsed.onFalse.meta.deepVars).forEach(_var => {\r\n\t\t\t\t\t\t_remove(parsed.meta.vars, _var);\r\n\t\t\t\t\t\tparsed.meta.deepVars.push(_var);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (_isArray(params.explain)) {\r\n\t\t\t\tparams.explain.push(expr + ' >>------------->> ' + parsed.jsenType);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parsed;\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"class\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isTypeFunction(val) && /^class\\s?/.test(Function.prototype.toString.call(val));\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"string\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\r\n};\r\n","\r\n/**\r\n * Return the remainder of a string after a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   afterLast\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search, afterLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn '';\r\n\t}\r\n\treturn subject.substr(pos + search.length);\r\n};\r\n","\r\n/**\r\n * Return the part of a string before a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   beforeLast\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search, beforeLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn subject;\r\n\t}\r\n\treturn subject.substr(0, pos);\r\n};\r\n","\r\n/**\r\n * Returns a list of unique items.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n *\t *\r\n * @return array\r\n */\r\nexport default function(arr) {\r\n\tconst distinct = (value, index, self) => {\r\n\t\treturn self.indexOf(value) === index;\r\n\t};\r\n\treturn arr.filter(distinct);\r\n};\r\n","/**\r\n * ReferenceError\r\n */\r\nexport default class extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.name = 'Reference Error';\r\n    }\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeObject from '@onephrase/util/js/isTypeObject.js';\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport _isFunction from '@onephrase/util/js/isFunction.js';\r\nimport _isClass from '@onephrase/util/js/isClass.js';\r\nimport _isString from '@onephrase/util/js/isString.js';\r\nimport _isNull from '@onephrase/util/js/isNull.js';\r\nimport _isNumber from '@onephrase/util/js/isNumber.js';\r\nimport _after from '@onephrase/util/str/after.js';\r\nimport _before from '@onephrase/util/str/before.js';\r\nimport _unique from '@onephrase/util/arr/unique.js';\r\nimport ReferenceError from './ReferenceError.js';\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default class Scope {\r\n\r\n\t/**\r\n\t * Creates a new context stack.\r\n\t *\r\n\t * @param object\t \tparams\r\n\t * @param object\t\tparams\r\n\t *\r\n\t * @return Scope\r\n\t */\r\n\tconstructor(stack, params = {}) {\r\n\t\tthis.stack = stack;\r\n\t\tthis.params = params;\r\n\t\tif (!('main' in this.stack)) {\r\n\t\t\tthrow new Error('A \"main\" context must be provided!');\r\n\t\t}\r\n\t\tif (this.stack.super) {\r\n\t\t\tthis.stack.super = Scope.create(this.stack.super, {errorLevel: params.errorLevel});\r\n\t\t}\r\n\t\tthis.stack.local = this.stack.local || {};\r\n\t\tthis.stack.$local = this.stack.$local || {};\r\n\t}\r\n\r\n\t/**\r\n\t * Binds a callback to changes\r\n\t * that happen in the contexts.\r\n\t *\r\n\t * @param object\t\t \ttrap\r\n\t * @param function\t\t \tcallback\r\n\t *\r\n\t * @return Scope\r\n\t */\r\n\tobserve(trap, callback) {\r\n\t\tif (this.stack.super) {\r\n\t\t\tthis.stack.super.observe(trap, (e) => {\r\n\t\t\t\tif (e.props.filter(prop => !_has(this.stack.local, prop, trap) && !_has(this.stack.main, prop, trap)).length) {\r\n\t\t\t\t\te.scope = 'super';\r\n\t\t\t\t\treturn callback(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\ttrap.observe(this.stack, changes => {\r\n\t\t\t// Changes firing directly from super and local should be ignored\r\n\t\t\tchanges = changes.filter(delta => delta.name === 'main');\r\n\t\t\tvar references = changes.map(delta => _after(delta.path, '.'))\r\n\t\t\t\t.filter(path => path);\r\n\t\t\tvar props = references.map(path => _before(path, '.'));\r\n\t\t\tif (!references.length && changes.length && changes[0].value) {\r\n\t\t\t\tprops = _unique((\r\n\t\t\t\t\t\t_isTypeObject(changes[0].value) ? Object.keys(changes[0].value) : []\r\n\t\t\t\t\t).concat(changes[0].oldValue && _isTypeObject(changes[0].oldValue) ? Object.keys(changes[0].oldValue) : [])\r\n\t\t\t\t);\r\n\t\t\t\treferences = props;\r\n\t\t\t}\r\n\t\t\tif (props.filter(prop => !_has(this.stack.local, prop, trap)).length) {\r\n\t\t\t\treturn callback({\r\n\t\t\t\t\tprops,\r\n\t\t\t\t\treferences,\r\n\t\t\t\t\tscope:'local',\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\tsubtree:true,\r\n\t\t\ttags:[this, 'jsen-context',],\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Unbinds callbacks previously bound\r\n\t * with observe()\r\n\t *\r\n\t * @param object\t\t \ttrap\r\n\t * @param function\t\t \tcallback\r\n\t *\r\n\t * @return Scope\r\n\t */\r\n\tunobserve(trap, callback) {\r\n\t\tif (this.stack.super) {\r\n\t\t\tthis.stack.super.unobserve(trap, callback);\r\n\t\t}\r\n\t\ttrap.unobserve(this.stack, callback, {\r\n\t\t\tsubtree:true,\r\n\t\t\ttags:[this, 'jsen-context',],\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tries the handler on the different contexts in the stack.\r\n\t *\r\n\t * @param string|number \tprop\r\n\t * @param function\t\t \tcallback\r\n\t * @param function\t\t \tfinal\r\n\t *\r\n\t * @return Scope\r\n\t */\r\n\thandle(prop, callback, final, level = 0) {\r\n\t\tvar callMain = () => {\r\n\t\t\treturn callback(this.stack.main, null, () => {\r\n\t\t\t\tif (this.stack.super) {\r\n\t\t\t\t\treturn this.stack.super.handle(prop, callback, final, level + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif (final) {\r\n\t\t\t\t\treturn final();\r\n\t\t\t\t}\r\n\t\t\t}, level);\r\n\t\t};\r\n\t\t// Normally, we would begin with local...\r\n\t\t// but no if...\r\n\t\tif (prop === 'toString' && this.stack.local.toString === Object.prototype.toString) {\r\n\t\t\treturn callMain();\r\n\t\t}\r\n\t\t// Conditions are right, we begin with local\r\n\t\treturn callback(this.stack.local, this.stack.$local, callMain, level);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a property's value from the first possessing context.\r\n\t *\r\n\t * @param string|number prop\r\n\t * @param object\t\ttrap\r\n\t * @param bool\t\t\tbindThis\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\tget(prop, trap = {}, bindThis = true) {\r\n\t\tif (prop instanceof String) {\r\n\t\t\t// incase we recieved new String()\r\n\t\t\tprop = prop + '';\r\n\t\t}\r\n\t\treturn this.handle(prop, (contxtObj, contxtMeta, advance, level) => {\r\n\t\t\tvar val = _get(contxtObj, prop, trap);\r\n\t\t\t// asking first mught not go well generally && _has(this[i], prop, trap)\r\n\t\t\tif (!_isUndefined(val) || _has(contxtObj, prop, trap)) {\r\n\t\t\t\tif (_isFunction(val) && !_isClass(val) && bindThis) {\r\n\t\t\t\t\treturn val.bind(contxtObj);\r\n\t\t\t\t}\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t\treturn advance();\r\n\t\t}/* Not good for RQL derived fields , () => {throw new ReferenceError('\"' + prop + '\" is undefined!');}*/);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates a property's value from the first possessing context.\r\n\t * Or adds a new context to set the property.\r\n\t *\r\n\t * @param string|number prop\r\n\t * @param mixed\t\t\tval\r\n\t * @param object\t\ttrap\r\n\t * @param bool\t\t\tinitKeyword\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tset(prop, val, trap = {}, initKeyword = false) {\r\n\t\tif (this.params.type === 2 && initKeyword === 'var' && this.stack.super) {\r\n\t\t\treturn this.stack.super.set(prop, val, trap, initKeyword);\r\n\t\t}\r\n\t\tif (prop instanceof String) {\r\n\t\t\t// incase we recieved new String()\r\n\t\t\tprop = prop + '';\r\n\t\t}\r\n\t\tconst _set = (cntxt, prop, val, trap) => {\r\n\t\t\tif (trap.set) {\r\n\t\t\t\treturn trap.set(cntxt, prop, val);\r\n\t\t\t}\r\n\t\t\tcntxt[prop] = val;\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\treturn this.handle(initKeyword ? true : prop, (contxtObj, localContxtMeta, advance) => {\r\n\t\t\t// Whatever the level of localContext...\r\n\t\t\tif (localContxtMeta && localContxtMeta[prop] === 'const') {\r\n\t\t\t\tthrow new LogicalError('CONST ' + prop + ' cannot be modified!');\r\n\t\t\t}\r\n\t\t\t// Set this locally, we wont be getting to advance()\r\n\t\t\tif (initKeyword) {\r\n\t\t\t\tlocalContxtMeta[prop] = initKeyword;\r\n\t\t\t\treturn _set(contxtObj, prop, val, trap);\r\n\t\t\t}\r\n\t\t\t// For any other contex, it must already exists\r\n\t\t\tif (_has(contxtObj, prop, trap)) {\r\n\t\t\t\treturn _set(contxtObj, prop, val, trap);\r\n\t\t\t}\r\n\t\t\treturn advance();\r\n\t\t}, () => {throw new ReferenceError('\"' + prop + '\" is undefined!');});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Deletes a property from the first possessing context.\r\n\t *\r\n\t * @param string|number prop\r\n\t * @param object\t\ttrap\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tdel(prop, trap = {}) {\r\n\t\tif (prop instanceof String) {\r\n\t\t\t// incase we recieved new String()\r\n\t\t\tprop = prop + '';\r\n\t\t}\r\n\t\treturn this.handle(prop, (contxtObj, contxtMeta, advance) => {\r\n\t\t\tif (_has(contxtObj, prop, trap)) {\r\n\t\t\t\tif (contxtMeta) {\r\n\t\t\t\t\tdelete contxtMeta[prop];\r\n\t\t\t\t}\r\n\t\t\t\tif (trap.deleteProperty || trap.del) {\r\n\t\t\t\t\treturn (trap.deleteProperty || trap.del)(contxtObj, prop);\r\n\t\t\t\t}\r\n\t\t\t\tdelete contxtObj[prop];\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn advance();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if a property exists in any context.\r\n\t *\r\n\t * @param string|number prop\r\n\t * @param string|number prop2\r\n\t * @param object\t\ttrap\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\thas(prop, prop2, trap = {}) {\r\n\t\tif (prop instanceof String) {\r\n\t\t\t// incase we recieved new String()\r\n\t\t\tprop = prop + '';\r\n\t\t}\r\n\t\tif (prop2 instanceof String) {\r\n\t\t\t// incase we recieved new String()\r\n\t\t\tprop2 = prop2 + '';\r\n\t\t}\r\n\t\treturn this.handle(prop, (contxtObj, contxtMeta, advance) => {\r\n\t\t\tif (_has(contxtObj, prop, trap)) {\r\n\t\t\t\tvar contextObj2 = _get(contxtObj, prop, trap);\r\n\t\t\t\treturn _has(contextObj2, prop2, trap);\r\n\t\t\t}\r\n\t\t\treturn advance();\r\n\t\t}, () => {throw new ReferenceError('\"' + prop + '\" is undefined!');});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tests if a property exists in any context.\r\n\t *\r\n\t * @param string|number prop\r\n\t * @param array\t\t\targs\r\n\t * @param object\t\ttrap\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\texec(prop, args, trap = {}) {\r\n\t\tif (prop instanceof String) {\r\n\t\t\t// incase we recieved new String()\r\n\t\t\tprop = prop + '';\r\n\t\t}\r\n\t\treturn this.handle(prop, (contxtObj, contxtMeta, advance) => {\r\n\t\t\tvar fn = _get(contxtObj, prop, trap);\r\n\t\t\tif (!_isUndefined(fn) || _has(contxtObj, prop, trap)) {\r\n\t\t\t\tif (!_isFunction(fn)) {\r\n\t\t\t\t\tif (trap.exec) {\r\n\t\t\t\t\t\treturn trap.exec(contxtObj, prop, args);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow new ReferenceError('\"' + prop + '\" is not a function! (Called on type: ' + typeof contxtObj + '.)');\r\n\t\t\t\t}\r\n\t\t\t\tif (trap.apply) {\r\n\t\t\t\t\treturn trap.apply(fn, contxtObj, args);\r\n\t\t\t\t}\r\n\t\t\t\treturn fn.apply(contxtObj, args);\r\n\t\t\t}\r\n\t\t\treturn advance();\r\n\t\t}, () => {\r\n\t\t\tif (trap.execUnknown) {\r\n\t\t\t\treturn trap.execUnknown(this, prop, args);\r\n\t\t\t}\r\n\t\t\tthrow new ReferenceError('\"' + prop + '()\" is undefined!');\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for making a Scope instance.\r\n\t *\r\n\t * @param array|object \tcntxt\r\n\t * @param object \t\tparams\r\n\t *\r\n\t * @return Scope\r\n\t */\r\n\tstatic create(cntxt, params = {}) {\r\n\t\treturn cntxt instanceof Scope ? cntxt : new Scope({\r\n\t\t\tmain: cntxt,\r\n\t\t}, params);\r\n\t}\r\n};\r\n\r\nconst _get = (cntxt, prop, trap) => {\r\n\tif (_isNull(cntxt) || _isUndefined(cntxt)) {\r\n\t\treturn;\r\n\t}\r\n\treturn trap.get && _isTypeObject(cntxt) ? trap.get(cntxt, prop) : (\r\n\t\tcntxt[prop]\r\n\t);\r\n};\r\n\r\nconst _has = (cntxt, prop, trap) => {\r\n\tif (_isNull(cntxt) || _isUndefined(cntxt)) {\r\n\t\treturn false;\r\n\t}\r\n\treturn trap.has && _isTypeObject(cntxt) ? trap.has(cntxt, prop) : (\r\n\t\t_isTypeObject(cntxt) ? prop in cntxt : !_isUndefined(cntxt[prop])\r\n\t);\r\n};","\r\n/**\r\n * Tells if the string is warapped with the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return bool\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _after from './after.js';\r\nimport _beforeLast from './beforeLast.js';\r\n\r\n/**\r\n * Returns the string without the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _before from './before.js';\r\n\r\n/**\r\n * Return the part of a string before last occurence of a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search) {\r\n\treturn _before(subject, search, true);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isTypeArray from '../js/isTypeArray.js';\r\nimport _isEmpty from '../js/isEmpty.js';\r\nimport _isObject from '../js/isObject.js';\r\n\r\n/**\r\n * Casts an array-like object to an array.\r\n *\r\n * @param mixed \tval\r\n * @param bool\t \tcastObject\r\n *\r\n * @return array\r\n */\r\nexport default function(val, castObject = true) {\r\n\tif (_isArray(val)) {\r\n\t\treturn val;\r\n\t};\r\n\tif (!castObject && _isObject(val)) {\r\n\t\treturn [val];\r\n\t};\r\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\r\n\t\treturn [];\r\n\t};\r\n\tif (_isTypeArray(val)) {\r\n\t\treturn Array.prototype.slice.call(val);\r\n\t};\r\n\tif (_isObject(val)) {\r\n\t\treturn Object.values(val);\r\n\t};\r\n\treturn [val];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNull from './isNull.js';\r\nimport _isUndefined from './isUndefined.js';\r\nimport _isTypeObject from './isTypeObject.js';\r\n\r\n/**\r\n * Tells if val is empty in its own type.\r\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\r\n * objects without keys, empty arrays.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \r\n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from './isString.js';\r\nimport _isUndefined from './isUndefined.js';\r\n\r\n/**\r\n * Tells if val is \"array-like\".\r\n * This holds true for anything that has a length property.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !_isString(val) && !_isUndefined(val.length);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Flattens a nested array to the given depth.\r\n *\r\n * @param array \tarr\r\n * @param int \t \tdepth\r\n * @param bool \t \twithObjects\r\n *\r\n * @return array\r\n */\r\nconst _flatten = function(arr, depth = 1, withObjects = true) {\r\n\tif (!_isNumeric(depth) || depth <= 0) {\r\n\t\treturn arr;\r\n\t};\r\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\r\n\t\tarr = Object.values(arr);\r\n\t};\r\n\tif (!_isArray(arr)) {\r\n\t\treturn arr;\r\n\t};\r\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \r\n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \r\n\t\t: acc.concat(val), []);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _flatten;","\r\n/**\r\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\tvar count = 0;\r\n\tarr.forEach(itm => {\r\n\t\tcount ++;\r\n\t});\r\n\tvar firsts = arr.slice(arr.length - count, amount);\r\n\treturn arguments.length > 1 ? firsts : firsts[0];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _first from './first.js';\r\n\r\n/**\r\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\treturn arguments.length > 1\r\n\t\t? _first(arr.slice().reverse(), amount).reverse()\r\n\t\t: _first(arr.slice().reverse());\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n * Copies only properties of an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tonly\r\n * @param array\t\t \texcept\r\n *\r\n * @return object\r\n */\r\nexport default function(obj, filter = []) {\r\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\r\n\t\tif (!_isFunction(obj2[key])) {\r\n\t\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t\t}\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from '../js/isString.js';\r\nimport _isUndefined from '../js/isUndefined.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _arrFrom from '../arr/from.js';\r\nimport _flatten from '../arr/flatten.js';\r\nimport _first from '../arr/first.js';\r\nimport _last from '../arr/last.js';\r\nimport _merge from '../obj/merge.js';\r\nimport _even from '../obj/even.js';\r\nimport _copyPlain from '../obj/copyPlain.js';\r\n\r\n/**\r\n * --------------------------\r\n * TOKENIZER\r\n * --------------------------\r\n */\r\n\r\nexport default class Lexer {\r\n\r\n\t/**\r\n\t * Factory method.\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic lex(str, delims, options = {}) {\r\n\t\tif (!_isString(str = str + '')) {\r\n\t\t\tthrow new Error('Argument1 must be a string!');\r\n\t\t}\r\n\t\tvar copyResult = result => {\r\n\t\t\treturn {\r\n\t\t\t\tdelims: result.delims.slice(),\r\n\t\t\t\toptions: _copyPlain(result.options),\r\n\t\t\t\tnesting: result.nesting.slice(),\r\n\t\t\t\tmaxDepth: result.maxDepth,\r\n\t\t\t\tcomments: result.comments.slice(),\r\n\t\t\t\ttokens: result.tokens.slice(),\r\n\t\t\t\tmatches: result.matches.slice(),\r\n\t\t\t\tmatchesi: _copyPlain(result.matchesi),\r\n\t\t\t};\r\n\t\t};\r\n\t\t// ASK CACHE ---------------------------\r\n\t\tif (Lexer.$cache[str] && options.cache !== false) {\r\n\t\t\tfor (var i = 0; i < Lexer.$cache[str].length; i ++) {\r\n\t\t\t\tvar cached = Lexer.$cache[str][i];\r\n\t\t\t\tif (_even(cached.delims, delims)) {\r\n\t\t\t\t\treturn copyResult(cached);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// FRESH PARSE\t -------------------------------\r\n\t\tvar instance = new Lexer(str, options);\r\n\t\tvar result = instance.lex(delims);\r\n\t\t// SAVE TO CACHE -------------------------------\r\n\t\tif (options.cache !== false) {\r\n\t\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\r\n\t\t\tLexer.$cache[str].push(result);\r\n\t\t}\r\n\t\treturn copyResult(result);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .split().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic split(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).tokens;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .match().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic match(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).matches;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a lexer instance on a string with the given options.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\r\n\t * @param number \t\tlimit\t\t\t\tMax results to return\r\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tconstructor(str, options) {\r\n\t\tif (!_isString(str)) {\r\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\r\n\t\t}\r\n\t\tthis.$str = str;\r\n\t\tthis.$options = options || {};\r\n\t\tif (!this.$options.blocks) {\r\n\t\t\tthis.$options.blocks = Lexer.$blocks;\r\n\t\t}\r\n\t\tif (!this.$options.quotes) {\r\n\t\t\tthis.$options.quotes = Lexer.$quotes;\r\n\t\t}\r\n\t\tif (!this.$options.comments) {\r\n\t\t\tthis.$options.comments = Lexer.$comments;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the instance string on the given delimeters.\r\n\t *\r\n\t * This method supports static calling,\r\n\t * in which case a string is required as the first argument.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tlex(delims, options) {\r\n\t\tvar runtime = {\r\n\t\t\tdelims: _arrFrom(delims),\r\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\r\n\t\t\tnesting: [],\r\n\t\t\tmaxDepth: 0,\r\n\t\t\tcomments: [],\r\n\t\t\ttokens: [],\r\n\t\t\tmatches: [],\r\n\t\t\tmatchesi: {},\r\n\t\t};\r\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\r\n\t\tvar cursor = 0;\r\n\t\twhile(typeof cursor === 'number') {\r\n\t\t\tcursor = this._evalCharsAt(runtime, cursor);\r\n\t\t}\r\n\t\tif (runtime.nesting.length) {\r\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\r\n\t\t}\r\n\t\t// RETURN NEW ----------------------------------\r\n\t\treturn runtime;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: evaluates and handles the character on the current cursor.\r\n\t * Advances the cursor.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_evalCharsAt(runtime, i) {\r\n\t\tif (i >= this.$str.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar charWidth = 1;\r\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\r\n\t\t// Quotes inside comments must be ignored\r\n\t\tif (!runtime.openComment) {\r\n\t\t\tquoteTest = this._testQuotes(runtime, i);\r\n\t\t}\r\n\t\t// Comments inside quotes must be ignored\r\n\t\tif (!runtime.openQuote) {\r\n\t\t\tcommentTest = this._testComments(runtime, i);\r\n\t\t}\r\n\t\t// Save comments\r\n\t\tif (runtime.openComment || commentTest.ending) {\r\n\t\t\t// Save only outer comments\r\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\r\n\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\tthis._push(runtime, chars, 'comments', commentTest.starting);\r\n\t\t\t} else {\r\n\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t}\r\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\r\n\t\t\t// Yes add quotes\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\treturn i + 1;\r\n\t\t} else {\r\n\t\t\t// Nesting tags inside comments and quotes have been ignored\r\n\t\t\tnestingTest = this._testNesting(runtime, i);\r\n\t\t\t// ---------------------\r\n\t\t\t// STOP ON THIS CHARACTER...?\r\n\t\t\t// ---------------------\r\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\r\n\t\t\t// STOP CHAR(S)? at top level?\r\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\r\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\r\n\t\t\t\truntime.options.stopChar = stopChar;\r\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// ---------------------\r\n\t\t\t// Match and split now...\r\n\t\t\t// ---------------------\r\n\t\t\tif (!runtime.delims.length) {\r\n\t\t\t\t// BLOCK-BASED SPLITTING...\r\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\r\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\r\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\r\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\r\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t} else/*no-nesting flag*/ {\r\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// ---------------------\r\n\t\t\t\t// DELIMS-BASED SPLITTING\r\n\t\t\t\t// ---------------------\r\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\t\t// In case the chars at index 0 is a delim,\r\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\r\n\t\t\t\t\tthis._push(runtime, '');\r\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\r\n\t\t\t\t\tif (matchedDelim !== false) {\r\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\r\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\r\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\r\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\r\n\t\t\t\t\t\t\t// The current character is a delimiter...\r\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\r\n\t\t\t\t\t\t\treturn i + (matchedDelim.length || 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\r\n\t\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\t\tthis._push(runtime, chars);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn i + charWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a quote start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testQuotes(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.quotes || []).forEach(quote => {\r\n\t\t\tif (this.$str.substr(i, 1) === quote) {\r\n\t\t\t\tif (!runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = quote;\r\n\t\t\t\t\tresult.starting = quote;\r\n\t\t\t\t} else if (quote === runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = false;\r\n\t\t\t\t\tresult.ending = quote;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a comment start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testComments(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.comments || []).forEach(block => {\r\n\t\t\tif (!runtime.openComment) {\r\n\t\t\t\tvar starting = _first(block);\r\n\t\t\t\tif (this.$str.substr(i).startsWith(starting)) {\r\n\t\t\t\t\truntime.openComment = block;\r\n\t\t\t\t\tresult.starting = starting;\r\n\t\t\t\t}\r\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\r\n\t\t\t\tvar ending = _last(block);\r\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\r\n\t\t\t\t\truntime.openComment = false;\r\n\t\t\t\t\tresult.ending = ending;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testNesting(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.blocks || []).forEach(block => {\r\n\t\t\tvar starting = _first(block);\r\n\t\t\tif (this.$str.substr(i).startsWith(starting)) {\r\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\r\n\t\t\t\tresult.starting = starting;\r\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\r\n\t\t\t\tvar ending = _last(block);\r\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\r\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\r\n\t\t\t\t\tresult.ending = ending;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\r\n\t *\r\n\t * @param array\t\ttestList\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t_testChars(testList, runtime, i) {\r\n\t\tfor (var k = 0; k < testList.length; k ++) {\r\n\t\t\tvar test = testList[k];\r\n\t\t\tif (_isFunction(test)) {\r\n\t\t\t\tvar ret = test(this.$str.substr(0, i), this.$str.substr(i));\r\n\t\t\t\tif (ret !== false) {\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (runtime.options.useRegex) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + test, runtime.options.useRegex !== true ? runtime.options.useRegex : ''));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\treturn m[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((!runtime.options.ci && this.$str.substr(i, test.length) === test)\r\n\t\t\t|| (runtime.options.ci && this.$str.substr(i, test.length).toLowerCase() === test.toLowerCase())) {\r\n\t\t\t\treturn test;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Expr helper: pushes a character or set of characters into the current split series.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param string\tchars\r\n\t * @param string\ttarget\r\n\t * @param bool\t\tisNewSeries\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_push(runtime, chars, target = 'tokens', isNewSeries = false) {\r\n\t\tvar splitSeries = runtime.matches.length;\r\n\t\tif (_isUndefined(runtime.tokens[splitSeries])) {\r\n\t\t\truntime.tokens[splitSeries] = '';\r\n\t\t}\r\n\r\n\t\tif (target === 'comments') {\r\n\t\t\tif (!runtime.tokens[splitSeries].comments) {\r\n\t\t\t\truntime.tokens[splitSeries] = new String(runtime.tokens[splitSeries]);\r\n\t\t\t\truntime.tokens[splitSeries].comments = [];\r\n\t\t\t}\r\n\t\t\tvar splitSeries2 = runtime.tokens[splitSeries].comments.length - (!runtime.tokens[splitSeries].comments.length || isNewSeries ? 0 : 1);\r\n\t\t\truntime.tokens[splitSeries].comments[splitSeries2] = (runtime.tokens[splitSeries].comments[splitSeries2] || '') + chars;\r\n\t\t} else {\r\n\t\t\tvar comments = runtime.tokens[splitSeries].comments;\r\n\t\t\truntime.tokens[splitSeries] = runtime.tokens[splitSeries] + chars;\r\n\t\t\t//runtime.tokens[splitSeries].comments = comments;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tsplit(str, delims, options) {\r\n\t\treturn this.lex(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tmatch(str, delims, options) {\r\n\t\treturn this.lex(delims, options).matches;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses the instance string on the given delimeters using regex.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tregParse(delims, options) {\r\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregSplit(delims, options) {\r\n\t\treturn this.regParse(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregMatch(delims, options) {\r\n\t\treturn this.regParse(delims, options).matches;\r\n\t}\r\n};\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$blocks = [['(', ')'], ['[', ']'], ['{', '}'],];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$quotes = ['\"', \"'\", '`',];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$comments = [['/*', '*/'], ['//', \"\\n\"],];\r\n\r\n/**\r\n * @var object\r\n */\r\nLexer.$cache = {};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AbstractionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Abstraction'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport AbstractionInterface from './AbstractionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Abstraction class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Abstraction = class extends AbstractionInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.expr.eval(context, params);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn '(' + this.expr.stringify(params) + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (_wrapped(expr, '(', ')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(_unwrap(expr, '(', ')'))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Abstraction;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ArrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ArrayType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport ArrInterface from './ArrInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Array utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Arr = class extends ArrInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs || [];\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof ArrInterface) {\r\n\t\t\tvar newExprs = Super.exprs.filter(exprA => {\r\n\t\t\t\treturn this.exprs.reduce((uniqueSoFar, exprB) => uniqueSoFar && !exprA.even(exprB), true);\r\n\t\t\t});\r\n\t\t\tthis.exprs = newExprs.concat(this.exprs);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.exprs.map(expr => expr.eval(context, params));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn '[' + this.exprs.map(expr => expr.stringify(params)).join(', ') + ']';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (_wrapped(expr, '[', ']') && !Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar splits = Lexer.split(_unwrap(expr, '[', ']'), [','])\r\n\t\t\t\t.map(n => n.trim()).filter(n => n).map(expr => parseCallback(expr));\r\n\t\t\treturn new this(splits);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @export\r\n */\r\nexport default Arr;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ArgumentsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Arguments'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport ArgumentsInterface from './ArgumentsInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Arguments class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Arguments = class extends ArgumentsInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(list = []) {\r\n\t\tsuper();\r\n\t\tthis.list = list;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.list.map(arg => arg.eval(context, params));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn '(' + this.list.map(arg => arg.stringify(params)).join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar args; expr = expr.trim();\r\n\t\tif (_wrapped(expr, '(', ')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn new this(\r\n\t\t\t\tLexer.split(_unwrap(expr, '(', ')'), [',']).map(arg => parseCallback(arg.trim()))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Arguments;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AssertionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AssertionExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _first from '@onephrase/util/arr/first.js';\r\nimport _flatten from '@onephrase/util/arr/flatten.js';\r\nimport _unique from '@onephrase/util/arr/unique.js';\r\nimport AssertionInterface from './AssertionInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assertion class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Assertion = class extends AssertionInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, logic) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.logic = logic;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\t eval(context = null, params = {}) {\r\n\t\tvar Assertion = this.constructor;\r\n\t\tif (this.logic.toLowerCase() === Assertion.negation.toLowerCase()) {\r\n\t\t\treturn !_first(this.exprs).eval(context, params);\r\n\t\t}\r\n\t\tvar operators = _flatten(Assertion.operators);\r\n\t\tvar logic = (this.logic || '').trim().toUpperCase();\r\n\t\tvar isOr = logic === (Assertion.operators.or || '').trim().toUpperCase();\r\n\t\tvar isNor = logic === (Assertion.operators.nor || '').trim().toUpperCase();\r\n\t\tvar isAnd = logic === (Assertion.operators.and || '').trim().toUpperCase();\r\n\t\tvar isNand = logic === (Assertion.operators.nand || '').trim().toUpperCase();\r\n\t\tvar lastResult = true, trues = 0;\r\n\t\tfor(var i = 0; i < this.exprs.length; i ++) {\r\n\t\t\tlastResult = this.exprs[i].eval(context, params);\r\n\t\t\tif (isAnd && !lastResult) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (isNand && !lastResult) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (isOr && lastResult) {\r\n\t\t\t\treturn lastResult;\r\n\t\t\t}\r\n\t\t\ttrues += lastResult ? 1 : 0;\r\n\t\t}\r\n\t\tif (isOr) {\r\n\t\t\t// Which is falsey,\r\n\t\t\t// by virtue of getting here\r\n\t\t\treturn lastResult;\r\n\t\t}\r\n\t\tif (isAnd || isNand) {\r\n\t\t\t// For AND and NAND, all entries must be true by now,\r\n\t\t\t// by virtue of getting here.\r\n\t\t\t// For AND, this means true; for NAND, false\r\n\t\t\treturn isAnd;\r\n\t\t}\r\n\t\t// For NOR, all entries need to be false\r\n\t\treturn isNor && trues === 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar Assertion = this.constructor;\r\n\t\tif (this.logic.toLowerCase() === Assertion.negation.toLowerCase()) {\r\n\t\t\treturn this.logic + _first(this.exprs).stringify(params);\r\n\t\t}\r\n\t\treturn this.exprs.map(expr => expr.stringify(params)).join(' ' + this.logic + ' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.toUpperCase().startsWith(this.negation.toUpperCase())) {\r\n\t\t\treturn new this(\r\n\t\t\t\t[parseCallback(expr.substr(this.negation.length))],\r\n\t\t\t\tthis.negation\r\n\t\t\t);\r\n\t\t}\r\n\t\tvar parse = Lexer.lex(expr, _flatten(this.operators));\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\tvar logic = _unique(parse.matches);\r\n\t\t\tif (logic.length > 1) {\r\n\t\t\t\tthrow new Error('\"AND\" and \"OR\" logic cannot be asserted in the same expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new this(\r\n\t\t\t\tparse.tokens.map(expr => parseCallback(expr.trim())),\r\n\t\t\t\t_first(logic)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nAssertion.negation = '!';\r\n\r\n/**\r\n * @prop object\r\n */\r\nAssertion.operators = {\r\n\tand: '&&',\r\n\tor: '||',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assertion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AssignmentInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AssignmentExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _last from '@onephrase/util/arr/last.js';\r\nimport _before from '@onephrase/util/str/before.js';\r\nimport _after from '@onephrase/util/str/after.js';\r\nimport _isNumber from '@onephrase/util/js/isNumber.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport AssignmentInterface from './AssignmentInterface.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport SyntaxError from '../SyntaxError.js';\r\nimport ReferenceError from '../ReferenceError.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assignment class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Assignment = class extends AssignmentInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(initKeyword, reference, val, operator = '=', postIncrDecr = false) {\r\n\t\tsuper();\r\n\t\tthis.initKeyword = initKeyword;\r\n\t\tthis.reference = reference;\r\n\t\tthis.val = val;\r\n\t\tthis.operator = operator;\r\n\t\tthis.postIncrDecr = postIncrDecr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\tvar val, initialVal, reference = this.reference.getEval(context, params);\r\n\t\tif (['++', '--'].includes(this.operator)) {\r\n\t\t\tinitialVal = this.reference.eval(context, params);\r\n\t\t\tif (!_isNumber(initialVal)) {\r\n\t\t\t\tthrow new Error(this.reference + ' must be a number!');\r\n\t\t\t}\r\n\t\t\tif (this.operator === '++') {\r\n\t\t\t\tval = initialVal + 1;\r\n\t\t\t} else {\r\n\t\t\t\tval = initialVal - 1;\r\n\t\t\t}\r\n\t\t} else if (['+=', '-=', '*=', '/='].includes(this.operator)) {\r\n\t\t\tvar operandA = reference.get();\r\n\t\t\tvar operandB = this.val.eval(context, params);\r\n\t\t\tif (this.operator !== '+=' && (!_isNumber(operandA) || !_isNumber(operandB))) {\r\n\t\t\t\tthrow new Error(this + ' - operands must each be a number!');\r\n\t\t\t}\r\n\t\t\tif (this.operator === '*=') {\r\n\t\t\t\tval = operandA * operandB;\r\n\t\t\t} else if (this.operator === '/=') {\r\n\t\t\t\tval = operandA / operandB;\r\n\t\t\t} else if (this.operator === '-=') {\r\n\t\t\t\tval = operandA - operandB;\r\n\t\t\t} else {\r\n\t\t\t\tval = operandA + operandB;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tval = this.val.eval(context, params);\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treference.set(val, this.initKeyword);\r\n\t\t\tif (params && _isArray(params.references)) {\r\n\t\t\t\t_pushUnique(params.references, this.reference.toString());\r\n\t\t\t}\r\n\t\t\treturn this.postIncrDecr ? initialVal : val;\r\n\t\t} catch(e) {\r\n\t\t\tif (e instanceof ReferenceError) {\r\n\t\t\t\tthrow new ReferenceError('[' + this + ']: ' + e.message);\r\n\t\t\t} else {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tif (['++', '--'].includes(this.operator)) {\r\n\t\t\treturn this.postIncrDecr \r\n\t\t\t\t? this.reference.stringify(params) + this.operator\r\n\t\t\t\t: this.operator + this.reference.stringify(params);\r\n\t\t}\r\n\t\treturn (this.initKeyword ? this.initKeyword + ' ' : '')\r\n\t\t\t+ [this.reference.stringify(params), this.operator, this.val.stringify(params)].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, this.operators.concat([testBlockEnd]));\r\n\t\tif (parse.matches.length) {\r\n\t\t\tvar initKeyword, reference, val, operator = parse.matches[0].trim(), isIncrDecr = ['++', '--'].includes(operator), postIncrDecr;\r\n\t\t\tif (isIncrDecr) {\r\n\t\t\t\tpostIncrDecr = (expr.trim().endsWith('++') || expr.trim().endsWith('--'));\r\n\t\t\t\treference = parse.tokens[postIncrDecr ? 'shift' : 'pop']().trim();\r\n\t\t\t} else {\r\n\t\t\t\treference = parse.tokens.shift().trim();\r\n\t\t\t\tval = parse.tokens.shift().trim();\r\n\t\t\t}\r\n\t\t\tif (['var', 'let', 'const'].includes(_before(reference, ' '))) {\r\n\t\t\t\tif (operator !== '=') {\r\n\t\t\t\t\tthrow new SyntaxError('Invalid declaration: ' + expr);\r\n\t\t\t\t}\r\n\t\t\t\tinitKeyword = _before(reference, ' ');\r\n\t\t\t\treference = _after(reference, ' ').trim();\r\n\t\t\t}\r\n\t\t\tif (!((reference = parseCallback(reference, null, {lodge: false})) instanceof ReferenceInterface) \r\n\t\t\t|| (!isIncrDecr && !(val = parseCallback(val)))) {\r\n\t\t\t\tthrow new SyntaxError(expr);\r\n\t\t\t}\r\n\t\t\treturn new this(initKeyword, reference, val, operator, postIncrDecr);\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nAssignment.operators = [\r\n\t'+=',\r\n\t'-=',\r\n\t'*=',\r\n\t'/=',\r\n\t'++',\r\n\t'--',\r\n];\r\n\r\nconst testBlockEnd = (a, b) => {\r\n\t// Match exactly \"=\", not \"=>\", \"==\", \"===\"\r\n\tif (!a.endsWith('=') && b.startsWith('=') && !b.startsWith('=>') && !b.startsWith('==') && !b.startsWith('===')) {\r\n\t\treturn '=';\r\n\t}\r\n\treturn false;\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assignment;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n * Copies an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tfilter\r\n *\r\n * @return object\r\n */\r\nexport default function(obj, filter = [], withSymbols = true) {\r\n\tvar depth = 0;\r\n\tif (_isNumeric(arguments[0]) && _isTypeObject(arguments[1])) {\r\n\t\tdepth = arguments[0];\r\n\t\tobj = arguments[1];\r\n\t\tfilter = arguments[2] || [];\r\n\t}\r\n\treturn _mergeCallback([depth, {}, obj], (key, obj1, obj2) => {\r\n\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t}, false/*deepProps*/, false/*isReplace*/, withSymbols);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * BlockInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Block'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ReturnInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ReturnDirective'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport _copy from '@onephrase/util/obj/copy.js';\r\nimport _unique from '@onephrase/util/arr/unique.js';\r\nimport _before from '@onephrase/util/str/before.js';\r\nimport _flatten from '@onephrase/util/arr/flatten.js';\r\nimport BlockInterface from './BlockInterface.js';\r\nimport ReturnInterface from './ReturnInterface.js';\r\nimport AssignmentInterface from './AssignmentInterface.js';\r\nimport Scope from '../Scope.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Block class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Block extends BlockInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(stmts, delim) {\r\n\t\tsuper();\r\n\t\tthis.stmts = stmts || [];\r\n\t\tthis.delim = delim;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\t// Current!\r\n\t\tparams = params ? _copy(params) : {};\r\n\t\tcontext = Scope.create(context);\r\n\t\t// Stringifies JSEN vars\r\n\t\tvar stringifyEach = list => _unique(list.map(expr => _before(_before(expr.toString(), '['), '(')));\r\n\t\tvar callEval = (stmt, context, _params) => {\r\n\t\t\ttry {\r\n\t\t\t\treturn stmt.eval(context, _params);\r\n\t\t\t} catch(e) {\r\n\t\t\t\tif (_params.catch) {\r\n\t\t\t\t\t_params.catch(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar results = [];\r\n\t\tfor (var i = 0; i < this.stmts.length; i ++) {\r\n\t\t\tvar stmt = this.stmts[i];\r\n\t\t\t// Lets be called...\r\n\t\t\tvar vars = stringifyEach(stmt.meta.vars);\r\n\t\t\tvar deepVars = stringifyEach(stmt.meta.deepVars || []);\r\n\t\t\tvar isDirectEventTarget = (params.references || []).filter(f => vars.filter(v => (v + '.').startsWith(f + '.')).length);\r\n\t\t\tvar isIndirectEventTarget = (params.references || []).filter(f => deepVars.filter(v => (v + '.').startsWith(f + '.')).length);\r\n\t\t\tif (!params.references || !params.references.length \r\n\t\t\t|| (isDirectEventTarget = isDirectEventTarget.length)\r\n\t\t\t|| (isIndirectEventTarget = isIndirectEventTarget.length)) {\r\n\t\t\t\tvar _params = params;\r\n\t\t\t\tif (isDirectEventTarget) {\r\n\t\t\t\t\t_params = _copy(params);\r\n\t\t\t\t\tdelete _params.references;\r\n\t\t\t\t}\r\n\t\t\t\tif (stmt instanceof ReturnInterface) {\r\n\t\t\t\t\treturn callEval(stmt, context, _params);\r\n\t\t\t\t}\r\n\t\t\t\tresults[i] = callEval(stmt, context, _params);\r\n\t\t\t\t// Add this change for subsequent statements\r\n\t\t\t\tif (params.references && (stmt instanceof AssignmentInterface)) {\r\n\t\t\t\t\tparams.references = params.references.concat(stringifyEach([stmt.reference]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn results;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.stmts.map(stmt => stmt.stringify(params)).join(this.delim);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr + ';', _flatten(this.operators).concat([Block.testBlockEnd]));\r\n\t\tif (parse.matches.length) {\r\n\t\t\treturn new this(\r\n\t\t\t\tparse.tokens.map(stmt => parseCallback(stmt.trim())).filter(a => a),\r\n\t\t\t\tparse.matches[0].trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic testBlockEnd(a, b) {\r\n\t\t// Cases of code blocks that won't end in \";\"\r\n\t\tif (a.endsWith('}') && !b.trim().startsWith('else')) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop array\r\n */\r\nBlock.operators = [\r\n\t';',\r\n\t\"\\r\\n\",\r\n];\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * BoolInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'BooleanType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport BoolInterface from './BoolInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Bool (boolean) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Bool = class extends BoolInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(state) {\r\n\t\tsuper();\r\n\t\tthis.state = state;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.state.toLowerCase().trim() === 'true';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.state;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar expr = expr.toLowerCase().trim();\r\n\t\tif (expr === 'true' || expr === 'false') {\r\n\t\t\treturn new this(expr);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Bool;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport CallInterface from './CallInterface.js';\r\nimport Arguments from './Arguments.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport SyntaxError from '../SyntaxError.js';\r\nimport ReferenceError from '../ReferenceError.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Call class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Call = class extends CallInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, args) {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.args = args;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\ttry {\r\n\t\t\tvar args = this.args.eval(context, params);\r\n\t\t\treturn this.reference.getEval(context, params).exec(args);\r\n\t\t} catch(e) {\r\n\t\t\tif (e instanceof ReferenceError) {\r\n\t\t\t\tthrow new ReferenceError('[' + this + ']: ' + e.message);\r\n\t\t\t} else {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.reference.stringify(params) + this.args.stringify(params);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (!expr.startsWith('(') && expr.endsWith(')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\tvar tokens = Lexer.split(expr, []);\r\n\t\t\tvar reference, args = tokens.pop();\r\n\t\t\tif (!((reference = parseCallback(tokens.join(''), null, {lodge: false})) instanceof ReferenceInterface) \r\n\t\t\t|| !(args = parseCallback(args, [Arguments]))) {\r\n\t\t\t\tthrow new SyntaxError(expr);\r\n\t\t\t}\r\n\t\t\treturn new this(reference, args);\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Call;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ComparisonInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ComparisonExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _flatten from '@onephrase/util/arr/flatten.js';\r\nimport _first from '@onephrase/util/arr/first.js';\r\nimport _last from '@onephrase/util/arr/last.js';\r\nimport _difference from '@onephrase/util/arr/difference.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\nimport _isString from '@onephrase/util/js/isString.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport ComparisonInterface from './ComparisonInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Comparison class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Comparison extends ComparisonInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(operand1, operand2, operator) {\r\n\t\tsuper();\r\n\t\tthis.operand1 = operand1;\r\n\t\tthis.operand2 = operand2;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.constructor.compare(\r\n\t\t\tthis.operand1.eval(context, params), \r\n\t\t\tthis.operand2.eval(context, params), \r\n\t\t\tthis.operator\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn [\r\n\t\t\tthis.operand1.stringify(params), \r\n\t\t\tthis.operator, \r\n\t\t\tthis.operand2.stringify(params)\r\n\t\t].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar operators = _flatten(this.operators).map(oper => ' ' + oper + ' ');\r\n\t\tvar parse = Lexer.lex(expr, operators);\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\tif (parse.tokens.length > 2) {\r\n\t\t\t\tthrow new Error('Malformed \"Comparison\" expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(_first(parse.tokens).trim()),\r\n\t\t\t\tparseCallback(_last(parse.tokens).trim()),\r\n\t\t\t\tparse.matches[0].trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * -------------------------------------------------------\r\n\t */\r\n\t \r\n\t/**\r\n\t * Use the operator type to compare the two operands\r\n\t *\r\n\t * @param mixed\t\toperand1\t\t\r\n\t * @param mixed\t\toperand2\t\t\r\n\t * @param string \toperator\t\t\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic compare(operand1, operand2, operator = '==') {\r\n\t\tif (_flatten(this.operators).indexOf(operator) === -1) {\r\n\t\t\tthrow new Error('The operator \"' + operator + '\" is not recognized.');\r\n\t\t}\r\n\t\tswitch(operator) {\r\n\t\t\tcase '===':\r\n\t\t\t\treturn operand1 === operand2;\r\n\t\t\tcase '==':\r\n\t\t\tcase '=':\r\n\t\t\t\treturn operand1 == operand2;\r\n\t\t\tcase '>':\r\n\t\t\t\treturn operand1 > operand2;\r\n\t\t\tcase '<':\r\n\t\t\t\treturn operand1 < operand2;\r\n\t\t\tcase '>=':\r\n\t\t\t\treturn operand1 >= operand2;\r\n\t\t\tcase '<=':\r\n\t\t\t\treturn operand1 <= operand2;\r\n\t\t\tcase '!=':\r\n\t\t\t\treturn operand1 != operand2;\r\n\t\t\tcase '<>':\r\n\t\t\tcase '!==':\r\n\t\t\t\treturn operand1 !== operand2;\r\n\t\t\tcase '^=':\r\n\t\t\t\treturn _isString(operand1) && operand1.startsWith(operand2);\r\n\t\t\tcase '$=':\r\n\t\t\t\treturn _isString(operand1) && operand1.endsWith(operand2);\r\n\t\t\tcase '*=':\r\n\t\t\t\t// Contains\r\n\t\t\t\treturn _isArray(operand2) || _isString(operand2) ? operand1.indexOf(operand2) > -1 : false;\r\n\t\t\tcase '~=':\r\n\t\t\t\t// Contains word\r\n\t\t\t\treturn _isString(operand1) && _isString(operand2) && (' ' + operand1 + ' ').indexOf(' ' + operand2 + ' ') > -1;\r\n\t\t\tcase '>=<': // Between\r\n\t\t\t\t if (!(_isArray(operand2) && operand2.length === 2)) {\r\n\t\t\t\t\t throw new Error('A \\'Between\\' comparison requires argument 2 to be an array of exactly 2 values.');\r\n\t\t\t\t }\r\n\t\t\t\t return operand1 >= operand2[0] && operand1 <= operand2[1];\r\n\t\r\n\t\t\tcase '/**/': // Regex\r\n\t\t\t\treturn operand2.match(new RegExp(operand1));\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * Compares two operands for differences\r\n\t *\r\n\t * @param mixed\t\toperand1\t\t\r\n\t * @param mixed\t\toperand2\t\t\r\n\t * @param bool\t \tstrict\t\t\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic diff(operand1, operand2, strict) {\r\n\t\treturn !this.compare(operand1, operand2, strict ? '===' : '==');\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nComparison.operators = {\r\n\texact: {\r\n\t\tis: '===',\r\n\t\tisNull: '===',\r\n\t\tequalsTo: '==',\r\n\t\tstrictlyNotEqualsTo: '!==',\r\n\t\tnotEqualsTo: '!=',\r\n\t},\r\n\trelative: {\r\n\t\tlesserThan: '<',\r\n\t\tgreaterThan: '>',\r\n\t\tlesserThanOrEqualsTo: '<=',\r\n\t\tgreaterThanOrEqualsTo: '>=',\r\n\t\tbetween: '>=<',\r\n\t},\r\n\tpartial: {\r\n\t\tstartsWith: '^=',\r\n\t\tendsWith: '$=',\r\n\t\tcontains: '*=',\r\n\t\tany: '~=',\r\n\t\tin: '~=',\r\n\t\tmatches: '/**/',\r\n\t},\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ConditionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'TernaryConditional'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport ConditionInterface from './ConditionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Condition extends ConditionInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.assertion.eval(context, params) \r\n\t\t\t? this.onTrue.eval(context, params) \r\n\t\t\t: this.onFalse.eval(context, params);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn [\r\n\t\t\tthis.assertion.stringify(params), \r\n\t\t\tthis.constructor.operators[0], \r\n\t\t\tthis.onTrue.stringify(params),\r\n\t\t\tthis.constructor.operators[1], \r\n\t\t\tthis.onFalse.stringify(params)\r\n\t\t].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar splits = Lexer.split(expr, this.operators);\r\n\t\tif (splits.length > 1) {\r\n\t\t\tif (splits.length === 2) {\r\n\t\t\t\tthrow new Error('Malformed ternary expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(splits[0].trim()),\r\n\t\t\t\tparseCallback(splits[1].trim()),\r\n\t\t\t\tparseCallback(splits[2].trim())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nCondition.operators = [\r\n\t'?', \r\n\t':',\r\n];","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DeletionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'DeleteExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _last from '@onephrase/util/arr/last.js';\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport DeletionInterface from './DeletionInterface.js';\r\nimport SyntaxError from '../SyntaxError.js';\r\nimport ReferenceError from '../ReferenceError.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Deletion class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Deletion = class extends DeletionInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, operator = 'delete') {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\ttry {\r\n\t\t\treturn this.reference.getEval(context, params).del();\r\n\t\t} catch(e) {\r\n\t\t\tif (e instanceof ReferenceError) {\r\n\t\t\t\tthrow new ReferenceError('[' + this + ']: ' + e.message);\r\n\t\t\t} else {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.operator + ' ' + this.reference.stringify(params);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, Object.values(this.operators));\r\n\t\tif (parse.matches.length === 1 && expr.startsWith(parse.matches[0] + ' ')) {\r\n\t\t\tvar reference;\r\n\t\t\tif (!((reference = parseCallback(parse.tokens.pop().trim())) instanceof ReferenceInterface)) {\r\n\t\t\t\tthrow new SyntaxError(expr);\r\n\t\t\t}\r\n\t\t\treturn new this(reference, parse.matches[0].trim());\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nDeletion.operators = {\r\n\tred: 'reduce', \r\n\tdel: 'delete',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Deletion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _copy from '@onephrase/util/obj/copy.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport _flatten from '@onephrase/util/arr/flatten.js';\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport FuncInterface from './FuncInterface.js';\r\nimport Block from './Block.js';\r\nimport Scope from '../Scope.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Func class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Func = class extends FuncInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(paramters, statements, arrowFunctionFormatting = {}) {\r\n\t\tsuper();\r\n\t\tthis.paramters = paramters || {};\r\n\t\tthis.statements = statements;\r\n\t\tthis.arrowFunctionFormatting = arrowFunctionFormatting;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof FuncInterface) {\r\n\t\t\tvar parentParams = Object.keys(Super.paramters);\r\n\t\t\tvar ownParams = Object.keys(this.paramters);\r\n\t\t\tfor (var i = 0; i < Math.max(ownParams.length, parentParams.length); i ++) {\r\n\t\t\t\tvar nameInParent = parentParams[i];\r\n\t\t\t\tvar nameInSelf = ownParams[i];\r\n\t\t\t\tif (!nameInSelf && nameInParent) {\r\n\t\t\t\t\tthrow new Error('Parameter #' + i + ' (' + nameInParent + ') in parent function must be implemented.');\r\n\t\t\t\t}\r\n\t\t\t\tif (nameInSelf && nameInParent) {\r\n\t\t\t\t\tvar defaultValInParent = Super.paramters[nameInParent];\r\n\t\t\t\t\tvar defaultValInSelf = this.paramters[nameInSelf];\r\n\t\t\t\t\tif (defaultValInSelf && !defaultValInParent) {\r\n\t\t\t\t\t\tthrow new Error('Parameter #' + i + ' (' + nameInSelf + ') must not have a default value as established in parent function.');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (defaultValInSelf && defaultValInParent && defaultValInSelf.jsenType !== defaultValInParent.jsenType) {\r\n\t\t\t\t\t\tthrow new Error('Default value for parameter #' + i + ' (' + nameInSelf + ') must be of type ' + defaultValInParent.jsenType + ' as established in parent function.');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.sup = Super;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\tvar instance = this;\r\n\t\treturn function(...args) {\r\n\t\t\tvar newMainContext = {};\r\n\t\t\t_each(Object.keys(instance.paramters), (i, name) => {\r\n\t\t\t\tvar defaultVal = instance.paramters[name];\r\n\t\t\t\tif (args.length - 1 < i && !defaultVal) {\r\n\t\t\t\t\tthrow new Error('The parameter \"' + name + '\" is required.');\r\n\t\t\t\t}\r\n\t\t\t\tnewMainContext[name] = args.length > i \r\n\t\t\t\t\t? args[i] \r\n\t\t\t\t\t: (instance.paramters[name] \r\n\t\t\t\t\t\t? instance.paramters[name].eval(context, params) \r\n\t\t\t\t\t\t: null);\r\n\t\t\t});\r\n\t\t\tif (!instance.arrowFunctionFormatting) {\r\n\t\t\t\tnewMainContext['this'] = this;\r\n\t\t\t}\r\n\t\t\t// But this newer context should come first\r\n\t\t\tvar errorLevel = context instanceof Scope ? context.params.errorLevel : undefined;\r\n\t\t\tvar nestedContext = new Scope({main:newMainContext, super:context}, {errorLevel});\r\n\t\t\tvar retrn = instance.statements.eval(nestedContext, params);\r\n\t\t\tif (instance.arrowFunctionFormatting.body === false) {\r\n\t\t\t\treturn retrn[0];\r\n\t\t\t}\r\n\t\t\treturn retrn;\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar paramters = [];\r\n\t\t_each(this.paramters, (name, value) => {\r\n\t\t\tparamters.push(name + (value ? '=' + value.stringify(params) : ''));\r\n\t\t});\r\n\t\tif (this.arrowFunctionFormatting) {\r\n\t\t\tvar headNoWrap = this.arrowFunctionFormatting.head === false || (paramters.length === 1 && paramters[0].indexOf('=') === -1);\r\n\t\t\tvar bodyNoWrap = this.arrowFunctionFormatting.body === false\r\n\t\t\treturn (headNoWrap ? paramters[0] : '(' + paramters.join(', ') + ')')\r\n\t\t\t+ ' => ' + (bodyNoWrap ? this.statements.stringify(params) : '{' + this.statements.stringify(params) + '}');\r\n\t\t}\r\n\t\treturn 'function (' + paramters.join(', ') + ') {' + this.statements.stringify(params) + '}';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\texpr = expr.trim();\r\n\t\tvar splits;\r\n\t\tif (expr.startsWith('function') \r\n\t\t&& (splits = Lexer.split(expr, []).slice(1).filter(b => b.trim())) && splits.length === 2) {\r\n\t\t\tvar arrowFunctionFormatting = false;\r\n\t\t\tvar funcHead = _unwrap(splits.shift().trim(), '(', ')');\r\n\t\t\tvar funcBody = _unwrap(splits.shift().trim(), '{', '}');\r\n\t\t} else if (!expr.startsWith('function') \r\n\t\t&& (splits = Lexer.split(expr, ['=>'])) && splits.length === 2) {\r\n\t\t\tvar funcHead = splits.shift().trim();\r\n\t\t\tvar funcBody = splits.shift().trim();\r\n\t\t\tvar arrowFunctionFormatting = {};\r\n\t\t\tif (_wrapped(funcHead, '(', ')')) {\r\n\t\t\t\tfuncHead = _unwrap(funcHead, '(', ')');\r\n\t\t\t} else {\r\n\t\t\t\tarrowFunctionFormatting.head = false;\r\n\t\t\t}\r\n\t\t\tif (_wrapped(funcBody, '{', '}')) {\r\n\t\t\t\tfuncBody = _unwrap(funcBody, '{', '}');\r\n\t\t\t} else {\r\n\t\t\t\tarrowFunctionFormatting.body = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar paramters = {};\r\n\t\tLexer.split(funcHead, [',']).forEach(param => {\r\n\t\t\tvar paramSplit = param.split('=');\r\n\t\t\tif (paramSplit[1]) {\r\n\t\t\t\tparamters[paramSplit[0].trim()] = parseCallback(paramSplit[1].trim(), null, {\r\n\t\t\t\t\t// Any varaibles should be added to public vars\r\n\t\t\t\t\tmeta: null,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tparamters[param.trim()] = null;\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar block = parseCallback(funcBody, [Block], {assert:false}) || parseCallback(funcBody, null, {\r\n\t\t\t// Any varaibles should be added to public vars\r\n\t\t\tmeta: null,\r\n\t\t});\r\n\t\treturn new this(\r\n\t\t\tparamters,\r\n\t\t\tblock.jsenType === 'Block' ? block : new Block([block]),\r\n\t\t\tarrowFunctionFormatting,\r\n\t\t);\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nFunc.operators = ['=>',];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Func;","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport IfInterface from './IfInterface.js';\r\nimport Block from './Block.js';\r\nimport Scope from '../Scope.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst If = class extends IfInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse, params = {}) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t\tthis.params = params;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n        var errorLevel = context instanceof Scope ? context.params.errorLevel : undefined;\r\n        var _context = new Scope({\r\n            main:{}, \r\n            super:context,\r\n        }, {type: 2, errorLevel});\r\n\t\treturn  this.assertion.eval(context/** original context */, params)\r\n\t\t\t? (this.onTrue ? this.onTrue.eval(_context, params) : undefined)\r\n            : (this.onFalse ? this.onFalse.eval(_context, params) : undefined);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n        var onTrue = this.onTrue && this.params.onTrueIsBlock \r\n            ? '{' + this.onTrue.stringify(params) + '}' \r\n            : (this.onTrue ? this.onTrue.stringify(params) : '');\r\n        var onFalse = this.onFalse && this.params.onFalseIsBlock \r\n            ? '{' + this.onFalse.stringify(params) + '}' \r\n            : (this.onFalse ? this.onFalse.stringify(params) : '');\r\n\t\treturn 'if (' + this.assertion.stringify(params) + ')' + onTrue + (onFalse ? ' else ' + onFalse : '');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n        expr = expr.trim();\r\n        var splits;\r\n        if (expr.startsWith('if') \r\n\t\t&& (splits = Lexer.split(expr, [], {limit:2}/*IMPORTANT*/).slice(1).filter(b => b.trim())) && splits.length === 2) {\r\n            var assertion = parseCallback(_unwrap(splits.shift().trim(), '(', ')').trim());\r\n            var rest = Lexer.split(splits.shift().trim(), ['else'], {limit:1}/*IMPORTANT*/);\r\n            var onTrue = rest.shift().trim(), onTrueIsBlock, onFalse = (rest.shift() || '').trim(), onFalseIsBlock;\r\n            if (_wrapped(onTrue, '{', '}')) {\r\n                // The braces gives us the onTrue block\r\n                onTrueIsBlock = true;\r\n                onTrue = _unwrap(onTrue, '{', '}').trim();\r\n            }\r\n            onTrue = parseCallback(onTrue, [Block], {assert:false, meta:null}) || parseCallback(onTrue, null, {meta:null});\r\n            if (onFalse) {\r\n                if (_wrapped(onFalse, '{', '}')) {\r\n                    // The braces gives us the onTrue block\r\n                    onFalseIsBlock = true;\r\n                    onFalse = _unwrap(onFalse, '{', '}').trim();\r\n                }\r\n                onFalse = parseCallback(onFalse, [Block], {assert:false, meta:null}) || parseCallback(onFalse, null, {meta:null});\r\n            }\r\n\t\t\treturn new this(assertion, onTrue, onFalse, {\r\n                    onTrueIsBlock,\r\n                    onFalseIsBlock,\r\n                }\r\n            );\r\n         }\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default If;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the intersection of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) !== -1\r\n\t);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * MathInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'MathExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumeric from '@onephrase/util/js/isNumeric.js';\r\nimport _flatten from '@onephrase/util/arr/flatten.js';\r\nimport _intersect from '@onephrase/util/arr/intersect.js';\r\nimport _unique from '@onephrase/util/arr/unique.js';\r\nimport MathInterface from './MathInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Math class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Math = class extends MathInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(val, exprs) {\r\n\t\tsuper();\r\n\t\tthis.val = val;\r\n\t\tthis.exprs = exprs;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.exprs.reduce((currentTotal, expr) => {\r\n\t\t\tvar val = expr.val.eval(context, params);\r\n\t\t\tvar operator = expr.operator.trim();\r\n\t\t\tif ((!_isNumeric(currentTotal) || !_isNumeric(val)) && operator !== '+') {\r\n\t\t\t\tthrow new Error('Invalid Math expression: ' + this.toString() + '!');\r\n\t\t\t}\r\n\t\t\tswitch(operator) {\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\treturn currentTotal + val;\r\n\t\t\t\tcase '-':\r\n\t\t\t\t\treturn currentTotal - val;\r\n\t\t\t\tcase '*':\r\n\t\t\t\t\treturn currentTotal * val;\r\n\t\t\t\tcase '/':\r\n\t\t\t\t\treturn currentTotal / val;\r\n\t\t\t}\r\n\t\t}, this.val.eval(context, params));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn [this.val.stringify(params)].concat(\r\n\t\t\tthis.exprs.map(expr => expr.operator + ' ' + expr.val.stringify(params))\r\n\t\t).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, _flatten(this.operators));\r\n\t\tif (parse.tokens.length > 1 && parse.matches.length === parse.tokens.length - 1) {\r\n\t\t\tvar operators = _unique(parse.matches);\r\n\t\t\tif (_intersect(operators, this.operators.sup).length && _intersect(operators, this.operators.sub).length) {\r\n\t\t\t\tthrow new Error('\"Addition/subtraction\" and \"multiplication/division\" operators cannot be used in the same expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(parse.tokens.shift().trim()),\r\n\t\t\t\tparse.tokens.map((expr, i) => {return {\r\n\t\t\t\t\toperator: parse.matches[i],\r\n\t\t\t\t\tval: parseCallback(expr.trim())\r\n\t\t\t\t};})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nMath.operators = {\r\n\tsup: ['*', '/'],\r\n\tsub: ['+', '-'],\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Math;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * NumInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'NumberType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumeric from '@onephrase/util/js/isNumeric.js';\r\nimport NumInterface from './NumInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Num (number) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Num = class extends NumInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(int, dec = 0) {\r\n\t\tsuper();\r\n\t\tthis.int = int;\r\n\t\tthis.dec = dec;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn parseFloat(this.int + (this.dec ? '.' + this.dec : null));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.int + (this.dec ? '.' + this.dec : null);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (_isNumeric(expr)) {\r\n\t\t\tvar expr = expr.split('.');\r\n\t\t\treturn new this(\r\n\t\t\t\tparseInt(expr.shift()),\r\n\t\t\t\tparseInt(expr.shift())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Num;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ObjInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ObjectType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport _first from '@onephrase/util/arr/first.js';\r\nimport _last from '@onephrase/util/arr/last.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport ObjInterface from './ObjInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Object utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Obj = class extends ObjInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(entries) {\r\n\t\tsuper();\r\n\t\tthis.entries = entries || {};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof ObjInterface) {\r\n\t\t\t_each(Super.entries, (name, val) => {\r\n\t\t\t\tif (!(name in this.entries)) {\r\n\t\t\t\t\tthis.entries[name] = val;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\tvar items = {};\r\n\t\t_each(this.entries, (key, expr) => {\r\n\t\t\titems[key] = expr.eval(context, params);\r\n\t\t});\r\n\t\treturn items;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar str = [];\r\n\t\t_each(this.entries, (key, expr) => {\r\n\t\t\tstr.push(key + Obj.operators.sub + expr.stringify(params));\r\n\t\t});\r\n\t\treturn '{' + str.join(Obj.operators.sup) + '}';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (_wrapped(expr, '{', '}') && !Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar entries = {};\r\n\t\t\tvar _entriesSplit = Lexer.split(_unwrap(expr, '{', '}'), [Obj.operators.sup])\r\n\t\t\t\t.map(n => n.trim()).filter(n => n);\r\n\t\t\t_each(_entriesSplit, (key, expr) => {\r\n\t\t\t\tvar entry = Lexer.split(expr, [Obj.operators.sub], {limit:1}/*IMPORTANT*/);\r\n\t\t\t\tentries[_first(entry).trim()] = parseCallback(_last(entry).trim());\r\n\t\t\t});\r\n\t\t\treturn new this(entries);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nObj.operators = {\r\n\tsup: ',',\r\n\tsub: ':',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Obj;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * PresenceInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'PresenceOperator'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _last from '@onephrase/util/arr/last.js';\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport PresenceInterface from './PresenceInterface.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport SyntaxError from '../SyntaxError.js';\r\nimport ReferenceError from '../ReferenceError.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Presence class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Presence = class extends PresenceInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(prop, reference, operator = 'in') {\r\n\t\tsuper();\r\n\t\tthis.prop = prop;\r\n\t\tthis.reference = reference;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\tvar prop = this.prop.eval(context, params);\r\n\t\ttry {\r\n\t\t\treturn this.reference.getEval(context, params).has(prop);\r\n\t\t} catch(e) {\r\n\t\t\tif (e instanceof ReferenceError) {\r\n\t\t\t\tthrow new ReferenceError('[' + this + ']: ' + e.message);\r\n\t\t\t} else {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn [this.prop.stringify(params), this.operator, this.reference.stringify(params)].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, this.operators);\r\n\t\tif (parse.tokens.length === 2) {\r\n\t\t\tvar prop, reference;\r\n\t\t\tif (!(prop = parseCallback(parse.tokens.shift().trim()))\r\n\t\t\t|| !((reference = parseCallback(parse.tokens.shift().trim())) instanceof ReferenceInterface)) {\r\n\t\t\t\tthrow new SyntaxError(expr);\r\n\t\t\t}\r\n\t\t\treturn new this(prop, reference, parse.matches[0].trim());\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nPresence.operators = [' in '];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Presence;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport ExprInterface from '../ExprInterface.js';\r\nimport Scope from '../Scope.js';\r\nimport SyntaxError from '../SyntaxError.js';\r\nimport ReferenceError from '../ReferenceError.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Reference = class extends ReferenceInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(context, name, backticks = false) {\r\n\t\tsuper();\r\n\t\tthis.context = context;\r\n\t\tthis.name = name;\r\n\t\tthis.backticks = backticks;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetEval(context = null, params = {}) {\r\n\t\tvar sourceContext = context, name = this.name;\r\n\t\tif (this.context) {\r\n\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\tname = name.eval(context, params);\r\n\t\t\t}\r\n\t\t\tsourceContext = this.context.eval(context, params);\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tget() {\r\n\t\t\t\treturn Scope.create(sourceContext).get(name, params.trap);\r\n\t\t\t},\r\n\t\t\tdel() {\r\n\t\t\t\treturn Scope.create(sourceContext).del(name, params.trap);\r\n\t\t\t},\r\n\t\t\thas(prop) {\r\n\t\t\t\treturn Scope.create(sourceContext).has(name, prop, params.trap);\r\n\t\t\t},\r\n\t\t\tset(val, initKeyword = null) {\r\n\t\t\t\treturn Scope.create(sourceContext).set(name, val, params.trap, initKeyword);\r\n\t\t\t},\r\n\t\t\texec(args) {\r\n\t\t\t\treturn Scope.create(sourceContext).exec(name, args, params.trap);\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\ttry {\r\n\t\t\treturn this.getEval(context, params).get();\r\n\t\t} catch(e) {\r\n\t\t\tif (e instanceof ReferenceError) {\r\n\t\t\t\tthrow new ReferenceError('[' + this + ']: ' + e.message);\r\n\t\t\t} else {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar name = this.name;\r\n\t\tif (this.context) {\r\n\t\t\tvar subjectContext = this.context.stringify(params);\r\n\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\tname = '[' + name.stringify(params) + ']';\r\n\t\t\t} else if (this.backticks) {\r\n\t\t\t\tname = '`' + name + '`';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar subjectContext = params.context;\r\n\t\t\tif (this.backticks) {\r\n\t\t\t\tname = '`' + name + '`';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (subjectContext || '') + (subjectContext && !name.startsWith('[') ? Reference.separator : '') + name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (!Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar splits = Lexer.split(expr, []);\r\n\t\t\t// ------------------------\r\n\t\t\t// name, first\r\n\t\t\t// ------------------------\r\n\t\t\tvar context, name = splits.pop(), backticks;\r\n\t\t\tvar nameSplit = Lexer.split(name.trim(), [this.separator], {preserveDelims:true});\r\n\t\t\tif (nameSplit.length > 1) {\r\n\t\t\t\tname = nameSplit.pop().substr(1);\r\n\t\t\t\tsplits = splits.concat(nameSplit);\r\n\t\t\t}\r\n\t\t\tif (_wrapped(name, '`', '`')) {\r\n\t\t\t\tname = _unwrap(name, '`', '`');\r\n\t\t\t\tbackticks = true;\r\n\t\t\t}\r\n\t\t\t// ------------------------\r\n\t\t\t// context, second\r\n\t\t\t// ------------------------\r\n\t\t\tif (splits.length) {\r\n\t\t\t\tcontext = parseCallback(splits.join(''));\r\n\t\t\t\tcontext.isContext = true;\r\n\t\t\t}\r\n\t\t\tif (_wrapped(name, '[', ']')) {\r\n\t\t\t\tif (!context) {\r\n\t\t\t\t\tthrow new SyntaxError(expr);\r\n\t\t\t\t}\r\n\t\t\t\tname = parseCallback(_unwrap(name, '[', ']'));\r\n\t\t\t}\r\n\t\t\treturn new this(context, name, backticks);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop string\r\n */\r\nReference.separator = '.';\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Reference;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport ReturnInterface from './ReturnInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Ret (return) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Return = class extends ReturnInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, params = {}) {\r\n\t\treturn this.expr ? this.expr.eval(context, params) : undefined;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.expr ? 'return ' + this.expr.stringify(params) : 'return';\r\n\t}\r\n\t\r\n\t/**\r\n\t * -------------------------------------------------------\r\n\t */\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar exprLc = expr.toLowerCase();\r\n\t\tif (exprLc.startsWith('return ') || exprLc === 'return') {\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(expr.substr(6).trim())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Return;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * StrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'StringType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport StrInterface from './StrInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport Bool from './Bool.js';\r\n\r\n/**\r\n * ---------------------------\r\n * String utils\r\n * ---------------------------\r\n */\r\n\r\nconst Str = class extends StrInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, quote) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t\tthis.quote = quote;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.expr;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.quote + this.expr + this.quote;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\texpr = expr.trim();\r\n\t\tif ((_wrapped(expr, '\"', '\"') || _wrapped(expr, \"'\", \"'\")) \r\n\t\t&& !Lexer.match(expr, [' ']).length) {\r\n\t\t\tvar quote = _wrapped(expr, '\"', '\"') ? '\"' : \"'\";\r\n\t\t\treturn new this(\r\n\t\t\t\t_unwrap(expr, quote, quote),\r\n\t\t\t\tquote\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Str;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * VoidInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Void'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport VoidInterface from './VoidInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Void (boolean) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Void = class extends VoidInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(val) {\r\n\t\tsuper();\r\n\t\tthis.val = val;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.val.toLowerCase().trim() === 'null' ? null : undefined;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar expr = expr.toLowerCase().trim();\r\n\t\tif (expr === 'null' || expr === 'undefined') {\r\n\t\t\treturn new this(expr);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Void;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Jsen from './Jsen.js';\r\nimport ExprInterface from './ExprInterface.js';\r\nimport Scope from './Scope.js';\r\nimport Abstraction from './Expr/Abstraction.js';\r\nimport AbstractionInterface from './Expr/AbstractionInterface.js';\r\nimport Arr from './Expr/Arr.js';\r\nimport ArrInterface from './Expr/ArrInterface.js';\r\nimport Arguments from './Expr/Arguments.js';\r\nimport ArgumentsInterface from './Expr/ArgumentsInterface.js';\r\nimport Assertion from './Expr/Assertion.js';\r\nimport AssertionInterface from './Expr/AssertionInterface.js';\r\nimport Assignment from './Expr/Assignment.js';\r\nimport AssignmentInterface from './Expr/AssignmentInterface.js';\r\nimport Block from './Expr/Block.js';\r\nimport BlockInterface from './Expr/BlockInterface.js';\r\nimport Bool from './Expr/Bool.js';\r\nimport BoolInterface from './Expr/BoolInterface.js';\r\nimport Call from './Expr/Call.js';\r\nimport CallInterface from './Expr/CallInterface.js';\r\nimport Comparison from './Expr/Comparison.js';\r\nimport ComparisonInterface from './Expr/ComparisonInterface.js';\r\nimport Condition from './Expr/Condition.js';\r\nimport ConditionInterface from './Expr/ConditionInterface.js';\r\nimport Deletion from './Expr/Deletion.js';\r\nimport DeletionInterface from './Expr/DeletionInterface.js';\r\nimport Func from './Expr/Func.js';\r\nimport FuncInterface from './Expr/FuncInterface.js';\r\nimport If from './Expr/If.js';\r\nimport IfInterface from './Expr/IfInterface.js';\r\nimport Math from './Expr/Math.js';\r\nimport MathInterface from './Expr/MathInterface.js';\r\nimport Num from './Expr/Num.js';\r\nimport NumInterface from './Expr/NumInterface.js';\r\nimport Obj from './Expr/Obj.js';\r\nimport ObjInterface from './Expr/ObjInterface.js';\r\nimport Presence from './Expr/Presence.js';\r\nimport PresenceInterface from './Expr/PresenceInterface.js';\r\nimport Reference from './Expr/Reference.js';\r\nimport ReferenceInterface from './Expr/ReferenceInterface.js';\r\nimport Return from './Expr/Return.js';\r\nimport ReturnInterface from './Expr/ReturnInterface.js';\r\nimport Str from './Expr/Str.js';\r\nimport StrInterface from './Expr/StrInterface.js';\r\nimport Void from './Expr/Void.js';\r\nimport VoidInterface from './Expr/VoidInterface.js';\r\n\r\n/**\r\n * @var object\r\n */\r\nJsen.grammars = {\r\n\tIf: If,\t\t\t\t\t\t// if (condition) expr1 else expre2\r\n\t//Block: Block,\t\t\t\t// field1 = 3; field2 = val2\r\n\tReturn: Return,\t\t\t\t// return field1\r\n\tDeletion: Deletion,\t\t\t// delete field1\r\n\tAssignment: Assignment,\t\t// field1[key1].key2 = k\r\n\tPresence: Presence,\t\t\t// key1 in field1\r\n\tFunc: Func,\t\t\t\t\t// (field1, field2) => {}\r\n\tAbstraction: Abstraction,\t// (field1)\r\n\tCondition: Condition,\t\t// field1 > field2 ? val1 : val2\r\n\tAssertion: Assertion,\t\t// !field1 && field2\r\n\tComparison: Comparison,\t\t// field1 > field2\r\n\tMath: Math,\t\t\t\t\t// field1 + field2\r\n\tArr: Arr,\t\t\t\t\t// [field1, field2]\r\n\tObj: Obj,\t\t\t\t\t// {field1:val1, field2:val2}\r\n\tNum: Num,\t\t\t\t\t// [0-9]\r\n\tStr: Str,\t\t\t\t\t// \"\"\r\n\tBool: Bool,\t\t\t\t\t// true\r\n\tVoid: Void,\t\t\t\t\t// null|undefined\r\n\tCall: Call,\t\t\t\t\t// field1()\r\n\tReference: Reference,\t\t// field1\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\tExprInterface,\r\n\tScope\r\n};\r\nexport {\r\n\tAbstraction,\r\n\tArr,\r\n\tArguments,\r\n\tAssertion,\r\n\tAssignment,\r\n\tBlock,\r\n\tBool,\r\n\tCall,\r\n\tComparison,\r\n\tCondition,\r\n\tDeletion,\r\n\tFunc,\r\n\tIf,\r\n\tMath,\r\n\tNum,\r\n\tObj,\r\n\tPresence,\r\n\tReference,\r\n\tReturn,\r\n\tStr,\r\n\tVoid,\r\n};\r\nexport {\r\n\tAbstractionInterface,\r\n\tArrInterface,\r\n\tArgumentsInterface,\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tBlockInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tDeletionInterface,\r\n\tFuncInterface,\r\n\tIfInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tObjInterface,\r\n\tPresenceInterface,\r\n\tReferenceInterface,\r\n\tReturnInterface,\r\n\tStrInterface,\r\n\tVoidInterface,\r\n};\r\nexport default Jsen;\r\n","\r\n/**\r\n * Tells if val is of type \"string\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"undefined\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"function\".\r\n * This holds true for both regular functions and classes.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn typeof val === 'function';\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"function\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"array\".\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val);\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is null.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === null || val === '';\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"object\".\r\n * This holds true for anything object, including built-ins.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNull from './isNull.js';\r\nimport _isUndefined from './isUndefined.js';\r\nimport _isTypeObject from './isTypeObject.js';\r\n\r\n/**\r\n * Tells if val is empty in its own type.\r\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\r\n * objects without keys, empty arrays.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \r\n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\r\n};\r\n","\r\n/**\r\n * Tells if val is pure object.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isTypeArray from '../js/isTypeArray.js';\r\nimport _isEmpty from '../js/isEmpty.js';\r\nimport _isObject from '../js/isObject.js';\r\n\r\n/**\r\n * Casts an array-like object to an array.\r\n *\r\n * @param mixed \tval\r\n * @param bool\t \tcastObject\r\n *\r\n * @return array\r\n */\r\nexport default function(val, castObject = true) {\r\n\tif (_isArray(val)) {\r\n\t\treturn val;\r\n\t};\r\n\tif (!castObject && _isObject(val)) {\r\n\t\treturn [val];\r\n\t};\r\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\r\n\t\treturn [];\r\n\t};\r\n\tif (_isTypeArray(val)) {\r\n\t\treturn Array.prototype.slice.call(val);\r\n\t};\r\n\tif (_isObject(val)) {\r\n\t\treturn Object.values(val);\r\n\t};\r\n\treturn [val];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from './isString.js';\r\nimport _isUndefined from './isUndefined.js';\r\n\r\n/**\r\n * Tells if val is \"array-like\".\r\n * This holds true for anything that has a length property.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !_isString(val) && !_isUndefined(val.length);\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"string\" or a numeric string.\r\n * This holds true for both numbers and numeric strings.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Flattens a nested array to the given depth.\r\n *\r\n * @param array \tarr\r\n * @param int \t \tdepth\r\n * @param bool \t \twithObjects\r\n *\r\n * @return array\r\n */\r\nconst _flatten = function(arr, depth = 1, withObjects = true) {\r\n\tif (!_isNumeric(depth) || depth <= 0) {\r\n\t\treturn arr;\r\n\t};\r\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\r\n\t\tarr = Object.values(arr);\r\n\t};\r\n\tif (!_isArray(arr)) {\r\n\t\treturn arr;\r\n\t};\r\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \r\n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \r\n\t\t: acc.concat(val), []);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _flatten;","\r\n/**\r\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\tvar count = 0;\r\n\tarr.forEach(itm => {\r\n\t\tcount ++;\r\n\t});\r\n\tvar firsts = arr.slice(arr.length - count, amount);\r\n\treturn arguments.length > 1 ? firsts : firsts[0];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _first from './first.js';\r\n\r\n/**\r\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\treturn arguments.length > 1\r\n\t\t? _first(arr.slice().reverse(), amount).reverse()\r\n\t\t: _first(arr.slice().reverse());\r\n};\r\n","\r\n/**\r\n * Adds an item if not already exist.\r\n *\r\n * @param array \tarr\r\n * @param array\t \t...itms\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, ...items) {\r\n\titems.forEach(itm => {\r\n\t\tif (arr.indexOf(itm) < 0) {\r\n\t\t\tarr.push(itm);\r\n\t\t}\r\n\t});\r\n\treturn arr;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _pushUnique from '../arr/pushUnique.js';\r\nimport _getPrototypeChain from './getPrototypeChain.js';\r\n\r\n/**\r\n * Eagerly retrieves object members all down the prototype chain.\r\n *\r\n * @param object\t \tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return array\r\n */\r\nexport default function(obj, until) {\r\n\tvar keysAll = [];\r\n\t_getPrototypeChain(obj, until).forEach(obj => {\r\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\r\n\t});\r\n\treturn keysAll;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the prototype chain.\r\n *\r\n * @param object \t\tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj, until) {\r\n\tuntil = until || Object.prototype;\r\n\tuntil = until && !_isArray(until) ? [until] : until;\r\n\t// We get the chain of inheritance\r\n\tvar prototypalChain = [];\r\n\tvar obj = obj;\r\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\r\n\t\tprototypalChain.push(obj);\r\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\r\n\t}\r\n\treturn prototypalChain;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\nimport _getAllPropertyNames from './getAllPropertyNames.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function mergeCallback(objs, callback, deepProps = false, isReplace = false, withSymbols = true) {\r\n\tvar depth = 0;\r\n\tvar obj1 = objs.shift();\r\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\r\n\t\tdepth = obj1;\r\n\t\tobj1 = objs.shift();\r\n\t}\r\n\tif (!objs.length) {\r\n\t\tthrow new Error('_merge() requires two or more array/objects.');\r\n\t}\r\n\tobjs.forEach((obj2, i) => {\r\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.getOwnPropertyNames(obj2)).forEach(key => {\r\n\t\t\tvar valAtObj1 = obj1[key];\r\n\t\t\tvar valAtObj2 = obj2[key];\r\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \r\n\t\t\t&& (depth === true || depth > 0)) {\r\n\t\t\t\t// RECURSE...\r\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\r\n\t\t\t\tmergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace, withSymbols);\r\n\t\t\t} else if (callback(key, obj1, obj2, i)) {\r\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\t\t\tif (isReplace) {\r\n\t\t\t\t\t\tobj1[key] = valAtObj2;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tobj1.push(valAtObj2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// In case we're setting a read-only property\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (withSymbols) {\r\n\t\t\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tobj1[key] = obj2[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch(e) {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn obj1;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(...objs) {\r\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\r\n\t\treturn true;\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"number\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val instanceof Number || (typeof val === 'number');\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from './isObject.js';\r\n\r\n/**\r\n * Tells if an object is direct instance of Object.prototype.\r\n * Quite useful in differentiating native objects and class instances from plain objects ({}).\r\n *\r\n * @param object \tobj\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj) {\r\n\treturn _isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"boolean\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === true || val === false;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Loops thru obj flatly with a callback function.\r\n * Stops when callback returns a non-undefined value.\r\n *\r\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\r\n * @param function \t\t\t\tcallback \t\tThe callback function.\r\n *\r\n * @return mixed|null\t\t\tAny non-null return from callback\r\n */\r\nexport default function(obj, callback) {\r\n\tvar returnValue = undefined;\r\n\tif (_isTypeObject(obj)) {\r\n\t\tObject.keys(obj).forEach((k, i) => {\r\n\t\t\tif (returnValue !== false) {\r\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn returnValue;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumber from '../js/isNumber.js';\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isPlainObject from '../js/isPlainObject.js';\r\nimport _compareCallback from './compareCallback.js';\r\n\r\n/**\r\n * Asserts (members of) the first value against (members of) subsequent values.\r\n * Assertion could be TRUE, FALSE, or custom.\r\n *\r\n * @param mixed \t\t\tobj1\r\n * @param mixed \t\t\tobj2\r\n * @param bool|function\t\tassertion\r\n * @param int\t\t\t\tdepth\r\n *\r\n * @return bool\r\n */\r\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\r\n\tif (_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length) {\r\n\t\treturn !assertion;\r\n\t}\r\n\tif (_isObject(obj1) && _isObject(obj2)) {\r\n\t\tvar obj1Keys = Object.keys(obj1);\r\n\t\tvar obj2Keys = Object.keys(obj2);\r\n\t\tif (!obj1Keys.length && !obj2Keys.length) {\r\n\t\t\t// Objects that won't show keys must be compared by instance\r\n\t\t\t// Many native objects won't. So we can't judge by keys alone.\r\n\t\t\treturn _isPlainObject(obj1) && _isPlainObject(obj2) \r\n\t\t\t\t? assertion\r\n\t\t\t\t: (obj1 === obj2) === assertion;\r\n\t\t}\r\n\t\tif (!_even(obj1Keys, obj2Keys)) {\r\n\t\t\treturn !assertion;\r\n\t\t}\r\n\t}\r\n\tif (depth > 0 && ((_isArray(obj1) && _isArray(obj2)) || (_isObject(obj1) && _isObject(obj2)))) {\r\n\t\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\r\n\t\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\r\n\t\treturn _isArray(result) \r\n\t\t\t? result.length === obj1.length && result.length === obj2.length \r\n\t\t\t: (_isObject(result) && _isObject(obj1) \r\n\t\t\t\t? Object.keys(result).length === Object.keys(obj1).length && Object.keys(result).length ===  Object.keys(obj2).length \r\n\t\t\t\t: result);\r\n\t}\r\n\treturn _isFunction(assertion) ? assertion(obj1, obj2) : (\r\n\t\t_isNumber(obj1) && _isNumber(obj2) && isNaN(obj1) && isNaN(obj2) \r\n\t\t\t? assertion \r\n\t\t\t: (obj1 === obj2) === assertion\r\n\t);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _even;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isBoolean from '../js/isBoolean.js';\r\nimport _each from './each.js';\r\n\r\n/**\r\n * Gets the match(es) between (members of) two values;\r\n * assertion optionally custom.\r\n *\r\n * @param mixed \t\t\tob1\r\n * @param mixed \t\t\tobj2\r\n * @param string|function\tassertion\r\n * @param bool\t\t\t\tnetComparison\r\n * @param bool\t\t\t\tcontrast\r\n * @param bool\t\t\t\treturnOnFirstFalse\r\n *\r\n * @return bool|array|object\r\n */\r\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\r\n\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\tvar result = [];\r\n\t\tvar contn = true;\r\n\t\tobj1.forEach(v1 => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = false;\r\n\t\t\t_each(obj2, (k, v2) => {\r\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\r\n\t\t\t\t\ttestPass = assertion(v1, v2);\r\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\t\t\ttestPass = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\r\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\r\n\t\t\t\t\t\tv1 = testPass;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult.push(netComparison ? testPass : v1);\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult.push(testPass);\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult.push(v1);\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tif (_isObject(obj1) && _isObject(obj2)) {\r\n\t\tvar result = {};\r\n\t\tvar contn = true;\r\n\t\tObject.keys(obj1).forEach(k => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);\r\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\ttestPass = false;\r\n\t\t\t}\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult[k] = testPass;\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult[k] = obj1[k];\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n * Copies only properties of an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tonly\r\n * @param array\t\t \texcept\r\n *\r\n * @return object\r\n */\r\nexport default function(obj, filter = []) {\r\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\r\n\t\tif (!_isFunction(obj2[key])) {\r\n\t\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t\t}\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from '../js/isString.js';\r\nimport _isUndefined from '../js/isUndefined.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _arrFrom from '../arr/from.js';\r\nimport _flatten from '../arr/flatten.js';\r\nimport _first from '../arr/first.js';\r\nimport _last from '../arr/last.js';\r\nimport _merge from '../obj/merge.js';\r\nimport _even from '../obj/even.js';\r\nimport _copyPlain from '../obj/copyPlain.js';\r\n\r\n/**\r\n * --------------------------\r\n * TOKENIZER\r\n * --------------------------\r\n */\r\n\r\nexport default class Lexer {\r\n\r\n\t/**\r\n\t * Factory method.\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic lex(str, delims, options = {}) {\r\n\t\tif (!_isString(str = str + '')) {\r\n\t\t\tthrow new Error('Argument1 must be a string!');\r\n\t\t}\r\n\t\tvar copyResult = result => {\r\n\t\t\treturn {\r\n\t\t\t\tdelims: result.delims.slice(),\r\n\t\t\t\toptions: _copyPlain(result.options),\r\n\t\t\t\tnesting: result.nesting.slice(),\r\n\t\t\t\tmaxDepth: result.maxDepth,\r\n\t\t\t\tcomments: result.comments.slice(),\r\n\t\t\t\ttokens: result.tokens.slice(),\r\n\t\t\t\tmatches: result.matches.slice(),\r\n\t\t\t\tmatchesi: _copyPlain(result.matchesi),\r\n\t\t\t};\r\n\t\t};\r\n\t\t// ASK CACHE ---------------------------\r\n\t\tif (Lexer.$cache[str] && options.cache !== false) {\r\n\t\t\tfor (var i = 0; i < Lexer.$cache[str].length; i ++) {\r\n\t\t\t\tvar cached = Lexer.$cache[str][i];\r\n\t\t\t\tif (_even(cached.delims, delims)) {\r\n\t\t\t\t\treturn copyResult(cached);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// FRESH PARSE\t -------------------------------\r\n\t\tvar instance = new Lexer(str, options);\r\n\t\tvar result = instance.lex(delims);\r\n\t\t// SAVE TO CACHE -------------------------------\r\n\t\tif (options.cache !== false) {\r\n\t\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\r\n\t\t\tLexer.$cache[str].push(result);\r\n\t\t}\r\n\t\treturn copyResult(result);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .split().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic split(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).tokens;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .match().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic match(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).matches;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a lexer instance on a string with the given options.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\r\n\t * @param number \t\tlimit\t\t\t\tMax results to return\r\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tconstructor(str, options) {\r\n\t\tif (!_isString(str)) {\r\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\r\n\t\t}\r\n\t\tthis.$str = str;\r\n\t\tthis.$options = options || {};\r\n\t\tif (!this.$options.blocks) {\r\n\t\t\tthis.$options.blocks = Lexer.$blocks;\r\n\t\t}\r\n\t\tif (!this.$options.quotes) {\r\n\t\t\tthis.$options.quotes = Lexer.$quotes;\r\n\t\t}\r\n\t\tif (!this.$options.comments) {\r\n\t\t\tthis.$options.comments = Lexer.$comments;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the instance string on the given delimeters.\r\n\t *\r\n\t * This method supports static calling,\r\n\t * in which case a string is required as the first argument.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tlex(delims, options) {\r\n\t\tvar runtime = {\r\n\t\t\tdelims: _arrFrom(delims),\r\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\r\n\t\t\tnesting: [],\r\n\t\t\tmaxDepth: 0,\r\n\t\t\tcomments: [],\r\n\t\t\ttokens: [],\r\n\t\t\tmatches: [],\r\n\t\t\tmatchesi: {},\r\n\t\t};\r\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\r\n\t\tvar cursor = 0;\r\n\t\twhile(typeof cursor === 'number') {\r\n\t\t\tcursor = this._evalCharsAt(runtime, cursor);\r\n\t\t}\r\n\t\tif (runtime.nesting.length) {\r\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\r\n\t\t}\r\n\t\t// RETURN NEW ----------------------------------\r\n\t\treturn runtime;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: evaluates and handles the character on the current cursor.\r\n\t * Advances the cursor.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_evalCharsAt(runtime, i) {\r\n\t\tif (i >= this.$str.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar charWidth = 1;\r\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\r\n\t\t// Quotes inside comments must be ignored\r\n\t\tif (!runtime.openComment) {\r\n\t\t\tquoteTest = this._testQuotes(runtime, i);\r\n\t\t}\r\n\t\t// Comments inside quotes must be ignored\r\n\t\tif (!runtime.openQuote) {\r\n\t\t\tcommentTest = this._testComments(runtime, i);\r\n\t\t}\r\n\t\t// Save comments\r\n\t\tif (runtime.openComment || commentTest.ending) {\r\n\t\t\t// Save only outer comments\r\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\r\n\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\tthis._push(runtime, chars, 'comments', commentTest.starting);\r\n\t\t\t} else {\r\n\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t}\r\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\r\n\t\t\t// Yes add quotes\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\treturn i + 1;\r\n\t\t} else {\r\n\t\t\t// Nesting tags inside comments and quotes have been ignored\r\n\t\t\tnestingTest = this._testNesting(runtime, i);\r\n\t\t\t// ---------------------\r\n\t\t\t// STOP ON THIS CHARACTER...?\r\n\t\t\t// ---------------------\r\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\r\n\t\t\t// STOP CHAR(S)? at top level?\r\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\r\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\r\n\t\t\t\truntime.options.stopChar = stopChar;\r\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// ---------------------\r\n\t\t\t// Match and split now...\r\n\t\t\t// ---------------------\r\n\t\t\tif (!runtime.delims.length) {\r\n\t\t\t\t// BLOCK-BASED SPLITTING...\r\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\r\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\r\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\r\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\r\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t} else/*no-nesting flag*/ {\r\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// ---------------------\r\n\t\t\t\t// DELIMS-BASED SPLITTING\r\n\t\t\t\t// ---------------------\r\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\t\t// In case the chars at index 0 is a delim,\r\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\r\n\t\t\t\t\tthis._push(runtime, '');\r\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\r\n\t\t\t\t\tif (matchedDelim !== false) {\r\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\r\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\r\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\r\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\r\n\t\t\t\t\t\t\t// The current character is a delimiter...\r\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\r\n\t\t\t\t\t\t\tvar nextIndex = i + (matchedDelim.length || 1);\r\n\t\t\t\t\t\t\tif (nextIndex === this.$str.length) {\r\n\t\t\t\t\t\t\t\t// In case the chars at last index is a delim,\r\n\t\t\t\t\t\t\t\t// the resulting split should last have an empty string\r\n\t\t\t\t\t\t\t\tthis._push(runtime, '');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn nextIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\r\n\t\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\t\tthis._push(runtime, chars);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn i + charWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a quote start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testQuotes(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.quotes || []).forEach(quote => {\r\n\t\t\tif (this.$str.substr(i, 1) === quote) {\r\n\t\t\t\tif (!runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = quote;\r\n\t\t\t\t\tresult.starting = quote;\r\n\t\t\t\t} else if (quote === runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = false;\r\n\t\t\t\t\tresult.ending = quote;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a comment start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testComments(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.comments || []).forEach(block => {\r\n\t\t\tif (!runtime.openComment) {\r\n\t\t\t\tvar starting = _first(block);\r\n\t\t\t\tif (this.$str.substr(i).startsWith(starting)) {\r\n\t\t\t\t\truntime.openComment = block;\r\n\t\t\t\t\tresult.starting = starting;\r\n\t\t\t\t}\r\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\r\n\t\t\t\tvar ending = _last(block);\r\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\r\n\t\t\t\t\truntime.openComment = false;\r\n\t\t\t\t\tresult.ending = ending;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testNesting(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.blocks || []).forEach(block => {\r\n\t\t\tvar starting = _first(block);\r\n\t\t\tif (this.$str.substr(i).startsWith(starting)) {\r\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\r\n\t\t\t\tresult.starting = starting;\r\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\r\n\t\t\t\tvar ending = _last(block);\r\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\r\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\r\n\t\t\t\t\tresult.ending = ending;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\r\n\t *\r\n\t * @param array\t\ttestList\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t_testChars(testList, runtime, i) {\r\n\t\tfor (var k = 0; k < testList.length; k ++) {\r\n\t\t\tvar test = testList[k];\r\n\t\t\tif (_isFunction(test)) {\r\n\t\t\t\tvar ret = test(this.$str.substr(0, i), this.$str.substr(i));\r\n\t\t\t\tif (ret !== false) {\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (runtime.options.useRegex) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + test, runtime.options.useRegex !== true ? runtime.options.useRegex : ''));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\treturn m[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((!runtime.options.ci && this.$str.substr(i, test.length) === test)\r\n\t\t\t|| (runtime.options.ci && this.$str.substr(i, test.length).toLowerCase() === test.toLowerCase())) {\r\n\t\t\t\treturn test;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Expr helper: pushes a character or set of characters into the current split series.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param string\tchars\r\n\t * @param string\ttarget\r\n\t * @param bool\t\tisNewSeries\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_push(runtime, chars, target = 'tokens', isNewSeries = false) {\r\n\t\tvar splitSeries = runtime.matches.length;\r\n\t\tif (_isUndefined(runtime.tokens[splitSeries])) {\r\n\t\t\truntime.tokens[splitSeries] = '';\r\n\t\t}\r\n\r\n\t\tif (target === 'comments') {\r\n\t\t\tif (!runtime.tokens[splitSeries].comments) {\r\n\t\t\t\truntime.tokens[splitSeries] = new String(runtime.tokens[splitSeries]);\r\n\t\t\t\truntime.tokens[splitSeries].comments = [];\r\n\t\t\t}\r\n\t\t\tvar splitSeries2 = runtime.tokens[splitSeries].comments.length - (!runtime.tokens[splitSeries].comments.length || isNewSeries ? 0 : 1);\r\n\t\t\truntime.tokens[splitSeries].comments[splitSeries2] = (runtime.tokens[splitSeries].comments[splitSeries2] || '') + chars;\r\n\t\t} else {\r\n\t\t\tvar comments = runtime.tokens[splitSeries].comments;\r\n\t\t\truntime.tokens[splitSeries] = runtime.tokens[splitSeries] + chars;\r\n\t\t\t//runtime.tokens[splitSeries].comments = comments;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tsplit(str, delims, options) {\r\n\t\treturn this.lex(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tmatch(str, delims, options) {\r\n\t\treturn this.lex(delims, options).matches;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses the instance string on the given delimeters using regex.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tregParse(delims, options) {\r\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregSplit(delims, options) {\r\n\t\treturn this.regParse(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregMatch(delims, options) {\r\n\t\treturn this.regParse(delims, options).matches;\r\n\t}\r\n};\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$blocks = [['(', ')'], ['[', ']'], ['{', '}'],];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$quotes = ['\"', \"'\", '`',];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$comments = [['/*', '*/'], ['//', \"\\n\"],];\r\n\r\n/**\r\n * @var object\r\n */\r\nLexer.$cache = {};","\r\n/**\r\n * @imports\r\n */\r\nimport Jsen from '@web-native-js/jsen';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Mql (base) class\r\n *\r\n * TODO:\r\n *\t\tSELECT *\r\n *\t\tSELECT ... FROM (SELECT ...)\r\n *\t\tPREPARED STATEMENTS PLACEHOLDERS\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Rql extends Jsen {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, Parsers, params = {}) {\r\n\t\tif (!('mutates' in params)) {\r\n\t\t\tparams.mutates = true;\r\n\t\t}\r\n\t\tif (!params.placeholdersTransformed && expr.indexOf('?') > 0) {\r\n\t\t\texpr = Lexer.split(expr, ['?'], {blocks:[]}).reduce((expr, t, i) => expr ? expr + '?' + (i - 1) + t : t, null);\r\n\t\t\tparams.placeholdersTransformed = true;\r\n\t\t\tconsole.log('===============', expr);\r\n\t\t}\r\n\t\tif (!params.opts) {\r\n\t\t\tparams.opts = {};\r\n\t\t}\r\n\t\tif (!('ci' in params.opts)) {\r\n\t\t\tparams.opts.ci = true;\r\n\t\t}\r\n\t\tparams.allowCache = false;\r\n\t\treturn super.parse(expr, Parsers, params);\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport { ExprInterface } from '@web-native-js/jsen';\r\n\r\n/**\r\n * ---------------------------\r\n * ExprInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class extends ExprInterface {};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAssertion as _Assertion\r\n} from '@web-native-js/jsen';\r\n\r\n/**\r\n * @extends\r\n */\r\nexport default class Assertion extends _Assertion {};\r\n\r\n/**\r\n * @var string\r\n */\r\nAssertion.negation = 'NOT ';\r\n\r\n/**\r\n * @prop array\r\n */\r\nAssertion.operators = {\r\n\tand: ' and ',\r\n\tor: ' or ',\r\n\tAND: ' AND ',\r\n\tOR: ' OR ',\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tComparison as _Comparison\r\n} from '@web-native-js/jsen';\r\n\r\n\r\n/**\r\n * @extends\r\n */\r\nexport default class Comparison extends _Comparison {};\r\n\r\n/**\r\n * @prop array\r\n */\r\nComparison.operators = {\r\n\trelative: {\r\n\t\tlesserThan: '<',\r\n\t\tgreaterThan: '>',\r\n\t\tlesserThanOrEqualsTo: '<=',\r\n\t\tgreaterThanOrEqualsTo: '>=',\r\n\t},\r\n\tpartial: {\r\n\t\tany: 'any',\r\n\t\tin: 'in',\r\n\t\tlike: 'like',\r\n\t},\r\n\texact: {\r\n\t\tnotEqualsTo: '<>',\r\n\t\t// must be after all ocurrencies of \"=\"\r\n\t\tis: '=',\r\n\t},\r\n};","\r\n/**\r\n * Return the remainder of a string after a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   afterLast\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search, afterLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn '';\r\n\t}\r\n\treturn subject.substr(pos + search.length);\r\n};\r\n","\r\n/**\r\n * Return the part of a string before a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   beforeLast\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search, beforeLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn subject;\r\n\t}\r\n\treturn subject.substr(0, pos);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _before from './before.js';\r\n\r\n/**\r\n * Return the part of a string before last occurence of a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search) {\r\n\treturn _before(subject, search, true);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _after from './after.js';\r\nimport _beforeLast from './beforeLast.js';\r\n\r\n/**\r\n * Returns the string without the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\n\r\n/**\r\n * --------------------------\r\n * Programmatic API for database management.\r\n * --------------------------\r\n * .getDatabases()\r\n * .createDatabase()\r\n * .hasDatabase()\r\n * .dropDatabase()\r\n * .getTables()\r\n * .createTable()\r\n * .hasTable()\r\n * .dropTable()\r\n * .seedTable()\r\n * .emptyTable()\r\n */\r\nexport default class Schema {\r\n\r\n    /**\r\n     * ---------\r\n     * APP\r\n     * ---------\r\n     */\r\n\r\n    /**\r\n     * Returns a list of database definitions.\r\n     * \r\n     * @return Array\r\n     */\r\n    static async getDatabases() {\r\n        if (this._getDatabases) {\r\n            return await this._getDatabases();\r\n        }\r\n        return Object.keys(this.databases).map(d => { return {name: d, version: 0}; });\r\n    }\r\n\r\n    /**\r\n     * ---------\r\n     * DATABASE\r\n     * ---------\r\n     */\r\n\r\n    /**\r\n     * Drops a database.\r\n     * \r\n     * @param String databaseName\r\n     * @param Array  tables\r\n     * @param Bool  replace\r\n     * \r\n     * @return Bool\r\n     */\r\n    static async createDatabase(databaseName = 'default', tables = [], replace = false) {\r\n        var currentDatabases = await this.getDatabases();\r\n        var existingVersions = _arrFrom(currentDatabases).filter(d => d.name === databaseName).map(d => d.version);\r\n        if (existingVersions.length) {\r\n            if (!replace) {\r\n                throw new Error('Database \"' + databaseName + '\" already exists at versions: ' + existingVersions.join(',') + '!');\r\n            }\r\n            await this.dropDatabase(databaseName);\r\n        }\r\n        var _return;\r\n        if (this._createDatabase) {\r\n            _return = await this._createDatabase(databaseName, tables, replace);\r\n        this.databases[databaseName] = {};\r\n        } else {\r\n            this.databases[databaseName] = {};\r\n        }\r\n        // ------------------\r\n        this.schemas[databaseName] = {};\r\n        if ((tables || []).length) {\r\n            databaseCreateTables(this.schemas[databaseName], tables || []);\r\n            tables.forEach(table => {\r\n                this.databases[databaseName][table.name] = [];\r\n            });\r\n        }\r\n        // ------------------\r\n        if (!_return) {\r\n            _return = {\r\n                name: databaseName,\r\n                schema: this.schemas[databaseName],\r\n                content: this.databases[databaseName],\r\n            };\r\n        }\r\n        return _return;\r\n    }\r\n\r\n    /**\r\n     * Has a database?\r\n     * \r\n     * @param String databaseName\r\n     * \r\n     * @return Bool\r\n     */\r\n    static async hasDatabase(databaseName = 'default') {\r\n        var databases = await this.getDatabases();\r\n        return databases.filter(database => database.name === databaseName).length > 0;\r\n    }\r\n\r\n    /**\r\n     * Drops a database.\r\n     * \r\n     * @param String databaseName\r\n     * \r\n     * @return Bool\r\n     */\r\n    static dropDatabase(databaseName = 'default') {\r\n        return new Promise(async resolve => {\r\n            if (!(await this.hasDatabase(databaseName))) {\r\n                throw new Error('Database \"' + databaseName + '\" has not been defined.');\r\n            }\r\n            var _return;\r\n            if (this._dropDatabase) {\r\n                _return = await this._dropDatabase(databaseName);\r\n            } else {\r\n                delete this.databases[databaseName];\r\n                _return = true;\r\n            }\r\n            // ------------------\r\n            delete this.schemas[databaseName];\r\n            // ------------------\r\n            resolve(_return);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns table names.\r\n     * \r\n     * @param String qualifiedDatabaseName\r\n     * \r\n     * @return Array\r\n     */\r\n    static getTables(qualifiedDatabaseName = 'default') {\r\n        return new Promise(resolve => {\r\n            openDatabase(qualifiedDatabaseName, (schema, database, databaseName) => {\r\n                var _return;\r\n                if (this._getTables) {\r\n                    _return = this._getTables(databaseName);\r\n                } else {\r\n                    _return = Object.keys(schema);\r\n                }\r\n                resolve(_return);\r\n            }, false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * ---------\r\n     * TABLES\r\n     * ---------\r\n     */\r\n\r\n    /**\r\n     * Adds a table definition.\r\n     * \r\n     * @param String qualifiedTableName\r\n     * @param Object tableDefinition\r\n     * \r\n     * @return Bool\r\n     */\r\n    static createTable(qualifiedTableName, tableDefinition, replace = false) {\r\n        var [ tableName, databaseName ] = qualifiedTableName.split('@');\r\n        return new Promise(resolve => {\r\n            openDatabase(databaseName, async (schema, database, databaseName) => {\r\n                if (await this.hasTable(qualifiedTableName)) {\r\n                    if (!replace) {\r\n                        throw new Error('Table \"' + tableName + '\" already exists.');\r\n                    }\r\n                    await this.dropTable(qualifiedTableName);\r\n                }\r\n                // ------------------\r\n                var _return;\r\n                if (this._createTable) {\r\n                    _return = await this._createTable(databaseName, tableName, tableDefinition, replace);\r\n                } else {\r\n                    database[tableName] = [];\r\n                }\r\n                // ------------------\r\n                databaseCreateTables(schema, [tableDefinition], replace);\r\n                // ------------------\r\n                if (!_return) {\r\n                    _return = {\r\n                        name: tableName,\r\n                        schema: schema[tableName],\r\n                        content: database[tableName],\r\n                    };\r\n                }\r\n                resolve(_return);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Has a table?\r\n     * \r\n     * @param String qualifiedTableName\r\n     * \r\n     * @return Bool\r\n     */\r\n    static async hasTable(qualifiedTableName) {\r\n        var [ tableName, databaseName ] = qualifiedTableName.split('@');\r\n        var tables = await this.getTables(databaseName);\r\n        return tables.includes(tableName);\r\n    }\r\n\r\n    /**\r\n     * Deletes a table definition.\r\n     * \r\n     * @param String qualifiedTableName\r\n     * \r\n     * @return Bool\r\n     */\r\n    static dropTable(qualifiedTableName) {\r\n        var [ tableName, databaseName ] = qualifiedTableName.split('@');\r\n        return new Promise(resolve => {\r\n            openDatabase(databaseName, async (schema, database, databaseName) => {\r\n                if (!(await this.hasTable(qualifiedTableName))) {\r\n                    throw new Error('Table \"' + tableName + '\" has not been defined.');\r\n                }\r\n                var _return;\r\n                if (this._dropTable) {\r\n                    _return = await this._dropTable(databaseName, tableName);\r\n                } else {\r\n                    delete database[tableName];\r\n                    _return = true;\r\n                }\r\n                // ------------------\r\n                delete schema[tableName];\r\n                // ------------------\r\n                resolve(_return);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * ---------\r\n     * STORAGE\r\n     * ---------\r\n     */\r\n\r\n    /**\r\n     * Empties a table.\r\n     * \r\n     * @param String qualifiedTableName\r\n     * @param Array entries\r\n     * @param Bool update\r\n     * \r\n     * @return Bool\r\n     */\r\n    static seedTable(qualifiedTableName, entries, update = false) {\r\n        return new Promise(resolve => {\r\n            openObjectStore(qualifiedTableName, (schema, table, tableName, databaseName) => {\r\n                var _return;\r\n                if (this._seedTable) {\r\n                    _return = this._seedTable(databaseName, tableName, entries, update);\r\n                } else {\r\n                    table.push(...entries);\r\n                    _return = table;\r\n                }\r\n                resolve(_return);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Empties a table.\r\n     * \r\n     * @param String qualifiedTableName\r\n     * \r\n     * @return Bool\r\n     */\r\n    static emptyTable(qualifiedTableName) {\r\n        return new Promise(resolve => {\r\n            openObjectStore(qualifiedTableName, (schema, table, tableName, databaseName) => {\r\n                var _return;\r\n                if (this._emptyTable) {\r\n                    _return = this._emptyTable(databaseName, tableName);\r\n                } else {\r\n                    table.splice(0);\r\n                    _return = table;\r\n                }\r\n                resolve(_return);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * ---------\r\n * DEFINITIONS\r\n * ---------\r\n */\r\n\r\n/**\r\n * Databases definitions.\r\n * \r\n * @var Object\r\n */\r\nSchema.schemas = {};\r\n\r\n/**\r\n * Databases storage.\r\n * \r\n * @var Object\r\n */\r\nSchema.databases = {};\r\n\r\n/**\r\n * ---------\r\n * HELPERS\r\n * ---------\r\n */\r\n\r\n/**\r\n * Helps open a database.\r\n * \r\n * @param String qualifiedDatabaseName \r\n * @param Function callback \r\n * @param Bool createIfNotExists \r\n * \r\n * @return void\r\n */\r\nconst openDatabase = (qualifiedDatabaseName, callback, createIfNotExists = true) => {\r\n    var databaseName = qualifiedDatabaseName || 'default';\r\n    if (!Schema.schemas[databaseName]) {\r\n        if (!createIfNotExists) {\r\n            throw new Error('Database \"' + databaseName + '\" has not been defined.');\r\n        }\r\n        Schema.schemas[databaseName] = {};\r\n        Schema.databases[databaseName] = {};\r\n    }\r\n    callback(Schema.schemas[databaseName], Schema.databases[databaseName], databaseName);\r\n};\r\n\r\n/**\r\n * Helps open an Object Store\r\n * \r\n * @param String qualifiedTableName \r\n * @param Function callback \r\n * \r\n * @return void\r\n */\r\nconst openObjectStore = (qualifiedTableName, callback) => {\r\n    var [ tableName, databaseName ] = qualifiedTableName.split('@');\r\n    openDatabase(databaseName, (schema, database, databaseName) => {\r\n        if (!database[tableName]) {\r\n            throw new Error('Table \"' + tableName + '\" has not been defined.');\r\n        }\r\n        callback(schema[tableName], database[tableName], tableName, databaseName);\r\n    });\r\n};\r\n\r\n/**\r\n * Helps validate a Table schema definition.\r\n * \r\n * @param Object table \r\n * \r\n * @return void\r\n */\r\nconst validateTableSchema = (table) => {\r\n    if (!_isObject(table)) {\r\n        throw new Error('Table definition must be an object.');\r\n    }\r\n    if (!table.name) {\r\n        throw new Error('Table must have a name.');\r\n    }\r\n    if (!_isObject(table.fields)) {\r\n        throw new Error('Table must have a valid \"fields\" list.');\r\n    }\r\n    _each(table.fields, (fieldName, field) => {\r\n        if (!_isObject(field)) {\r\n            throw new Error('Invalid field definition: \"' + fieldName + '\" at \"' + table.name + '\".');\r\n        }\r\n        if (field.referencedEntity\r\n            && !(_isObject(field.referencedEntity) && field.referencedEntity.name)) {\r\n            throw new Error('Invalid foreign key definition: \"' + fieldName + '\" at \"' + table.name + '\".');\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Helps create Object Stores\r\n * \r\n * @param IDBDatabase database \r\n * @param Array tables \r\n * @param Bool replace\r\n * \r\n * @return void\r\n */\r\nconst databaseCreateTables = (schema, tables, replace) => {\r\n    return tables.map(table => {\r\n        validateTableSchema(table);\r\n        if (schema[table.name]) {\r\n            if (!replace) {\r\n                throw new Error('Store name \"' + table.name + '\" already exists!');\r\n            }\r\n        }\r\n        schema[table.name] = table;\r\n    });\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport Schema from './Base/Schema.js';\r\nimport _before from '@onephrase/util/str/before.js';\r\nimport _after from '@onephrase/util/str/after.js';\r\nimport _isString from '@onephrase/util/js/isString.js';\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\n\r\nexport default class ArrowReference {\r\n\t\r\n\t/**\r\n\t * Tells if a column is a reference.\r\n\t *\r\n\t * @param {String} str\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic isReference(str) {\r\n\t\treturn str.indexOf(this.arrLeft) > -1 || str.indexOf(this.arrRight) > -1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tells if a path is an outgoing reference in direction.\r\n\t *\r\n\t * @param {String} reference\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic isOutgoing(reference) {\r\n\t\treturn reference.indexOf(this.arrRight) > -1 && _before(reference, this.arrRight).indexOf(this.arrLeft) === -1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tells if a path is an incoming reference in direction.\r\n\t *\r\n\t * @param {String} reference\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic isIncoming(reference) {\r\n\t\treturn reference.indexOf(this.arrLeft) > -1 && _before(reference, this.arrLeft).indexOf(this.arrRight) === -1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the relationshipPath in reverse direction.\r\n\t *\r\n\t * @param {String} reference\r\n\t *\r\n\t * @return string\r\n\t */\r\n\tstatic reverse(reference) {\r\n\t\treturn reference.replace(new RegExp(this.arrRight, 'g'), '|' + this.arrRight + '|').replace(new RegExp(this.arrLeft, 'g'), '|' + this.arrLeft + '|')\r\n\t\t\t.split('|').map(str => str === this.arrRight ? this.arrLeft : (str === this.arrLeft ? this.arrRight : str)).reverse().join('');\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the immediate target in a reference path.\r\n\t * \r\n\t * @param {String} databaseName \r\n\t * @param {Object} baseSchema\r\n\t * @param {String} reference \r\n\t * \r\n\t * @return {Object}\r\n\t */\r\n    static eval(databaseName, baseSchema, reference) {\r\n\t\tvar SCHEMAS = Schema.schemas[databaseName], table1, table2;\r\n\t\tif (this.isIncoming(reference)) {\r\n\t\t\t// reference === actingKey<-...\r\n\t\t\tvar actingKey = _before(reference, this.arrLeft),\r\n\t\t\t\tsourceTable = _after(reference, this.arrLeft);\r\n\t\t\tif (this.isIncoming(sourceTable)) {\r\n\t\t\t\t// reference === actingKey<-actingKey2<-table->?...\r\n\t\t\t\ttable2 = this.eval(databaseName, '', sourceTable).a.table;\r\n\t\t\t\tvar select = sourceTable;\r\n\t\t\t} else {\r\n\t\t\t\t// reference === actingKey<-table->?...\r\n\t\t\t\tvar _sourceTable = _before(sourceTable, this.arrRight)\r\n\t\t\t\t\tselect = _after(sourceTable, this.arrRight);\r\n\t\t\t\tif (!(table2 = SCHEMAS[_sourceTable])) {\r\n\t\t\t\t\tthrow new Error('[' + reference + ']: The implied table \"' + _sourceTable + '\" is not defined.');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!baseSchema) {\r\n\t\t\t\t// --------------------------\r\n\t\t\t\t// Now get table1 from table2\r\n\t\t\t\t// --------------------------\r\n\t\t\t\tif (!table2.fields[actingKey] || !(table1 = table2.fields[actingKey].referencedEntity)) {\r\n\t\t\t\t\tthrow new Error('[' + reference + ']: The \"' + table2.name + '\" table does not define the implied foreign key \"' + actingKey + '\".');\r\n\t\t\t\t}\r\n\t\t\t\ttable1 = SCHEMAS[table1.name];\r\n\t\t\t} else if (_isString(baseSchema)) {\r\n\t\t\t\ttable1 = SCHEMAS[baseSchema];\r\n\t\t\t} else if (_isObject(baseSchema)) {\r\n\t\t\t\ttable1 = baseSchema;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ta: {table: table1, actingKey: table1.primaryKey,},\r\n\t\t\t\tb: {table: table2, actingKey, select,},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// reference === foreignKey->...\r\n\t\tif (_isString(baseSchema)) {\r\n\t\t\ttable1 = SCHEMAS[baseSchema];\r\n\t\t} else if (_isObject(baseSchema)) {\r\n\t\t\ttable1 = baseSchema;\r\n\t\t\tbaseSchema = table1.name;\r\n\t\t}\r\n\t\t// --------------------------\r\n\t\t// Now get table2 from table1\r\n\t\t// --------------------------\r\n\t\tvar foreignKey = _before(reference, this.arrRight)\r\n\t\t\tselect = _after(reference, this.arrRight);\r\n\t\tif (!table1.fields[foreignKey] || !(table2 = table1.fields[foreignKey].referencedEntity)) {\r\n\t\t\tthrow new Error('[' + baseSchema + this.arrRight + reference + ']: The \"' + baseSchema + '\" table does not define the implied foreign key \"' + foreignKey + '\".');\r\n\t\t}\r\n\t\ttable2 = SCHEMAS[table2.name];\r\n\t\treturn {\r\n\t\t\ta: {table: table1, actingKey: foreignKey,},\r\n\t\t\tb: {table: table2, actingKey: table2.primaryKey, select,},\r\n\t\t};\r\n\t}\r\n};\r\n\r\n/**\r\n * @var string\r\n */\r\nArrowReference.arrRight = '~>';\r\nArrowReference.arrLeft = '<~';","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tScope,\r\n\tReference as _Reference,\r\n\tExprInterface,\r\n} from '@web-native-js/jsen';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport _isString from '@onephrase/util/js/isString.js';\r\nimport _isEmpty from '@onephrase/util/js/isEmpty.js';\r\nimport _isUndefined from '@onephrase/util/js/isUndefined.js';\r\nimport _remove from '@onephrase/util/arr/remove.js';\r\nimport ArrowReference from '../ArrowReference.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\nexport default class Reference extends _Reference {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(context, name, backticks = false) {\r\n\t\tvar isArrowReference = _isString(name) && ArrowReference.isReference(name);\r\n\t\tif (isArrowReference && !backticks) {\r\n\t\t\tbackticks = true;\r\n\t\t}\r\n\t\tsuper(context, name, backticks);\r\n\t\tthis.isArrowReference = isArrowReference;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetEval(tempRow, params = {}) {\r\n\t\t// Lets find the table that contains the column\r\n\t\tvar sourceContext = tempRow, name = this.name;\r\n\t\tif (!this.isContext && !this.isTableName) {\r\n\t\t\tvar contexts = Reference.findContexts(tempRow, this.name);\r\n\t\t\tif (this.isFieldName) {\r\n\t\t\t\t_remove(contexts, '$');\r\n\t\t\t}\r\n\t\t\tif (!contexts.length) {\r\n\t\t\t\t//throw new Error('\"' + this.stringify() + '\" is unknown!');\r\n\t\t\t}\r\n\t\t\tif (this.arrowContext) {\r\n\t\t\t\tsourceContext = tempRow[this.arrowContext];\r\n\t\t\t} else if (!this.context) {\r\n\t\t\t\tif (contexts.indexOf('$') === -1 && contexts.length > 1) {\r\n\t\t\t\t\tthrow new Error('\"' + this.name + '\" is ambiguous!');\r\n\t\t\t\t}\r\n\t\t\t\tif (contexts.length) {\r\n\t\t\t\t\tvar context = contexts.reduce((_c, c) => _c === '$' ? _c : c, '');\r\n\t\t\t\t\tsourceContext = tempRow[context];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\t\tname = name.eval(tempRow, params);\r\n\t\t\t\t}\r\n\t\t\t\tsourceContext = this.context.eval(tempRow, params);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tget() {\r\n\t\t\t\treturn Scope.create(sourceContext).get(name, params.trap);\r\n\t\t\t},\r\n\t\t\tdel() {\r\n\t\t\t\treturn Scope.create(sourceContext).del(name, params.trap);\r\n\t\t\t},\r\n\t\t\thas(prop) {\r\n\t\t\t\treturn Scope.create(sourceContext).has(name, prop, params.trap);\r\n\t\t\t},\r\n\t\t\tset(val, initKeyword = null) {\r\n\t\t\t\treturn Scope.create(sourceContext).set(name, val, params.trap, initKeyword);\r\n\t\t\t},\r\n\t\t\texec(args) {\r\n\t\t\t\treturn Scope.create(sourceContext).exec(name.toUpperCase(), args, params.trap);\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow, params = {}) {\r\n\t\tvar val = super.eval(tempRow, params);\r\n\t\t// Table unknown?\r\n\t\tif (this.isContext && _isUndefined(val)) {\r\n\t\t\tthrow new Error('Table \"' + this.name + '\" is unknown!');\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic findContexts(tempRow, name) {\r\n\t\tvar contexts = [];\r\n\t\t// We ask from schema first\r\n\t\tObject.keys(tempRow).forEach(tableName => {\r\n\t\t\tif (tempRow[tableName] && name in tempRow[tableName]) {\r\n\t\t\t\tcontexts.push(tableName);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn contexts;\r\n\t}\r\n};\r\n","\r\n/**\r\n * Removes instances of reference up to <limit> times.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \titm\r\n * @param int|bool \tlimit\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, itm, limit = false) {\r\n\tvar i = arr.indexOf(itm);\r\n\twhile (i > -1 && (limit || limit === false)) {\r\n\t\tarr.splice(i, 1);\r\n\t\tif (limit > 0) {\r\n\t\t\tlimit --;\r\n\t\t};\r\n\t\ti = arr.indexOf(itm);\r\n\t};\r\n\treturn arr;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from './isArray.js';\r\nimport _isFunction from './isFunction.js';\r\nimport _arrLast from '../arr/last.js';\r\nimport _mergeCallback from '../obj/mergeCallback.js';\r\nimport _each from '../obj/each.js';\r\n\r\n/**\r\n * A multi-inheritance implementstion.\r\n *\r\n * @param array\t \t...classes\r\n *\r\n * @return object\r\n */\r\nexport default function(...classes) {\r\n\t\r\n\tvar Traps = {};\r\n\tvar RetrnDirective = 'last';\r\n\tif (_isArray(arguments[0])) {\r\n\t\tclasses = arguments[0];\r\n\t\tTraps = arguments[1];\r\n\t\tif (arguments[2]) {\r\n\t\t\tRetrnDirective = arguments[2];\r\n\t\t}\r\n\t}\r\n\tvar Base = _arrLast(classes);\r\n\tvar supersMap = {};\r\n\tvar Mixin = class extends Base {\r\n\t\tconstructor(...args) {\r\n\t\t\tsuper(...args);\r\n\t\t}\r\n\t};\r\n\t// A trap for _instanceof()\r\n\tMixin.prototypes = classes;\r\n\t// ---------------------\r\n\t// Extend (merge) properties but keep methods\r\n\tclasses.forEach(_class => {\r\n\t\t// Copy const members\r\n\t\t_mergeCallback([Mixin, _class], (key, obj1, obj2) => !['name', 'prototype', 'prototypes', 'length'].includes(key));\r\n\t\t_mergeCallback([Mixin.prototype, _class.prototype], (key, obj1, obj2) => {\r\n\t\t\tif (!['prototype', 'prototypes'].includes(key)) {\r\n\t\t\t\tif (_isFunction(obj2[key])) {\r\n\t\t\t\t\tif (_isArray(supersMap[key])) {\r\n\t\t\t\t\t\tsupersMap[key].push(obj2[key]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsupersMap[key] = [obj2[key]];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}, true/*deepProps*/);\r\n\t});\r\n\t// Extend (proxy) methods\r\n\t_each(supersMap, (name, supers) => {\r\n\t\tif (name === 'constructor') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// NOTE: this must not be defined as an arrow function\r\n\t\t// for the benefit of the \"this\".\r\n\t\tMixin.prototype[name] = function(...args) {\r\n\t\t\tif (Object.hasOwnProperty(Traps, name) && _isFunction(Traps[name])) {\r\n\t\t\t\t// Wrap a call to the trap...\r\n\t\t\t\t// So mixin supers are passed to traps\r\n\t\t\t\treturn Traps[name].call(this, supers, ...args);\r\n\t\t\t} else {\r\n\t\t\t\t// Call each super and return\r\n\t\t\t\t// the last one's return value\r\n\t\t\t\tvar supersReturnValues = [];\r\n\t\t\t\tsupers.forEach(supr => {\r\n\t\t\t\t\tsupersReturnValues.push(supr.call(this, ...args));\r\n\t\t\t\t})\r\n\t\t\t\treturn _arrLast(supersReturnValues);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\treturn Mixin;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _arrFrom from '../arr/from.js';\r\n\r\n/**\r\n * Finds a value in an array/object and returns the key (or path when found deep).\r\n *\r\n * @param array}object \tobj\r\n * @param function\t\tcallback\r\n * @param bool\t\t\tdeep\r\n *\r\n * @return number|string|array\r\n */\r\nconst _find = function(obj, callback, deep = false) {\r\n\tvar keys = null;\r\n\tvar values = obj;\r\n\tif (!_isArray(obj)) {\r\n\t\tkeys = Object.keys(obj);\r\n\t\tvalues = Object.values(obj);\r\n\t}\r\n\tvar subKey = undefined;\r\n\tvar value = values.reduce((prev, curr) => {\r\n\t\tif (subKey === undefined) {\r\n\t\t\tif (callback(curr, prev)) {\r\n\t\t\t\treturn curr;\r\n\t\t\t}\r\n\t\t\tif (deep && (_isTypeObject(curr) || _isFunction(curr)) && (subKey = _find(curr, callback, deep)) !== undefined) {\r\n\t\t\t\treturn curr;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn prev;\r\n\t}, undefined);\r\n\tif (value !== undefined) {\r\n\t\tvar key = keys ? keys[values.indexOf(value)] : values.indexOf(value);\r\n\t\treturn subKey !== undefined ? [key].concat(_arrFrom(subKey)) : key;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _find;","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AggrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AggregateExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects into first array/object but only when not set;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(...objs) {\r\n\treturn _mergeCallback(objs, (key, obj1, obj2) => {\r\n\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\tif (obj1.indexOf(obj2[key]) === -1) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if (!(key in obj1)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n};\r\n","\r\n/**\r\n * Tells if the string is warapped with the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return bool\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * WindowInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'WindowConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * OrderByInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'OrderByExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _sort from '@onephrase/util/arr/sort.js';\r\nimport _before from '@onephrase/util/str/before.js';\r\nimport _beforeLast from '@onephrase/util/str/beforeLast.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport OrderByInterface from './OrderByInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * OrderBy class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class OrderBy extends OrderByInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(columns, withRollup = false) {\r\n\t\tsuper();\r\n\t\tthis.columns = columns;\r\n\t\tthis.withRollup = withRollup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows, params = {}) {\r\n\t\tvar order = (rows, by) => {\r\n\t\t\t// Drilldown...\r\n\t\t\tvar grouping = {};\r\n\t\t\trows.forEach(row => {\r\n\t\t\t\tvar _for = by[0].expr.eval(row, params);\r\n\t\t\t\tgrouping[_for] = grouping[_for] || [];\r\n\t\t\t\tgrouping[_for].push(row);\r\n\t\t\t});\r\n\t\t\t// Get esults flattened\r\n\t\t\tvar result = [];\r\n\t\t\t_sort(Object.keys(grouping), by[0].order).forEach(_for => {\r\n\t\t\t\tresult = result.concat(by.length > 1 ? order(grouping[_for], by.slice(1)) : grouping[_for]);\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\ttry {\r\n\t\t\tvar ordering = order(tempRows, this.columns);\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.stringify() + '\" in order by clause]: ' + e.message);\r\n\t\t}\r\n\t\treturn ordering;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar str = [this.columns.map(\r\n\t\t\tc => c.expr.stringify(params) + (c.order ? ' ' + c.order : '')\r\n\t\t).join(', ')];\r\n\t\tif (this.withRollup) {\r\n\t\t\tstr.push('WITH ROLLUP');\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar columns = [];\r\n\t\tvar withRollup = false;\r\n\t\tvar parse = Lexer.lex(expr, ['WITH[ ]+ROLLUP'], {useRegex:'i'});\r\n\t\tcolumns = Lexer.split(parse.tokens.shift().trim(), [',']).map(c => {\r\n\t\t\tvar order = c.match(/ASC|DESC/, 'i');\r\n\t\t\tif (order) {\r\n\t\t\t\torder = order[0];\r\n\t\t\t\tc = _beforeLast(c, order).trim();\r\n\t\t\t}\r\n\t\t\treturn {expr:parseCallback(c), order:order};\r\n\t\t});\r\n\t\tif (parse.matches.length === 1) {\r\n\t\t\twithRollup = true;\r\n\t\t}\r\n\t\treturn new this(columns, withRollup);\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from '../js/isString.js';\r\n\r\n/**\r\n * Sorts a list performantly.\r\n *\r\n * @param array\t \t\t\t\t\tarr\r\n * @param string\t \t\t\t\torder\t\t\tASC|DESC \r\n * @param function\t\t\t\t\tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, order, callback = null) {\r\n\tvar _arr = [];\r\n\t// Make a shallow copy\r\n\tvar length = arr.length;\r\n\tfor (var i = 0; i < length; i ++) {\r\n\t\t_arr.push({index: i, value: callback ? callback(arr[i]) : arr[i]});\r\n\t};\r\n\t_arr.sort(function(a, b) {\r\n\t\t// Using localeCompare if possible\r\n\t\tif (_isString(a.value) && \"\".localeCompare) {\r\n\t\t\treturn a.value.localeCompare(b.value);\r\n\t\t};\r\n\t\treturn a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\r\n\t});\r\n\tif ((order || '').trim().toLowerCase() === 'desc') {\r\n\t\t_arr = _arr.reverse();\r\n\t};\r\n\t// Fill the order with actual values\r\n\treturn _arr.map(itm => arr[itm.index]);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _inherit from '@onephrase/util/obj/inherit.js';\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport WindowInterface from './WindowInterface.js';\r\nimport OrderBy from './OrderBy.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Window class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Window extends WindowInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(dfn) {\r\n\t\tsuper();\r\n\t\tthis.dfn = dfn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows, definitions = {}, params = {}) {\r\n\t\tvar dfn = this.dfn;\r\n\t\tvar uuid = this.stringify();\r\n\t\tif (this.dfn.name) {\r\n\t\t\tif (!definitions || !definitions[this.dfn.name]) {\r\n\t\t\t\tthrow new Error('Window name \"' + this.dfn.name + '\" is undefined!');\r\n\t\t\t}\r\n\t\t\tdfn = _inherit({}, this.dfn, definitions[this.dfn.name]);\r\n\t\t}\r\n\t\tvar exec = (rows, partitionBy) => {\r\n\t\t\tif (partitionBy.length) {\r\n\t\t\t\t// Drilldown...\r\n\t\t\t\tvar partitioning = {};\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\tvar _for = partitionBy[0].eval(row, params);\r\n\t\t\t\t\tpartitioning[_for] = partitioning[_for] || [];\r\n\t\t\t\t\tpartitioning[_for].push(row);\r\n\t\t\t\t});\r\n\t\t\t\tObject.values(partitioning).map(partition => exec(partition, partitionBy.slice(1)));\r\n\t\t\t} else {\r\n\t\t\t\tif (dfn.orderBy) {\r\n\t\t\t\t\trows = dfn.orderBy.eval(rows, params);\r\n\t\t\t\t}\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\tif (!row.WINDOWS) {\r\n\t\t\t\t\t\trow.WINDOWS = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\trow.WINDOWS[uuid] = rows;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\ttry {\r\n\t\t\texec(tempRows, dfn.partitionBy || []);\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.stringify() + '\" in window definition]: ' + e.message);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar length = Object.keys(this.dfn).length;\r\n\t\tif (length === 1 && this.dfn.name) {\r\n\t\t\treturn this.dfn.name;\r\n\t\t}\r\n\t\tvar str = [this.dfn.name];\r\n\t\tif (this.dfn.partitionBy) {\r\n\t\t\tstr.push('PARTITION BY ' + this.dfn.partitionBy.map(expr => expr.stringify(params)).join(', '));\r\n\t\t}\r\n\t\tif (this.dfn.orderBy) {\r\n\t\t\tstr.push('ORDER BY ' + this.dfn.orderBy.stringify(params));\r\n\t\t}\r\n\t\treturn '(' + str.filter(a => a).join(' ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar dfn = {};\r\n\t\tif (_wrapped(expr, '(', ')')) {\r\n\t\t\tif (expr = _unwrap(expr, '(', ')')) {\r\n\t\t\t\tvar parse = Lexer.lex(expr, ['PARTITION[ ]+BY', 'ORDER[ ]+BY'], {useRegex:'i'});\r\n\t\t\t\tdfn.name = parse.tokens.shift().trim();\r\n\t\t\t\tparse.matches.forEach(clauseType => {\r\n\t\t\t\t\tif (clauseType.toLowerCase().startsWith('partition')) {\r\n\t\t\t\t\t\tdfn.partitionBy = Lexer.split(parse.tokens.shift().trim(), [','])\r\n\t\t\t\t\t\t\t.map(expr => parseCallback(expr));\r\n\t\t\t\t\t} else if (clauseType.toLowerCase().startsWith('order')) {\r\n\t\t\t\t\t\tdfn.orderBy = parseCallback(parse.tokens.shift().trim(), [OrderBy]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdfn.name = expr;\r\n\t\t}\r\n\t\treturn new this(dfn);\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport { Call } from '@web-native-js/jsen';\r\nimport _mixin from '@onephrase/util/js/mixin.js';\r\nimport _flatten from '@onephrase/util/arr/flatten.js';\r\nimport _find from '@onephrase/util/obj/find.js';\r\nimport _before from '@onephrase/util/str/before.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport AggrInterface from './AggrInterface.js';\r\nimport Window from './Window.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Aggr class\r\n * ---------------------------\r\n */\t\t\t\t\r\nexport default class Aggr extends _mixin(Call, AggrInterface) {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, args) {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.args = args;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context, params = {}) {\r\n\t\tvar args = this.args.list.slice();\r\n\t\targs.unshift(this.window ? context.WINDOWS[this.window.stringify()] : context.AGGR.rows);\r\n\t\treturn this.reference.getEval(context, params).exec(args);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn super.stringify(params) + (this.window ? ' OVER ' + this.window.stringify(params) : '');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar aggrMatch = null;\r\n\t\tvar aggrMatchRegex = _flatten(this.funcs).join(\"\\\\(|\") + \"\\\\(\";\r\n\t\tif (aggrMatch = expr.trim().match(new RegExp('^(' + aggrMatchRegex + ')', 'i'))) {\r\n\t\t\tvar funcName = _before(aggrMatch[0], '(').toUpperCase();\r\n\t\t\tvar funcCategory = _find(this.funcs, val => val === funcName, true)[0];\r\n\t\t\tvar splits = Lexer.split(expr, ['OVER'], {ci:true});\r\n\t\t\tif (funcCategory === 'explicitOver' && splits.length === 1) {\r\n\t\t\t\tthrow new Error(aggrMatch[0] + '() requires an OVER clause!');\r\n\t\t\t}\r\n\t\t\tvar instance = super.parse(splits.shift().trim(), parseCallback, params);\r\n\t\t\tinstance.funcCategory = funcCategory;\r\n\t\t\tif (splits.length) {\r\n\t\t\t\tinstance.window = parseCallback(splits.pop().trim(), [Window]);\r\n\t\t\t}\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nAggr.funcs = {\r\n\tnormal: [\r\n\t\t'AVG', \r\n\t\t'BIT_AND', \r\n\t\t'BIT_OR', \r\n\t\t'BIT_XOR', \r\n\t\t'COUNT', \r\n\t\t'JSON_ARRAYAGG', \r\n\t\t'JSON_OBJECTAGG', \r\n\t\t'MAX', \r\n\t\t'MIN',\r\n\t\t'STDDEV_POP',\r\n\t\t'STDDEV',\r\n\t\t'STD',\r\n\t\t'STDDEV_SAMP',\r\n\t\t'SUM',\r\n\t\t'VAR_POP',\r\n\t\t'VARIANCE',\r\n\t\t'VAR_SAMP',\r\n\t\t// May not apply to OVER()\r\n\t\t'GROUP_CONCAT',\r\n\t\t'GROUP_CONCAT_WS',\r\n\t],\r\n\texplicitOver: [\r\n\t\t'CUME_DIST', \r\n\t\t'DENSE_RANK', \r\n\t\t'FIRST_VALUE', \r\n\t\t'LAG', \r\n\t\t'LAST_VALUE', \r\n\t\t'LEAD', \r\n\t\t'NTH_VALUE', \r\n\t\t'NTLE',\r\n\t\t'PERCENT_RANK',\r\n\t\t'RANK',\r\n\t\t'ROW_NUMBER',\r\n\t],\r\n\tsupport: [\r\n\t\t'ANY_VALUE', \r\n\t\t'COLUMN', \r\n\t\t'COLUMNS', \r\n\t\t'GROUPING', \r\n\t],\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DeleteInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'DeleteStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * Returns a list of unique items.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n *\t *\r\n * @return array\r\n */\r\nexport default function(arr) {\r\n\tconst distinct = (value, index, self) => {\r\n\t\treturn self.indexOf(value) === index;\r\n\t};\r\n\treturn arr.filter(distinct);\r\n};\r\n","\r\n/**\r\n * Creats a promise instance with the adbantage\r\n * of being an awaitable function call.\r\n *\r\n * @param function\t handler\r\n *\r\n * @return Promise\r\n */\r\nexport default function(handler) {\r\n\treturn new Promise(handler);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isString from '../js/isString.js';\r\n\r\n/**\r\n * Return an object for the given pair(s) of input.\r\n *\r\n * @param string|array \t\t\tkey\r\n * @param mixed|array\t\t\tval \r\n *\r\n * @return object\r\n */\r\nexport default function(key, val = null) {\r\n\tvar obj = {};\r\n\tif (arguments.length === 2) {\r\n\t\tif (_isArray(key) && _isArray(val)) {\r\n\t\t\tkey.forEach((k, i) => obj[k] = val[i]);\r\n\t\t} else {\r\n\t\t\tobj[key] = val;\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n * Copies an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tfilter\r\n *\r\n * @return object\r\n */\r\nexport default function(obj, filter = [], withSymbols = true) {\r\n\tvar depth = 0;\r\n\tif (_isNumeric(arguments[0]) && _isTypeObject(arguments[1])) {\r\n\t\tdepth = arguments[0];\r\n\t\tobj = arguments[1];\r\n\t\tfilter = arguments[2] || [];\r\n\t}\r\n\treturn _mergeCallback([depth, {}, obj], (key, obj1, obj2) => {\r\n\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t}, false/*deepProps*/, false/*isReplace*/, withSymbols);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * SelectInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'SelectStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * UnionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'UnionConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n\r\n/**\r\n * ---------------------------\r\n * Cursor class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Cursor {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(rows) {\r\n\t\tthis._rows = rows;\r\n\t\tthis.key = 0;\r\n\t\tthis.flags = {};\r\n\t\tthis._onfinish = [];\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\tif (!this._rows.length || this.key === this._rows.length - 1) {\r\n\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\tthis.key = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n        this.key ++;\r\n\t}\r\n\t\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teof() {\r\n\t\treturn !this._rows.length || this.key === this._rows.length - 1;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync fetch() {\r\n\t\tif (this.key < this._rows.length) {\r\n\t\t\treturn this._rows[this.key];\r\n\t\t}\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _intersect from '@onephrase/util/arr/intersect.js';\r\nimport _merge from '@onephrase/util/obj/merge.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport FetchInterface from './FetchInterface.js';\r\nimport Cursor from './Cursor.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Table extends FetchInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(DB, storeName, alias, schema) {\r\n\t\tsuper();\r\n\t\tthis.DB = DB;\r\n\t\tthis.storeName = storeName;\r\n\t\tthis.alias = alias;\r\n\t\tthis.schema = schema;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync getStore() {\r\n\t\tvar DB = await this.DB;\r\n\t\treturn DB[this.storeName];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a cursor.\r\n\t * \r\n\t * @return Cursor\r\n\t */\r\n\tasync getCursor() {\r\n\t\tvar store = await this.getStore();\r\n\t\treturn new Cursor(store.filter(row => row));\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinsert(multiValues, columns = [], duplicateKeyCallback = null) {\r\n\t\treturn Promise.all(multiValues.map((values, line) => {\r\n\t\t\tif (columns.length && columns.length !== values.length) {\r\n\t\t\t\tthrow new Error('Column/values count mismatch at line ' + line + '!');\r\n\t\t\t}\r\n\t\t\tvar rowObj = {};\r\n\t\t\tif (this.schema.fields) {\r\n\t\t\t\tvar schemaColumns = Object.keys(this.schema.fields);\r\n\t\t\t\tif (columns.length) {\r\n\t\t\t\t\tvar unknownFields = columns.filter(col => schemaColumns.indexOf(col) === -1);\r\n\t\t\t\t\tif (unknownFields.length) {\r\n\t\t\t\t\t\tthrow new Error('Unknown column: ' + unknownFields[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcolumns = schemaColumns;\r\n\t\t\t\t}\r\n\t\t\t\tschemaColumns.forEach(schemaColumnName => {\r\n\t\t\t\t\t// Unspecified column? Then default value...\r\n\t\t\t\t\tvar keyColumnPosition = columns.indexOf(schemaColumnName);\r\n\t\t\t\t\tif (keyColumnPosition === -1) {\r\n\t\t\t\t\t\tif (!_intersect(_arrFrom(schemaColumnName), _arrFrom(this.schema.primaryKey)).length) {\r\n\t\t\t\t\t\t\trowObj[schemaColumnName] = this.schema.fields && _isObject(this.schema.fields[schemaColumnName]) \r\n\t\t\t\t\t\t\t\t? this.schema.fields[schemaColumnName].default \r\n\t\t\t\t\t\t\t\t: null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Specified column! Specified value!\r\n\t\t\t\t\t\trowObj[schemaColumnName] = values[keyColumnPosition];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tcolumns.forEach((columnName, i) => {\r\n\t\t\t\t\trowObj[columnName] = values[i];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn this.append(rowObj, duplicateKeyCallback);\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync append(rowObj, onduplicateCallback = null) {\r\n\t\tvar store = await this.store, uniqueConstraints = {}, successCode = 0;\r\n\t\t// -----------\r\n\t\tvar primaryKeyPath = this.schema.primaryKey,\r\n\t\t\tprimaryKeyAutoIncrement = this.schema.autoIncrement;\r\n\t\tif ((!_isArray(primaryKeyPath) || (primaryKeyPath.length === 1 && (primaryKeyPath = primaryKeyPath[0]))) && primaryKeyAutoIncrement !== false) {\r\n\t\t\trowObj[primaryKeyPath] = store.length;\r\n\t\t}\r\n\t\t// -----------\r\n\t\tif (this.schema.primaryKey) {\r\n\t\t\tuniqueConstraints['primary_key'] = primaryKeyPath;\r\n\t\t}\r\n\t\tif (this.schema.uniqueKeys) {\r\n\t\t\tuniqueConstraints = _merge(uniqueConstraints, this.schema.uniqueKeys);\r\n\t\t}\r\n\t\t// -----------\r\n\t\tif (Object.keys(uniqueConstraints).length) {\r\n\t\t\tstore.forEach(existingRow => {\r\n\t\t\t\tvar constraintViolation;\r\n\t\t\t\t_each(uniqueConstraints, (constraintName, keyPath) => {\r\n\t\t\t\t\tif (!constraintViolation && _arrFrom(keyPath).reduce((prev, columnName) => prev && rowObj[columnName] === existingRow[columnName], true)) {\r\n\t\t\t\t\t\tif (onduplicateCallback) {\r\n\t\t\t\t\t\t\tconstraintViolation = constraintName;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (constraintViolation) {\r\n\t\t\t\t\tvar _rowObj = {...rowObj};\r\n\t\t\t\t\tif (onduplicateCallback && onduplicateCallback(_rowObj)) {\r\n\t\t\t\t\t\tsuccessCode += 2;\r\n\t\t\t\t\t\t_merge(existingRow, _rowObj);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('Inserting duplicate values on unique key constraint: ' + constraintViolation);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t// -----------\r\n\t\tif (!successCode) {\r\n\t\t\tstore.push(rowObj);\r\n\t\t\tsuccessCode = 1;\r\n\t\t}\r\n\t\treturn successCode;\r\n\t}\r\n};","\r\n/**\r\n * ---------------------------\r\n * FetchInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default class {};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the intersection of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) !== -1\r\n\t);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DerivedTable class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class DerivedTable extends Table {\r\n    \t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync getStore() {\r\n\t\treturn await this.DB;\r\n\t}\r\n};","\r\n\r\n/**\r\n * ---------------------------\r\n * Cursor class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class IDBCursor {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(store) {\r\n\t\tthis._store = store;\r\n\t\tthis._rows = [];\r\n\t\tthis.key = 0;\r\n\t\tthis._onfinish = [];\r\n\t\tthis.flags = {};\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\tif (!this._eof) {\r\n\t\t\tif (!this._cursorRequest) {\r\n\t\t\t\tthrow new Error('fetch() must be called before calling next()');\r\n\t\t\t}\r\n\t\t\tthis.key ++;\r\n\t\t} else {\r\n\t\t\tif (!this._rows.length || this.key === this._rows.length - 1) {\r\n\t\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\t\tthis.key = 0;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.key ++;\r\n\t\t}\r\n\t}\r\n\t\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teof() {\r\n\t\t// The store must reach eof before we can be correct with this._rows.length\r\n\t\treturn this._eof && (!this._rows.length || this.key === this._rows.length - 1);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tfetch() {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\t// After having filled this._rows from store\r\n\t\t\tif (this._eof || this.key < this._rows.length) {\r\n\t\t\t\tresolve(this._rows[this.key]);\r\n\t\t\t} else {\r\n\t\t\t\tif (!this._countRequest) {\r\n\t\t\t\t\t// First time reading from store\r\n\t\t\t\t\tthis._countRequest = this._store.count();\r\n\t\t\t\t\tthis._countRequest.onsuccess = e => {\r\n\t\t\t\t\t\tthis._count = e.target.result;\r\n\t\t\t\t\t\tthis._cursorRequest = this._store.openCursor();\r\n\t\t\t\t\t\tthis._handleCursorFetch(resolve);\r\n\t\t\t\t\t\tthis._continueCursor = () => this._cursor.continue();\r\n\t\t\t\t\t};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._handleCursorFetch(resolve);\r\n\t\t\t\t\tthis._continueCursor();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Helps handle cursor result\r\n\t * \r\n\t * @param Function resolve\r\n\t * \r\n\t * @return void\r\n\t */\r\n\t_handleCursorFetch(resolve) {\r\n\t\tthis._cursorRequest.onsuccess = e => {\r\n\t\t\tthis._cursor = e.target.result;\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tvar value = this._cursor.value;\r\n\t\t\t\tthis._rows.push(value);\r\n\t\t\t\tif (this._rows.length === this._count) {\r\n\t\t\t\t\tthis._eof = true;\r\n\t\t\t\t}\r\n\t\t\t\tresolve(value);\r\n\t\t\t} else {\r\n\t\t\t\tthis._eof = true;\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t\tconsole.log(this._store.name, this._rows.length, this._count);\r\n\t\t}\r\n\t}\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _promise from '@onephrase/util/js/promise.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport IDBCursor from './IDBCursor.js';\r\nimport Cursor from './Cursor.js';\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class IDBTable extends Table {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(DB, storeName, alias, schema) {\r\n\t\tsuper();\r\n\t\tthis.DB = DB;\r\n\t\tthis.storeName = storeName;\r\n\t\tthis.alias = alias;\r\n\t\tthis.schema = schema;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync getStore(mode = 'readwrite') {\r\n\t\tvar DB = await this.DB;\r\n\t\tvar transaction = DB.transaction([this.storeName], mode);\r\n\t\t// We can worry not about onerror, onabort, oncomplete\r\n\t\treturn transaction.objectStore(this.storeName);\t\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a cursor.\r\n\t * \r\n\t * @return Cursor\r\n\t */\r\n\tasync getCursor(progressive = false) {\r\n\t\tvar store = await this.getStore('readonly');\r\n\t\tif (progressive) {\r\n\t\t\treturn new IDBCursor(store);\r\n\t\t}\r\n\t\tvar getAllRequest = store.getAll();\r\n\t\tvar rows = await _promise(resolve => {\r\n\t\t\tgetAllRequest.onsuccess = e => {\r\n\t\t\t\tresolve(_arrFrom(e.target.result))\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn new Cursor(rows);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync append(rowObj, onduplicateCallback = null) {\r\n\t\tvar store = await this.getStore();\r\n\t\treturn await _promise((resolve, reject) => {\r\n\t\t\tvar addRequest = store.add(rowObj);\r\n\t\t\taddRequest.onsuccess = e => resolve(e.target.result);\r\n\t\t\taddRequest.onerror = async e => {\r\n\t\t\t\tvar _rowObj = {...rowObj};\r\n\t\t\t\tif (e.target.error.name === 'ConstraintError' && onduplicateCallback && onduplicateCallback(_rowObj)) {\r\n\t\t\t\t\t// We must getStore() in another transaction\r\n\t\t\t\t\tvar store = await this.getStore();\r\n\t\t\t\t\tvar putRequest = store.put(_rowObj);\r\n\t\t\t\t\tputRequest.onsuccess = e => resolve(e.target.result);\r\n\t\t\t\t\tputRequest.onerror = e => reject(e.target.error);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject(e.target.error);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n};","\r\n/**\r\n * imports\r\n */\r\nimport Schema from '../Base/Schema.js';\r\nimport _isBoolean from '@onephrase/util/js/isBoolean.js';\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\nimport _isEmpty from '@onephrase/util/js/isEmpty.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\n\r\n/**\r\n * Requires the following tables: uac, uac_token (optional), account\r\n * Requires a USER object: {id, lineage, parent, privileges,}\r\n */\r\nexport default class Query {\r\n\t\r\n\t/**\r\n\t * Creates the UAC logic that sets the value of each field conditionally.\r\n\t *\r\n\t * @param object                    USER\r\n\t * @param string                    tableName\r\n\t * @param bool                      byRow\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tconstructor(USER, tableName, byRow) {\r\n\t\tvar tableNameSplit = tableName.split('.');\r\n\t\tvar tableName = tableNameSplit.pop(),\r\n            databaseName = tableNameSplit[0] || 'default',\r\n            SCHEMAS = Schema.schemas[databaseName];\r\n        this.USER = USER || {\r\n            id: 0,\r\n            parent: 0,\r\n            lineage: '0',\r\n            privileges: [],\r\n        };\r\n        // ---------------\r\n        // MAIN QUERY\r\n        // ---------------\r\n\t\tthis.table = SCHEMAS[tableName];\r\n        this.alias = 'MAIN';\r\n        this.select = [];\r\n        this.where = [];\r\n        // ---------------\r\n        // RULES\r\n        // ---------------\r\n        // JOIN: Table-wide rules most-specific to the guest\r\n        if (SCHEMAS.uac) {\r\n            this.EXPLICIT_TABLE_ACCESS_QUERY = {\r\n                query: Query.getExplicitRulesQuery(this.USER, this.table.name),\r\n                alias: 'EXPLICIT_TABLE_ACCESS',\r\n                on: ['EXPLICIT_TABLE_ACCESS.table_row = 0'],\r\n            };\r\n        }\r\n        if (byRow) {\r\n            if (SCHEMAS.uac) {\r\n                // JOIN: Row-wide rules most-specific to the guest\r\n                this.EXPLICIT_ROW_ACCESS_QUERY = {\r\n                    query: Query.getExplicitRulesQuery(this.USER, this.table.name),\r\n                    alias: 'EXPLICIT_ROW_ACCESS',\r\n                    on: ['EXPLICIT_ROW_ACCESS.table_row = ' + this.alias + '.' + this.table.primaryKey],\r\n                };\r\n            }\r\n            // ---------------\r\n            // RIGHTS\r\n            // ---------------\r\n            // JOIN: The guest's organic rights towards the owner\r\n            if (this.table.attributionKey && SCHEMAS.account) {\r\n                var ownerGuestRelationshipQuery = Query.getOwnerGuestRelationshipQuery(this.USER, false/* groupConcat */);\r\n                this.AUTHOR_USER_RELATIONSHIP_QUERY = {\r\n                    query: ownerGuestRelationshipQueryr\n                    alias: 'AUTHOR_USER_RELATIONSHIP',\r\n                    on: ['AUTHOR_USER_RELATIONSHIP.' + ownerGuestRelationshipQuery.table.primaryKey + ' = ' + this.alias + '.' + this.table.attributionKey],\r\n                };\r\n            }\r\n        }\r\n        // ---------------\r\n        // APPLY\r\n        // ---------------\r\n        // The UAC table control\r\n        this.where.push(this.deriveEntityAccess('view') + ' <> 0');\r\n    }\r\n    \r\n    /**\r\n     * --------------------------------------------------\r\n     * RELATED TABLES\r\n     * --------------------------------------------------\r\n     */\r\n    \r\n\t/**\r\n\t * Makes the Query that finds the winning descreet access rules\r\n\t * for the given access type, for the current user OR the closest ancestor on this table (or, table row).\r\n     *\r\n     *  Each row has the following schema:\r\n     * \r\n     *  table_name: ...,\r\n     *  table_row: ...,\r\n     *  target: 1/3/7,\r\n     *  uac: {\r\n     *      read: 0,\r\n     *      write: 0,\r\n     *  },\r\n     *  fields: {\r\n     *      fname: {\r\n     *          uac: {\r\n     *              read: 0,\r\n     *              write: 0,\r\n     *          }\r\n     *      }\r\n     *  },\r\n     *\r\n\t * @return object\r\n\t */\r\n\tstatic getExplicitRulesQuery(USER, tableName) {\r\n\t\tvar tableNameSplit = tableName.split('.');\r\n\t\tvar tableName = tableNameSplit.pop(),\r\n            databaseName = tableNameSplit[0] || 'default',\r\n            SCHEMAS = Schema.schemas[databaseName];\r\n\t\tvar targetInLineageQuery = 'FIND_IN_SET(target, \"' + USER.lineage.replace('/', ',') + '\")';\r\n        return {\r\n            table: SCHEMAS.uac,\r\n            select: ['*', targetInLineageQuery + ' AS `lineage.target`'],\r\n            where: [\r\n                'table_name = ' + tableName,\r\n                'target = ' + USER.id + ' OR ' + targetInLineageQuery,\r\n            ],\r\n            orderBy: '`lineage.target` DESC',\r\n            limit: 1,\r\n            toString() {\r\n                return 'SELECT ' + this.select.join(', ') \r\n                + ' FROM ' + this.table.name \r\n                + ' WHERE ' + this.where.join(' AND ') \r\n                + ' ORDER BY ' + this.orderBy \r\n                + ' LIMIT ' + this.limit;\r\n            },\r\n        };\r\n    }\r\n            \r\n    /**\r\n     * Composes a query that determines the relatiosnhip\r\n     * between a given owner and guest.\r\n     * \r\n     * A where clause can be subsequnetly added to the query\r\n     * to identify the said owner\r\n     * or a join clause can be added to dynamically identify the said owner\r\n     * as part of a larger query.\r\n     * \r\n     * @param object                   USER \r\n     * @param bool                     groupConcat \r\n     * \r\n     * @return object\r\n     */\r\n    static getOwnerGuestRelationshipQuery(USER, groupConcat = false) {\r\n\t\tvar accessRightQueries = {};\r\n\t\t// Descendant access right\r\n\t\taccessRightQueries['DESCENDANT'] = 'FIND_IN_SET(id, \"' + USER.lineage.replace(USER.id + '/', '').replace(/\\//g, ',') + '\")';\r\n\t\t// Child access right (also a descendant)\r\n\t\taccessRightQueries['DESCENDANT,CHILD'] = 'id = ' + USER.parent;\r\n\t\t// Sibling access right\r\n\t\taccessRightQueries['SIBLING'] = USER.parent + ' = parent';\r\n\t\t// Ancestor access right\r\n\t\taccessRightQueries['ANCESTOR'] = 'FIND_IN_SET(' + USER.id + ', REPLACE(REPLACE(lineage, CONCAT(id, \"/\"), \"\"), \"/\", \",\"))';\r\n\t\t// Parent access right (also an ancestor)\r\n\t\taccessRightQueries['ANCESTOR,PARENT'] = USER.id + ' = parent';\r\n\t\t// Direct attribution\r\n        accessRightQueries['AUTHOR'] = 'id = ' + USER.id;\r\n        // ------\r\n\t\tvar compiledAccessRights = 'NULL'; // No access right\r\n\t\t_each(accessRightQueries, (assertion, right) => {\r\n\t\t\tcompiledAccessRights = 'IF(' + assertion + ', \"' + right + '\", ' + compiledAccessRights + ')';\r\n        });\r\n        // ------\r\n\t\treturn {\r\n            table: Schema.tables.account,\r\n            select: (groupConcat ? 'GROUP_CONCAT(DISTINCT ' : '') + compiledAccessRights + (groupConcat ? ')' : '') + ' AS relationship',\r\n            where: [],\r\n            toString() {\r\n                return 'SELECT ' + this.select \r\n                + ' FROM ' + this.table.name\r\n                + (this.where.length ? ' WHERE ' + this.where.join(' AND ') : '');\r\n            },\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * --------------------------------------------------\r\n     * TOSTRING\r\n     * --------------------------------------------------\r\n     */\r\n    \r\n    /**\r\n     * Stringifies the query.\r\n     * \r\n     * @return string\r\n     */\r\n    toString() {\r\n        return 'SELECT ' + this.select.join(', ') \r\n        + ' FROM ' + this.table.name + ' AS ' + this.alias\r\n        + (this.EXPLICIT_TABLE_ACCESS_QUERY ? ' LEFT JOIN (' + this.EXPLICIT_TABLE_ACCESS_QUERY.query + ') AS ' + this.EXPLICIT_TABLE_ACCESS_QUERY.alias + ' ON ' + this.EXPLICIT_TABLE_ACCESS_QUERY.on.join(' AND ') : '')\r\n        + (this.EXPLICIT_ROW_ACCESS_QUERY ? ' LEFT JOIN (' + this.EXPLICIT_ROW_ACCESS_QUERY.query + ') AS ' + this.EXPLICIT_ROW_ACCESS_QUERY.alias + ' ON ' + this.EXPLICIT_ROW_ACCESS_QUERY.on.join(' AND ') : '')\r\n        + (this.AUTHOR_USER_RELATIONSHIP_QUERY ? ' LEFT JOIN (' + this.AUTHOR_USER_RELATIONSHIP_QUERY.query + ') AS ' + this.AUTHOR_USER_RELATIONSHIP_QUERY.alias + ' ON ' + this.AUTHOR_USER_RELATIONSHIP_QUERY.on.join(' AND ') : '')\r\n        + ' WHERE ' + this.where.join(' AND ');\r\n    }\r\n    \r\n    /**\r\n     * --------------------------------------------------\r\n     * ACCESS LOGIC\r\n     * --------------------------------------------------\r\n     */\r\n\r\n\t/**\r\n\t * Creates the SQL logic that computes descreet access rules and all other rules into a final value\r\n\t * - for entity access.\r\n\t *\r\n\t * @param string \t                accessType\r\n\t * @param bool \t\t                withActingRights\r\n\t *\r\n\t * @return string\r\n\t */\r\n\tderiveEntityAccess(accessType, withActingRights = false) {\r\n\t\tvar entityAccess = [];\r\n\t\tif (this.EXPLICIT_ROW_ACCESS_QUERY) {\r\n\t\t\tentityAccess.push('JSON_EXTRACT(' + this.EXPLICIT_ROW_ACCESS_QUERY.alias + '.uac, \"$.' + accessType + '\")');\r\n        }\r\n        if (this.EXPLICIT_TABLE_ACCESS_QUERY) {\r\n            entityAccess.push('JSON_EXTRACT(' + this.EXPLICIT_TABLE_ACCESS_QUERY.alias + '.uac, \"$.' + accessType + '\")');\r\n        }\r\n\t\tentityAccess.push(Query.getRightsRulesIntersectionExpression(Query.rules(this.table.uac, accessType), this.getGuestRightsExpression(), withActingRights));\r\n        // ---------------------\r\n\t\treturn 'COALESCE(' + entityAccess.join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates the SQL logic that computes descreet access rules and all \r\n     * other rules into their final values\r\n\t * - for table fields access.\r\n\t *\r\n\t * @param array \t                fields\r\n\t * @param string \t                accessType\r\n\t * @param bool \t\t                withActingRights\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tderiveFieldsAccess(fields, accessType, withActingRights = false) {\r\n\t\tvar fieldsAccesses = {};\r\n\t\tfields.forEach(field => {\r\n\t\t\tvar fieldAccess = [];\r\n\t\t\tif (this.EXPLICIT_ROW_ACCESS_QUERY) {\r\n\t\t\t\tfieldAccess.push('JSON_EXTRACT(' + this.EXPLICIT_ROW_ACCESS_QUERY.alias + '.fields, \"$.' + field + '.uac.' + accessType + '\")');\r\n            }\r\n            if (this.EXPLICIT_TABLE_ACCESS_QUERY) {\r\n\t\t\t    fieldAccess.push('JSON_EXTRACT(' + this.EXPLICIT_TABLE_ACCESS_QUERY.alias + '.fields, \"$.' + field + '.uac.' + accessType + '\")');\r\n            }\r\n            fieldAccess.push(Query.getRightsRulesIntersectionExpression(Query.rules(this.table.fields[field].uac, accessType), this.getGuestRightsExpression(), withActingRights));\r\n\t\t\t// In the form: id:\"0\"\r\n\t\t\tfieldsAccesses[field] = 'COALESCE(' + fieldAccess.join(', ') + ')';\r\n\t\t});\r\n\t\treturn fieldsAccesses;\r\n\t}\r\n    \r\n    /**\r\n     * --------------------------------------------------\r\n     * ORGANIC RIGHTS\r\n     * --------------------------------------------------\r\n     */\r\n \r\n    /**\r\n     * Creates the SQL expression for all user rights:\r\n     * Organic + Static Rights\r\n     * \r\n     * return string\r\n     */\r\n    getGuestRightsExpression() {\r\n        var rights = [];\r\n\t\tif (this.AUTHOR_USER_RELATIONSHIP_QUERY) {\r\n\t\t\trights.push(this.AUTHOR_USER_RELATIONSHIP_QUERY.alias + '.relationship');\r\n\t\t\tif (this.AUTHOR_USER_TOKEN_QUERY) {\r\n\t\t\t\trights.push('IF(' + this.AUTHOR_USER_TOKEN_QUERY.alias + '.id, \"user\", \"\")');\r\n\t\t\t}\r\n        }\r\n        if (this.USER.privileges.length) {\r\n            rights.push('\"' + this.USER.privileges.join(',') + '\"');\r\n        }\r\n        // If all conditions above have been met, then we should have here:\r\n        // CONCAT_WS(\",\", _RELATED_ACCOUNT.relationship, IF(_TOKEN.id, \"user\", \"\"), \"ADMIN,ETC\")\r\n        // This would resolve to:\r\n        // \"ANCESTOR,PARENT,101,ADMIN,ETC\";\r\n        return rights.length ? 'CONCAT_WS(\",\", ' + rights.join(', ') + ')' : '\"\"';\r\n    }\r\n    \t\r\n\t/**\r\n\t * Compiles to the SQL string that ssserts which of the current user's\r\n     * total access rights (static + organic rights) passes the\r\n\t * given access rules.\r\n\t *\r\n\t * @param array|string|bool|null\trules\r\n\t * @param string\t\t\t\t\trightsExpression\r\n\t * @param bool\t\t\t\t\t\twithActingRights\r\n\t *\r\n\t * @return string\r\n\t */\r\n\tstatic getRightsRulesIntersectionExpression(rules, rightsExpression, withActingRights = false) {\r\n\t\tvar explicitFirstRule = _isBoolean(rules[0]) ? rules.shift() : null;\r\n\t\t// No rule? Implict TRUE of NULL.\r\n\t\t// Only rule is bool? Explicit TRUE/FALSE\r\n\t\tif (!rules.length) {\r\n\t\t\treturn _isBoolean(explicitFirstRule) ? parseInt(explicitFirstRule) : 'NULL';\r\n        }\r\n        // ---------------------\r\n\t\t// Which RULES are satisfied by RIGHTS?\r\n        // ---------------------\r\n        var nodeAccessAssertions = [];\r\n\t\trules.forEach(rule => {\r\n            var ruleSql = [];\r\n            // Where a rule specifies...\r\n            // PARENT+ETC\r\n\t\t\trule.split('+').forEach(r => {\r\n\t\t\t\truleSql.push('FIND_IN_SET(\"' + r + '\", ' + rightsExpression + ')');\r\n            });\r\n            // Then we would have...\r\n            // IF(FIND_IN_SET(\"PARENT\". \"ANCESTOR,PARENT,101,ADMIN,ETC\") AND FIND_IN_SET(\"ETC\". \"ANCESTOR,PARENT,101,ADMIN,ETC\"), \"PARENT+ETC\", NULL);\r\n\t\t\tnodeAccessAssertions.push('IF(' + ruleSql.join(' AND ') + ', \"' + rule + '\", NULL)');\r\n        });\r\n\t\t// Gather none-NULL assertions\r\n\t\tnodeAccessAssertions = 'COALESCE(' + nodeAccessAssertions.join(', ') + ')';\r\n        // ---------------------\r\n\t\t// So should we invert the given NULLness of the logic?\r\n        // ---------------------\r\n\t\treturn explicitFirstRule \r\n\t\t\t? 'IF(ISNULL(' + nodeAccessAssertions + '), 1, 0)' \r\n\t\t\t: 'IF(ISNULL(' + nodeAccessAssertions + '), 0, ' + (withActingRights ? nodeAccessAssertions : '1') + ')';\r\n    }\r\n    \r\n    /**\r\n     * Gets rules array\r\n     * \r\n     * @param array                     rules\r\n     * @param string                    accessType\r\n     * \r\n     * @return array\r\n     */\r\n    static rules(rules, accessType) {\r\n        if (_isObject(rules)) {\r\n            rules = rules[accessType];\r\n        }\r\n        return _isEmpty(rules) \r\n            ? [] \r\n            : _arrFrom(rules);\r\n    }\r\n};","\r\n/**\r\n * imports\r\n */\r\nimport Schema from '../Base/Schema.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport Query from './Query.js';\r\n\r\nexport default class Client {\r\n\t\r\n\t/**\r\n\t * Creates the UAC logic that sets the value of each field conditionally.\r\n\t *\r\n\t * @param object            USER\r\n\t * @param string            tableName\r\n\t * @param array\t\t\t\tcolumns\r\n\t *\r\n\t * @return Query\r\n\t */\r\n\tstatic select(USER, tableName, columns) {\r\n\t\tvar tableNameSplit = tableName.split('.');\r\n\t\tvar tableName = tableNameSplit.pop(),\r\n\t\t\tdatabaseName = tableNameSplit[0] || 'default';\r\n\t\tcolumns = _arrFrom(columns);\r\n\t\tif (!columns.length || columns[0] === '*') {\r\n\t\t\tcolumns = Object.keys(Schema.schemas[databaseName][tableName].fields);\r\n\t\t}\r\n        // ---------------\r\n        // OBJECT_QUERY\r\n        // ---------------\r\n        var OBJECT_QUERY = new Query(USER, tableName, true);\r\n\t\t// The UAC fields control\r\n\t\tif (0) {\r\n\t\t\t_each(OBJECT_QUERY.deriveFieldsAccess(columns, 'view'), (field, accessPassExpression) => {\r\n\t\t\t\tOBJECT_QUERY.select.push('IF(' + accessPassExpression + ' <> 0, ' + OBJECT_QUERY.alias + '.' + field + ', NULL) AS ' + field);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tOBJECT_QUERY.select.push(...columns);\r\n\t\t}\r\n        return OBJECT_QUERY;\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Returns the list of all accounts that the given rights can be applied to.\r\n\t *\r\n\t * @param object            USER\r\n\t * @param array\t \t\t\torganicRights\r\n\t * @param array\t \t\t\tpriorityAccounts\r\n\t *\r\n\t * @return Query\r\n\t */\r\n\tstatic getRelatedAccounts(USER, organicRights, priorityAccounts = []) {\r\n\t\tvar accountSchema = Schema.schemas[this.databaseName || 'default'].account;\r\n\t\tvar ACCOUNT_QUERY = {\r\n\t\t\ttable: accountSchema,\r\n\t\t\talias: 'ACCOUNT',\r\n\t\t\tselect: [],\r\n\t\t\twhere: [],\r\n\t\t\torderBy: [],\r\n\t\t\ttoString() {\r\n\t\t\t\treturn 'SELECT ' + this.select.join(', ')\r\n\t\t\t\t+ ' FROM ' + this.table.name + ' AS ' + this.alias\r\n\t\t\t\t+ ' RIGHT JOIN (' + this.AUTHOR_USER_RELATIONSHIP_QUERY.query + ') AS ' + this.AUTHOR_USER_RELATIONSHIP_QUERY.alias + ' ON ' + this.AUTHOR_USER_RELATIONSHIP_QUERY.on.join(' AND ')\r\n                + ' WHERE ' + this.where.join(' AND ') \r\n                + (this.orderBy.length ? ' ORDER BY ' + this.orderBy : '');\r\n\t\t\t}\r\n\t\t}\r\n\t\t// RIGHT JOIN\r\n\t\tACCOUNT_QUERY.AUTHOR_USER_RELATIONSHIP_QUERY = {\r\n\t\t\tquery: Query.getAuthorUserRelationshipQuery(USER, false/* groupConcat */),\r\n\t\t\talias: 'AUTHOR_USER_RELATIONSHIP',\r\n\t\t\ton: [\r\n\t\t\t\tACCOUNT_QUERY.alias + '.' + accountSchema.primaryKey + ' = AUTHOR_USER_RELATIONSHIP.' + accountSchema.primaryKey,\r\n\t\t\t\t'NOT ISNULL(AUTHOR_USER_RELATIONSHIP.relationship)',\r\n\t\t\t],\r\n\t\t};\r\n\t\tif (priorityAccounts) {\r\n\t\t\t// But ensure that the following accounts are listed first, if actually in list\r\n\t\t\tACCOUNT_QUERY.select.push('FIND_IN_SET(' + ACCOUNT_QUERY.alias + '.' + accountSchema.primaryKey + ', \"' + priorityAccounts.join(',') + '\") AS priority');\r\n\t\t\tACCOUNT_QUERY.orderBy.push('priority DESC');\r\n\t\t}\r\n\t\tif (organicRights) {\r\n\t\t\tACCOUNT_QUERY.where.push('AUTHOR_USER_RELATIONSHIP.relationship in (\"' + organicRights.join('\", \"') + '\")');\r\n\t\t}\r\n\t\treturn ACCOUNT_QUERY;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the Query that finds descreet access types\r\n\t * for the current user on this table (or, table row).\r\n\t *\r\n\t * @param object            USER\r\n\t * @param string|array\t\taccesses\r\n\t * @param string|int\t\toverObject\t\t\tThe ID of the subject object.\r\n\t *\t\t\t\t\t\t\t\t\t\t\t\t(The object author will be basis for organic relationship.)\r\n\t * @param int\t\t\t\torAsRelatedTo\t\tWhen not overObject!\r\n\t *\t\t\t\t\t\t\t\t\t\t\t\t(This user ID will be basis for organic relationship.)\r\n\t * @param bool\t\t\t\twithFields\r\n\t * @param bool\t\t\t\twithActingRights\r\n\t *\r\n\t * @return Query\r\n\t */\r\n\tstatic getAccessesDoc(USER, accesses, overObject = null, orAsRelatedTo = null, withFields = false, withActingRights = false) {\r\n        // Either of the following two arguments are accepted. Not both\r\n\t\tif (overObject && orAsRelatedTo) {\r\n\t\t\tthrow new Error('UAC queries must be either over an object and its author (argument #2), or as related to a specific user (argument #3). But not both!');\r\n\t\t}\r\n        // ---------------\r\n        // OBJECT_QUERY\r\n        // ---------------\r\n        var OBJECT_QUERY = new Query(USER, tableName, objectId || orAsRelatedTo);\r\n        // JOIN: The user's organic rights towards the author\r\n        if (OBJECT_QUERY.AUTHOR_USER_RELATIONSHIP_QUERY) {\r\n            OBJECT_QUERY.AUTHOR_USER_RELATIONSHIP_QUERY.on.push('NOT ISNULL(AUTHOR_USER_RELATIONSHIP.relationship)');\r\n\t\t}\r\n\t\tif (overObject) {\r\n\t\t\t// The author of the object at the given row in _TABLE\r\n            OBJECT_QUERY.where.push(OBJECT_QUERY.table.primaryKey + ' = ' + overObject);\r\n\t\t} else if (OBJECT_QUERY.table.attributionKey && orAsRelatedTo) {\r\n\t\t\t// The author specified in orAsRelatedTo or all possible relationships.\r\n\t\t\t// Whichever the case, _TABLE gets to play no role in this query...\r\n            OBJECT_QUERY.where.push(OBJECT_QUERY.table.attributionKey + ' = ' + orAsRelatedTo);\r\n\t\t\tOBJECT_QUERY.limit = 1;\r\n        }\r\n        // ---------------\r\n        // DOC\r\n        // ---------------\r\n        if (!accesses.length || accesses === '*') {\r\n            accesses = Client.standardAccesses;\r\n        } else {\r\n            accesses = _arrFrom(accesses);\r\n        }\r\n\t\tvar entityJson = [],\r\n\t\t\tfieldsJson = {},\r\n\t\t\tfields = withFields ? Object.keys(OBJECT_QUERY.table.fields) : [];\r\n\t\taccesses.forEach(accessType => {\r\n\t\t\tentityJson.push('JSON_OBJECT(\"' + accessType + '\", COALESCE(' + Query.deriveEntityAccess(accessType, withActingRights) + '))');\r\n\t\t\t_each(Query.deriveFieldsAccess(fields, accessType, withActingRights), (field, access) => {\r\n                if (!fieldsJson[field]) {\r\n                    fieldsJson[field] = [];\r\n                }\r\n\t\t\t\tfieldsJson[field].push('JSON_OBJECT(\"' + accessType + '\", ' + access + ')');\r\n\t\t\t});\r\n\t\t});\r\n\t\tif (accesses.length > 1) {\r\n\t\t\tOBJECT_QUERY.select.push('JSON_MERGE(' + entityJson.join(', ') + ') AS uac');\r\n\t\t} else {\r\n\t\t\tOBJECT_QUERY.select.push(entityJson.join(', ') + ' AS uac');\r\n\t\t}\r\n\t\tif (fieldsJson.length) {\r\n\t\t\tvar allFieldsJson = [];\r\n\t\t\t_each(fieldsJson, (field, accessesDocs) => {\r\n\t\t\t\tif (accesses.length > 1) {\r\n\t\t\t\t\tallFieldsJson.push('JSON_OBJECT(\"' + field + '\", JSON_MERGE(' + accessesDocs.join(', ') + '))');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tallFieldsJson.push('JSON_OBJECT(\"' + field + '\", ' + accessesDocs.join(', ') + ')');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tOBJECT_QUERY.select.push('JSON_MERGE(' + allFieldsJson.join(', ') + ') AS fields');\r\n\t\t}\r\n\t\treturn OBJECT_QUERY;\r\n\t}\r\n};\r\n\r\n/**\r\n * @var array\r\n */\r\nClient.standardAccesses = [\r\n\t'view', \r\n\t'create', \r\n\t'update', \r\n\t'delete', \r\n\t'stats', \r\n\t'use',\r\n];","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * TableInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'TableExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAbstractionInterface,\r\n\tReferenceInterface,\r\n} from '../index.js';\r\nimport _isFunction from '@onephrase/util/js/isFunction.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _isObject from '@onephrase/util/js/isObject.js';\r\nimport _promise from '@onephrase/util/js/promise.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _objFrom from '@onephrase/util/obj/from.js';\r\nimport _copy from '@onephrase/util/obj/copy.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport SelectInterface from '../Stmt/SelectInterface.js';\r\nimport UnionInterface from '../Stmt/UnionInterface.js';\r\nimport DerivedTableBase from '../Base/DerivedTable.js';\r\nimport TableBase from '../Base/Table.js';\r\nimport IDBTableBase from '../Base/IDBTable.js';\r\nimport Schema from '../Base/Schema.js';\r\nimport UACClient from '../Uac/Client.js';\r\nimport TableInterface from './TableInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Table extends TableInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, alias, claused = false) {\r\n\t\tsuper();\r\n\t\t// ReferenceInterface or AbstractionInterface\r\n\t\tthis.expr = expr;\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = claused;\r\n\t}\r\n\t\r\n\t/**\r\n\t * --------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tas(alias) {\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = true;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetName() {\r\n\t\t// Without backticks\r\n\t\treturn this.expr.name || '';\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetAlias() {\r\n\t\treturn this.alias || this.getName();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetDatabaseName(params = {}) {\r\n\t\treturn this.expr.context ? this.expr.context.name : params.defaultDB || 'default';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetEngine(params = {}) {\r\n\t\treturn params.engine || this.getSchema(params).engine;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetSchema(params = {}) {\r\n\r\n\t\tif (this._schema) {\r\n\t\t\treturn this._schema;\r\n\t\t}\r\n\r\n\t\tif (this.expr instanceof AbstractionInterface) {\r\n\r\n\t\t\tvar derivedQuery = this.expr/*ABS*/.expr/*SELECT*/;\r\n\t\t\tvar derivedTable = derivedQuery.getTable();\r\n\t\t\tvar derivedTableSchema = (_isArray(derivedTable) ? derivedTable[0] : derivedTable).getSchema(params);\r\n\t\t\tthis._schema = {\r\n\t\t\t\tfields: {},\r\n\t\t\t\tuniqueKeys: {},\r\n\t\t\t};\r\n\r\n\t\t\tvar getAliasOfField = fieldName => derivedQuery.getFields().reduce((alias, field) => alias || (fieldName === field.getName() ? field.getAlias() : null), null) || fieldName;\r\n\r\n\t\t\t// FIELD NAME\r\n\t\t\tthis._schema.name = this.getAlias();\r\n\r\n\t\t\t// PRIMARY KEY\r\n\t\t\tthis._schema.primaryKey = _isArray(derivedTableSchema.primaryKey) \r\n\t\t\t\t? derivedTableSchema.primaryKey.map(fieldName => getAliasOfField(fieldName))\r\n\t\t\t\t: getAliasOfField(derivedTableSchema.primaryKey);\r\n\t\t\tthis._schema.autoIncrement = derivedTableSchema.autoIncrement;\r\n\r\n\t\t\t// RUNTIME FIELDS\r\n\t\t\tderivedQuery.getFields().forEach(field => {\r\n\t\t\t\tthis._schema.fields[field.getAlias()] = derivedTableSchema.fields[field.getName()];\r\n\t\t\t});\r\n\t\t\t// The rest of the fields...\r\n\t\t\t_each(derivedTableSchema.fields, (name, field) => {\r\n\t\t\t\tif (!this._schema.fields[name]) {\r\n\t\t\t\t\tthis._schema.fields[name] = field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// RUNTIME UNIQUE\r\n\t\t\t_each(derivedTableSchema.uniqueKeys || {}, (name, keyPath) => {\r\n\t\t\t\tvar keyPathAliased = _arrFrom(keyPath).map(fieldName => getAliasOfField(fieldName));\r\n\t\t\t\tthis._schema.uniqueKeys[name] = !_isArray(keyPath) ? keyPathAliased[0] : keyPathAliased;\r\n\t\t\t});\r\n\r\n\t\t\t// ENGINE\r\n\t\t\tthis._schema.engine = derivedTableSchema.engine;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar databaseName = this.getDatabaseName(params), tableName = this.getName();\r\n\t\t\tthis._schema = Schema.schemas[databaseName] && Schema.schemas[databaseName][tableName] ? Schema.schemas[databaseName][tableName] : {\r\n\t\t\t\tname: tableName,\r\n\t\t\t\tprimaryKey: '',\r\n\t\t\t\tfields: {},\r\n\t\t\t\tuniqueKeys: {},\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn this._schema;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(databases = null, params = {}) {\r\n\t\t// Derived table???\r\n\t\tif (this.expr instanceof AbstractionInterface) {\r\n\t\t\tvar _params = _copy(params);\r\n\t\t\t_params.fieldsByReference = true;\r\n\t\t\treturn new DerivedTableBase(this.expr/*ABS*/.expr/*SELECT*/.eval(databases, _params), null, this.alias, this.getSchema(params));\r\n\t\t}\r\n\r\n\t\tif (this.expr instanceof ReferenceInterface) {\r\n\t\t\t// We accept promises\r\n\t\t\tvar databaseName = this.getDatabaseName(), engine = (this.getEngine(params) || '').toUpperCase();\r\n\t\t\tvar DB = _promise(resolve => {\r\n\t\t\t\tresolve(databases);\r\n\t\t\t}).then(databases => {\r\n\t\t\t\t// ------------------\r\n\t\t\t\t// Obtain store\r\n\t\t\t\t// ------------------\r\n\t\t\t\t// We support IndexedDB natively\r\n\t\t\t\tif (engine === 'IDB') {\r\n\t\t\t\t\tvar storeName = this.getName();\r\n\t\t\t\t\tif (!databases || isIndexedDB(databases)) {\r\n\t\t\t\t\t\treturn getIDBDatabase(databases, databaseName);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isIDBDatabase(databases)) {\r\n\t\t\t\t\t\tif (this.expr.context) {\r\n\t\t\t\t\t\t\tthrow new Error('The implied database object must be an IDBFactory in order to resolve the qualified IndexedDB store name \"' + this.expr + '\".');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn databases;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_isObject(databases)) {\r\n\t\t\t\t\t\tif (!isIDBDatabase(databases[databaseName])) {\r\n\t\t\t\t\t\t\tthrow new Error('The implied database object must be an instance of IDBDatabase in order to resolve the IndexedDB store name \"' + this.expr + '\".');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn databases[databaseName];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// ------------------\r\n\t\t\t\tif (!databases) {\r\n\t\t\t\t\tdatabases = Schema.databases;\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isObject(databases[databaseName])) {\r\n\t\t\t\t\tthrow new Error('The implied database must be an object in order to resolve the table name \"' + this.expr + '\".');\r\n\t\t\t\t}\r\n\t\t\t\treturn databases[databaseName];\r\n\t\t\t});\r\n\r\n\t\t\tif (engine === 'IDB') {\r\n\t\t\t\treturn new IDBTableBase(DB, this.getName(), this.getAlias(), this.getSchema(params));\r\n\t\t\t}\r\n\r\n\t\t\treturn new TableBase(DB, this.getName(), this.getAlias(), this.getSchema(params));\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn [this.expr.stringify(params), this.claused ? 'AS' : '', this.alias].filter(a => a).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, [' (as )?'], {useRegex:'i'});\r\n\t\tif (parse.tokens.length < 3) {\r\n\t\t\tvar tableParse = parseCallback(parse.tokens[0]);\r\n\t\t\tif (tableParse instanceof ReferenceInterface) {\r\n\t\t\t\tif (params.withUac) {\r\n\t\t\t\t\ttableParse = parseCallback('(' + UACClient.select(null, tableParse.stringify()) + ')', null, {withUac: false});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttableParse.isTableName = true;\r\n\t\t\t\t}\r\n\t\t\t} else if (!(tableParse instanceof AbstractionInterface && (tableParse.expr instanceof SelectInterface || tableParse.expr instanceof UnionInterface))) {\r\n\t\t\t\tthrow new Error('Table expression must be either a plain reference or a (derived) query!');\r\n\t\t\t}\r\n\t\t\treturn new this(\r\n\t\t\t\ttableParse, \r\n\t\t\t\t(parse.tokens[1] || '').trim(), \r\n\t\t\t\t(parse.matches[0] || '').trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * -----------------\r\n * @IndexedDB Helpers\r\n * -----------------\r\n */\r\n\r\nconst isIndexedDB = object => typeof indexedDB !== 'undefined' ? (object instanceof indexedDB) : _isFunction(object.open);\r\nconst isIDBDatabase = object => typeof IDBDatabase !== 'undefined' ? (object instanceof IDBDatabase) : _isFunction(object.transaction);\r\nconst getIDBDatabase = (_indexedDB, databaseName) => {\r\n\treturn new Promise(resolve => {\r\n\t\tvar dbOpenRequest = (_indexedDB || indexedDB).open(databaseName);\r\n\t\tdbOpenRequest.onsuccess = e => {\r\n\t\t\tresolve(e.target.result);\r\n\t\t};\r\n\t});\r\n};","\r\n/**\r\n * Sums an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((total, v) => total + v, arr.shift());\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _avg from '@onephrase/util/arr/avg.js';\r\nimport _unique from '@onephrase/util/arr/unique.js';\r\nimport _max from '@onephrase/util/arr/max.js';\r\nimport _min from '@onephrase/util/arr/min.js';\r\nimport _sum from '@onephrase/util/arr/sum.js';\r\nimport _rand from '@onephrase/util/arr/rand.js';\r\nimport _isNull from '@onephrase/util/js/isNull.js';\r\nimport _after from '@onephrase/util/str/after.js';\r\nimport _objFrom from '@onephrase/util/obj/from.js';\r\nimport _merge from '@onephrase/util/obj/merge.js';\r\nimport _get from '@onephrase/util/obj/get.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Row class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Row {\r\n\t\r\n\tconstructor(params) {\r\n\t\tObject.defineProperty(this, '.params', {value: params});\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCONCAT(...args) {\r\n\t\treturn args.join('');\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCONCAT_WS(...args) {\r\n\t\treturn args.join(args.shift());\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOALESCE(...args) {\r\n\t\treturn args.reduce((prev, next) => !_isNull(prev) ? prev : next, null);\r\n\t}\r\n\t\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tFIND_IN_SET(substr, str) {\r\n\t\treturn str.indexOf(substr);\r\n\t}\r\n\t\t\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tISNULL(val) {\r\n\t\treturn _isNull(val);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * ----------------\r\n\t * AGGREGATE FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOUNT(rows, column) {\r\n\t\tif (column.stringify() === '*') {\r\n\t\t\treturn rows.length;\r\n\t\t}\r\n\t\tif (arguments.length === 3 && column.stringify().toUpperCase() === 'DISTINCT') {\r\n\t\t\tvar vals = _unique(this.COLUMN(rows, arguments[2]));\r\n\t\t} else {\r\n\t\t\tvar vals = this.COLUMN(rows, column);\r\n\t\t}\r\n\t\treturn vals.filter(v => !_isNull(v)).length;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUP_CONCAT(rows, column) {\r\n\t\treturn this.COLUMN(rows, column).join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUP_CONCAT_WS(rows, separator, column) {\r\n\t\treturn this.COLUMN(rows, column).join(separator.eval(this, this['.params']));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tAVG(rows, column) {\r\n\t\treturn _avg(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tMAX(rows, column) {\r\n\t\treturn _max(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tMIN(rows, column) {\r\n\t\treturn _min(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tSUM(rows, column) {\r\n\t\treturn _sum(this.COLUMN(rows, column));\r\n\t}\r\n\r\n\t/**\r\n\t * ----------------\r\n\t * AGGREGATE SUPPORT FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tANY_VALUE(rows, column) {\r\n\t\treturn _rand(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUPING(rows, ...onColumns) {\r\n\t\tif (!this.AGGR || !this.AGGR.isRollup) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn onColumns.reduce((cum, column, i) => {\r\n\t\t\tvar match = this.AGGR.by.filter(by => {\r\n\t\t\t\tvar byStr = by.stringify();\r\n\t\t\t\tvar columnStr = column.stringify();\r\n\t\t\t\tif (columnStr.indexOf('.') === -1 && byStr.indexOf('.') > -1) {\r\n\t\t\t\t\tbyStr = _after(byStr, '.');\r\n\t\t\t\t}\r\n\t\t\t\treturn columnStr === byStr;\r\n\t\t\t});\r\n\t\t\treturn match.length ? i + 1 : cum;\r\n\t\t}, 0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOLUMN(rows, arg) {\r\n\t\treturn rows.map(row => arg.eval(row, this['.params']));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOLUMNS(rows, args) {\r\n\t\treturn args.map(arg => this.COLUMN(rows, arg));\r\n\t}\r\n\t\r\n\t/**\r\n\t * ----------------\r\n\t * JSON FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tJSON_EXTRACT(doc, path) {\r\n\t\treturn _get(JSON.parse(doc), path.split('.').slice(1));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tJSON_OBJECT(name, value) {\r\n\t\treturn _objFrom(name, value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tJSON_MERGE(doc1, doc2) {\r\n\t\treturn _merge(JSON.parse(doc1), JSON.parse(doc2));\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _sum from './sum.js';\r\n\r\n/**\r\n * Gets the average of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\treturn arr.length ? _sum(arr) / arr.length : 0;\r\n};","\r\n/**\r\n * Gets the maximum of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((v1, v2) => Math.max(v1, v2), arr.shift());\r\n};\r\n","\r\n/**\r\n * Gets the minimum of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((v1, v2) => Math.min(v1, v2), arr.shift());\r\n};\r\n","\r\n/**\r\n * Gets one or more random values from an array.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\tvar result = [];\r\n\tvar rand = null;\r\n\twhile (result.length < amount && (rand = arr[Math.floor(Math.random() * arr.length)]) && result.indexOf(rand) === -1) {\r\n\t\tresult.push(rand);\r\n\t};\r\n\treturn arguments.length > 1 ? result : result[0];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isUndefined from '../js/isUndefined.js';\r\nimport _isNull from '../js/isNull.js';\r\nimport _arrFrom from '../arr/from.js';\r\n\r\n/**\r\n * Retrieves the value at the given path.\r\n *\r\n * A return value of undefined is ambiguous, and can mean either that the\r\n * path does not exist, or that the path actually exists but with a value of undefined. If it is required to\r\n * know whether the path actually exists, pass an object as a third argument.\r\n * This object will have an \"exists\" key set to true/false.\r\n *\r\n * @param object \t\t\t\tctxt\r\n * @param array \t\t\t\tpath\r\n * @param object \t\t\t\ttrap\r\n * @param object \t\t\t\treciever\r\n *\r\n * @return mixed\r\n */\r\nexport default function(ctxt, path, trap = {}, reciever = {}) {\r\n\tpath = _arrFrom(path).slice();\r\n\tvar _ctxt = ctxt;\r\n\twhile(!_isUndefined(_ctxt) && !_isNull(_ctxt) && path.length) {\r\n\t\tvar _key = path.shift();\r\n\t\tif (!(trap.get ? trap.get(_ctxt, _key) : (_isTypeObject(_ctxt) ? _key in _ctxt : _ctxt[_key]))) {\r\n\t\t\treciever.exists = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_ctxt = trap.get ? trap.get(_ctxt, _key) : _ctxt[_key];\r\n\t}\r\n\treciever.exists = true;\r\n\treturn _ctxt;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _last from '@onephrase/util/arr/last.js';\r\nimport _remove from '@onephrase/util/arr/remove.js';\r\nimport _merge from '@onephrase/util/obj/merge.js';\r\nimport _objFrom from '@onephrase/util/obj/from.js';\r\nimport Row from './Row.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Base class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Base {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(params, table, where, ...joins) {\r\n\t\tthis.params = params;\r\n\t\tthis.table = table;\r\n\t\tthis.where = where;\r\n\t\tthis.joins = joins;\r\n\t\t// -------------------------\r\n\t\tthis.tables = this.joins.concat(this.table);\r\n\t\t// -------------------------\r\n\t\tthis._onfinish = [];\r\n\t\tthis.cursors = Promise.all(this.tables.map(table => table.getCursor())).then(cursors => {\r\n\t\t\tcursors.reduce((prev, current) => {\r\n\t\t\t\tif (prev) {\r\n\t\t\t\t\tprev.onfinish(current.next.bind(current));\r\n\t\t\t\t}\r\n\t\t\t\treturn current;\r\n\t\t\t}, null).onfinish(() => {\r\n\t\t\t\tthis.eof = true;\r\n\t\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\t});\r\n\t\t\t// ------------\r\n\t\t\treturn cursors;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync fetch() {\r\n\t\tif (this.eof) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar row = await this.cursors.then(async cursors => {\r\n\t\t\t// Obtain rowBase and joinedRows\r\n\t\t\tvar rowCompositionRejection;\r\n\t\t\tvar baseCursor = _last(cursors),\r\n\t\t\t\tbaseRowData = await baseCursor.fetch(),\r\n\t\t\t\tjoinedCursors = cursors.slice(0, - 1);\r\n\t\t\tvar joinedRowData = await Promise.all(joinedCursors.map(async (joinCursor, i) => {\r\n\t\t\t\tif (rowCompositionRejection) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// ---------------------\r\n\t\t\t\tvar joinRow = await joinCursor.fetch();\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (!this.tables[i].join || this.tables[i].join.type === 'full') {\r\n\t\t\t\t\t\tjoinCursor.flags[baseCursor.key] = true;\r\n\t\t\t\t\t\treturn joinRow;\r\n\t\t\t\t\t} else if (this.tables[i].join.conditionClause.trim().toLowerCase() === 'using') {\r\n\t\t\t\t\t\t// Join using \"column name\"...\r\n\t\t\t\t\t\tvar column = this.tables[i].join.condition.stringify();\r\n\t\t\t\t\t\tif (joinRow[column] === baseRowData[column]) {\r\n\t\t\t\t\t\t\tjoinCursor.flags[baseCursor.key] = true;\r\n\t\t\t\t\t\t\treturn joinRow;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar conditionRowComposition = new Row(this.params);\r\n\t\t\t\t\t\tconditionRowComposition[this.table.alias] = baseRowData;\r\n\t\t\t\t\t\tconditionRowComposition[this.tables[i].alias] = joinRow;\r\n\t\t\t\t\t\tif (this.tables[i].join.condition.eval(conditionRowComposition, this.params)) {\r\n\t\t\t\t\t\t\tjoinCursor.flags[baseCursor.key] = true;\r\n\t\t\t\t\t\t\treturn joinRow;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(e) {\r\n\t\t\t\t\tthrow new Error('[\"' + this.tables[i].join.condition.stringify() + '\" in JOIN clause]: ' + e.message);\r\n\t\t\t\t}\r\n\t\t\t\t// ---------------------\r\n\t\t\t\t// Left/Right Join \r\n\t\t\t\t// ---------------------\r\n\t\t\t\tif (!joinCursor.flags[baseCursor.key]) {\r\n\t\t\t\t\tif (joinCursor.eof() && this.tables[i].join.type === 'left') {\r\n\t\t\t\t\t\treturn {};\r\n\t\t\t\t\t} else if (baseCursor.eof() && this.tables[i].join.type === 'right') {\r\n\t\t\t\t\t\tbaseRowData = {};\r\n\t\t\t\t\t\treturn joinRow;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trowCompositionRejection = true;\r\n\t\t\t}));\r\n\t\t\t// -------------------------\r\n\t\t\t// Advance cursor\r\n\t\t\tcursors[0].next();\r\n\t\t\t// -------------------------\r\n\t\t\t// Filter by join status\r\n\t\t\tif (joinedRowData.filter(t => t).length === joinedCursors.length) {\r\n\t\t\t\tvar rowComposition = new Row(this.params);\r\n\t\t\t\trowComposition[this.table.alias] = baseRowData;\r\n\t\t\t\tjoinedRowData.forEach((rowMember, i) => {\r\n\t\t\t\t\trowComposition[this.tables[i].alias] = rowMember;\r\n\t\t\t\t});\r\n\t\t\t\treturn rowComposition;\r\n\t\t\t}\r\n\t\t});\r\n\t\t// ----------\r\n\t\t// Apply where\r\n\t\t// ----------\r\n\t\ttry {\r\n\t\t\tif (!row || (this.where && !this.where.eval(row, this.params))) {\r\n\t\t\t\treturn await this.fetch();\r\n\t\t\t}\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.where.stringify() + '\" in WHERE clause]: ' + e.message);\r\n\t\t}\r\n\t\treturn row;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAbstractionInterface,\r\n} from '../index.js';\r\nimport _instanceof from '@onephrase/util/js/instanceof.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _each from '@onephrase/util/obj/each.js';\r\nimport _unique from '@onephrase/util/arr/unique.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _find from '@onephrase/util/obj/find.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport ArrowReference from '../ArrowReference.js';\r\nimport Table from '../Expr/Table.js';\r\nimport Base from '../Base/Base.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Delete class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Stmt {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetBase(database, params = {}) {\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || []);\r\n\t\ttables = tables.map(table => table.eval(database, params));\r\n\t\tvar mainTable = tables.shift();\r\n\t\treturn new Base(params, mainTable, this.exprs.where, ...tables);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetToString(context, callback) {\r\n\t\tvar strArray = [];\r\n\t\t_each(this.exprs, (clauseType, expr) => {\r\n\t\t\tif (!expr) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar str = null;\r\n\t\t\tvar clause = this.clauses[clauseType];\r\n\t\t\tif (clauseType === 'joins') {\r\n\t\t\t\tstr = expr.map((join, i) => clause[i] + ' ' + join.toString(context)).join(' ');\r\n\t\t\t} else if (clauseType === 'table') {\r\n\t\t\t\tstr = clause + ' ' + (\r\n\t\t\t\t\t_isArray(expr) ? expr.map(table => table.toString(context)).join(', ') : expr.toString(context)\r\n\t\t\t\t);\r\n\t\t\t} else if (!callback || !(str = callback(clauseType, expr, clause))) {\r\n\t\t\t\tstr = clause + ' ' + expr.toString(context);\r\n\t\t\t}\r\n\t\t\tstrArray.push(str);\r\n\t\t});\r\n\t\treturn strArray.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic getParse(expr, withUac, stmtClauses, parseCallback, params, callback) {\r\n\t\t// Match clauses; case-insensitively\r\n\t\tvar useRegex = 'i';\r\n\t\tvar parse = Lexer.lex(expr, Object.values(stmtClauses), {useRegex:useRegex});\r\n\t\tif (parse.matches.length) {\r\n\r\n\t\t\tvar exprs = {}, clauses = {}, vars = [];\r\n\t\t\tparse.matches.forEach((clause, i) => {\r\n\t\t\t\tvar clauseType = _find(stmtClauses, c => clause.match(new RegExp(c, useRegex)), true/*deep*/);\r\n\t\t\t\tvar _expr = parse.tokens[i + 1].trim();\r\n\t\t\t\tvar _exprParse = null;\r\n\t\t\t\tif (clauseType === 'joins') {\r\n\t\t\t\t\tvar _exprParse = parseCallback(_expr, null, {withUac});\r\n\t\t\t\t\tif (_exprParse.type = clause.match(new RegExp('(INNER|CROSS|LEFT|RIGHT)', 'i'))) {\r\n\t\t\t\t\t\t_exprParse.type = _exprParse.type[0].toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!exprs[clauseType]) {\r\n\t\t\t\t\t\texprs[clauseType] = [_exprParse];\r\n\t\t\t\t\t\tclauses[clauseType] = [clause];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\texprs[clauseType].push(_exprParse);\r\n\t\t\t\t\t\tclauses[clauseType].push(clause);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (clauseType === 'table') {\r\n\t\t\t\t\t\tvar tables = Lexer.split(_expr, [',']).map(\r\n\t\t\t\t\t\t\ttable => parseCallback(table.trim(), [Table], {withUac})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tvar _exprParse = tables.length === 1 ? tables[0] : tables;\r\n\t\t\t\t\t} else if (!callback || !(_exprParse = callback(clauseType, _expr))) {\r\n\t\t\t\t\t\tvar _exprParse = parseCallback(_expr, null, {withUac});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!_instanceof(_exprParse, AbstractionInterface)) {\r\n\t\t\t\t\t\t// Mine vars\r\n\t\t\t\t\t\t_arrFrom(_exprParse, false/*castObjects*/).forEach(__exprParse => {\r\n\t\t\t\t\t\t\tvars = vars.concat(__exprParse.meta.vars.filter(v => !v.isTableName));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Ramp up\r\n\t\t\t\t\tif (clauseType === 'where' && !exprs.joins) {\r\n\t\t\t\t\t\t// Wheres must not come before joins\r\n\t\t\t\t\t\t// This might happen on adding smart joins below\r\n\t\t\t\t\t\t// So we secure a place for joins\r\n\t\t\t\t\t\texprs.joins = [];\r\n\t\t\t\t\t\tclauses.joins = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\texprs[clauseType] = _exprParse;\r\n\t\t\t\t\tclauses[clauseType] = clause;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// ------------------\r\n\r\n\t\t\tvar arrowReferences = vars.filter(v => v.isArrowReference);\r\n\t\t\tif (arrowReferences.length) {\r\n\t\t\t\t// ---------------\r\n\t\t\t\t// Init\r\n\t\t\t\t// ---------------\r\n\t\t\t\tvar smartJoins = {}, tables = (_isArray(exprs.table) ? exprs.table : [exprs.table]).concat(exprs.joins || []);\r\n\t\t\t\tarrowReferences.forEach(arrowRef => {\r\n\t\t\t\t\tvar baseTable = (arrowRef.context ? tables.filter(table => table.getAlias() === arrowRef.context.name + '') : tables)[0];\r\n\t\t\t\t\tvar arrowRefEval = ArrowReference.eval(baseTable.getDatabaseName(params), baseTable.getSchema(params), arrowRef.name.replace(/`/g, ''));\r\n\t\t\t\t\tvar uuid = [baseTable.getAlias(), arrowRefEval.a.actingKey, arrowRefEval.b.actingKey, arrowRefEval.b.table.name,].join('_');\r\n\t\t\t\t\tif (!smartJoins[uuid]) {\r\n\t\t\t\t\t\tsmartJoins[uuid] = {\r\n\t\t\t\t\t\t\ta: arrowRefEval.a,\r\n\t\t\t\t\t\t\tb: arrowRefEval.b,\r\n\t\t\t\t\t\t\tselect: [],\r\n\t\t\t\t\t\t\tbaseTable,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// The actual table to resolve from\r\n\t\t\t\t\t// id thid joined table\r\n\t\t\t\t\tarrowRef.arrowContext = uuid;\r\n\t\t\t\t\tsmartJoins[uuid].select.push(\r\n\t\t\t\t\t\tarrowRefEval.b.actingKey, // Must come first\r\n\t\t\t\t\t\tarrowRefEval.b.select + ' AS `' + arrowRef.name.replace(/`/g, '') + '`'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t\t// ---------------\r\n\t\t\t\t// Use\r\n\t\t\t\t// ---------------\r\n\t\t\t\tif (!exprs.joins) {\r\n\t\t\t\t\texprs.joins = [];\r\n\t\t\t\t\tclauses.joins = [];\r\n\t\t\t\t}\r\n\t\t\t\t_each(smartJoins, (uuid, join) => {\r\n\t\t\t\t\tvar alias = join.b.table.name;\r\n\t\t\t\t\t// ------------------\r\n\t\t\t\t\tvar joinStmt = '(SELECT ' + (withUac ? 'WITH UAC ' : '') + alias + '.' + _unique(join.select).join(', ' + alias + '.') \r\n\t\t\t\t\t\t+ ' FROM ' + join.b.table.name + ' AS ' + alias\r\n\t\t\t\t\t+ ') AS ' + uuid\r\n\t\t\t\t\t+ ' ON ' + uuid + '.' + join.b.actingKey + ' = ' + join.baseTable.getAlias() + '.' + join.a.actingKey;\r\n\t\t\t\t\tjoinStmt = parseCallback(joinStmt);\r\n\t\t\t\t\tjoinStmt.type = 'left';\r\n\t\t\t\t\t// ------------------\r\n\t\t\t\t\texprs.joins.push(joinStmt);\r\n\t\t\t\t\tclauses.joins.push('LEFT JOIN');\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\t\t\treturn {exprs:exprs, clauses:clauses};\r\n\t\t}\r\n\t}\r\n};","\r\n/**\r\n * Instanceof that supports our multi-inheritance implementstion.\r\n *\r\n * @param object\t \tobj1\r\n * @param object\t \tclassB\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj, classB) {\r\n\tif (!obj) {\r\n\t\treturn false;\r\n\t}\r\n\tif (obj instanceof classB) {\r\n\t\treturn true;\r\n\t}\r\n\tvar mixinTest = classA => {\r\n\t\twhile (classA && classA !== Function.prototype) {\r\n\t\t\tif (classA === classB || (classA.prototypes && classA.prototypes.reduce((prevAns, prototype) => prevAns || (prototype === classB) || mixinTest(prototype), false))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tclassA = Object.getPrototypeOf(classA);\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\treturn mixinTest(obj.constructor);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mixin from '@onephrase/util/js/mixin.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport DeleteInterface from './DeleteInterface.js';\r\nimport Stmt from './Stmt.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Delete class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Delete extends _mixin(Stmt, DeleteInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses, withUac) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t\tthis.withUac = withUac;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync eval(database, params = {}) {\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tthis.base = this.getBase(database, params);\r\n\t\tvar rowComposition, count = 0;\r\n\t\twhile(rowComposition = await this.base.fetch()) {\r\n\t\t\tObject.keys(rowComposition).forEach(alias => {\r\n\t\t\t\tvar sourceTable;\r\n\t\t\t\tif (alias === this.base.table.alias) {\r\n\t\t\t\t\tsourceTable = this.base.table;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsourceTable = this.base.joins.filter(join => join.alias === alias)[0];\r\n\t\t\t\t}\r\n\t\t\t\tsourceTable.rows.forEach((row, i) => {\r\n\t\t\t\t\tif (row === rowComposition[alias]) {\r\n\t\t\t\t\t\tdelete sourceTable.rows[i];\r\n\t\t\t\t\t\tcount ++;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.getToString(params);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.trim().match(/^DELETE[ ]+FROM/, 'i')) {\r\n\t\t\tvar withUac = false;\r\n\t\t\tif (expr.match(/DELETE[ ]+WITH[ ]+UAC/i)) {\r\n\t\t\t\twithUac = true;\r\n\t\t\t\texpr = expr.replace(/[ ]+WITH[ ]+UAC/i, '');\r\n\t\t\t}\r\n\t\t\tvar stmtParse = super.getParse(expr, withUac, this.clauses, parseCallback, params);\r\n\t\t\treturn new this(stmtParse.exprs, stmtParse.clauses, withUac);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nDelete.clauses = {\r\n\ttable: 'DELETE[ ]+FROM',\r\n\twhere: 'WHERE',\r\n\t// inner join, cross join, {left|right} [outer] join\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * FieldInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'FieldExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAbstractionInterface,\r\n\tReferenceInterface,\r\n} from '../index.js';\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _objFrom from '@onephrase/util/obj/from.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport FieldInterface from './FieldInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Field class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Field extends FieldInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, alias, claused = false) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = claused;\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * --------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tas(alias) {\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = true;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetName() {\r\n\t\t// Without backticks\r\n\t\treturn (this.expr.name || '').replace(/`/g, '');\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetAlias() {\r\n\t\treturn (this.alias || '').replace(/`/g, '') || this.getName() || this.expr.toString();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow, database, params = {}) {\r\n\t\tvar alias = this.getAlias();\r\n\t\tif (params.fieldsByReference && this.expr instanceof ReferenceInterface) {\r\n\t\t\tvar reference = this.expr.getEval(tempRow, params);\r\n\t\t\treturn {\r\n\t\t\t\tget [alias] () {\r\n\t\t\t\t\treturn reference.get();\r\n\t\t\t\t},\r\n\t\t\t\tset [alias] (val) {\r\n\t\t\t\t\treference.set(val);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tvar value;\r\n\t\t\tif (this.expr instanceof AbstractionInterface) {\r\n\t\t\t\tvalue = this.expr.eval(database, params);\r\n\t\t\t} else {\r\n\t\t\t\tvalue = this.expr.eval(tempRow, params);\r\n\t\t\t}\r\n\t\t\tif (params.fieldsByReference) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tget [alias] () {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tset [alias] (val) {\r\n\t\t\t\t\t\tthrow new Error('\"' + alias + '\" cannot be modified; not a reference!');\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn _objFrom(alias, value);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(tempRow = {}) {\r\n\t\treturn [this.expr.stringify(tempRow), this.claused ? 'AS' : '', this.alias].filter(a => a).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar splits = Lexer.split(expr, [' (as )?'], {useRegex:'i', preserveDelims:true});\r\n\t\tvar exprParse = null;\r\n\t\tvar alias = splits.pop().trim();\r\n\t\tvar claused = alias.substr(0, 3).toLowerCase() === 'as ';\r\n\t\tif (claused) {\r\n\t\t\t// With an \"AS\" clause, its easy to obtain the alias...\r\n\t\t\t// E.g: SELECT first_name AS fname, 4 + 5 AS result, 5 + 5\r\n\t\t\talias = alias.substr(3).trim();\r\n\t\t\texprParse = parseCallback(splits.join('').trim());\r\n\t\t} else if (splits.length && (!alias.match(/[^0-9a-zA-Z_]/) || _wrapped(alias, '`', '`'))) {\r\n\t\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\r\n\t\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5 FROM ...,\r\n\t\t\t// we can only assume that the last space-separated expr is rhe alias.\r\n\t\t\t// When that fails, then it is most-likely there is no alias. \r\n\t\t\ttry {\r\n\t\t\t\texprParse = parseCallback(splits.join('').trim());\r\n\t\t\t} catch(e) {}\r\n\t\t}\r\n\t\tif (!exprParse) {\r\n\t\t\talias = null;\r\n\t\t\texprParse = parseCallback(expr);\r\n\t\t}\r\n\t\texprParse.isFieldName = true;\r\n\t\treturn new this(exprParse, alias, claused);\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * GroupByInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'GroupByExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _inherit from '@onephrase/util/obj/inherit.js';\r\nimport _copy from '@onephrase/util/obj/copy.js';\r\nimport _after from '@onephrase/util/str/after.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport GroupByInterface from './GroupByInterface.js';\r\nimport Row from '../Base/Row.js';\r\n\r\n/**\r\n * ---------------------------\r\n * GroupBy class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class GroupBy extends GroupByInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(columns, having = null, withRollup = false) {\r\n\t\tsuper();\r\n\t\tthis.columns = columns;\r\n\t\tthis.having = having;\r\n\t\tthis.withRollup = withRollup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows, params = {}) {\r\n\t\tvar groupBy = (rows, by, result) => {\r\n\t\t\t// This will end up either as\r\n\t\t\t// regular summary or rollup {super summary}\r\n\t\t\tif (by.length) {\r\n\t\t\t\t// Drilldown...\r\n\t\t\t\tvar grouping = {};\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar _for = by[0].eval(row, params);\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + this.stringify() + '\" in group by clause]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgrouping[_for] = grouping[_for] || [];\r\n\t\t\t\t\tgrouping[_for].push(row);\r\n\t\t\t\t});\r\n\t\t\t\tObject.values(grouping).map(group => groupBy(group, by.slice(1), result));\r\n\t\t\t}\r\n\t\t\tif (!by.length/*We're on end nodes*/ || this.withRollup) {\r\n\t\t\t\tvar summaryRow = new Row(params); _inherit(summaryRow, rows[0]);\r\n\t\t\t\tsummaryRow.$ = _copy(summaryRow.$);\r\n\t\t\t\tsummaryRow.AGGR = {rows: rows, by: by};\r\n\t\t\t\t// HOW WE'LL DETERMINE A SUPER AGGREGATE ROW...\r\n\t\t\t\tsummaryRow.AGGR.isRollup = by.length && this.withRollup;\r\n\t\t\t\tif (summaryRow.AGGR.isRollup) {\r\n\t\t\t\t\tby.forEach(b => {\r\n\t\t\t\t\t\tb = b.stringify().indexOf('.') > -1 ? _after(b.stringify(), '.') : b.stringify();\r\n\t\t\t\t\t\tif (b in summaryRow.$) {\r\n\t\t\t\t\t\t\tsummaryRow.$[b] = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tresult.push(summaryRow);\r\n\t\t\t\treturn summaryRow;\r\n\t\t\t}\r\n\t\t};\r\n\t\tvar result = [];\r\n\t\tgroupBy(tempRows, this.columns.slice(), result);\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar str = [this.columns.map(c => c.stringify(params)).join(', ')];\r\n\t\tif (this.withRollup) {\r\n\t\t\tstr.push('WITH ROLLUP');\r\n\t\t}\r\n\t\tif (this.having) {\r\n\t\t\tstr.push('HAVING ' + this.having.stringify(params));\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, ['WITH[ ]+ROLLUP', 'HAVING'], {useRegex:'i'});\r\n\t\tvar columns = Lexer.split(parse.tokens.shift().trim(), [',']).map(\r\n\t\t\tc => parseCallback(c.trim())\r\n\t\t);\r\n\t\tvar having = null;\r\n\t\tvar withRollup = false;\r\n\t\tparse.matches.forEach(clauseType => {\r\n\t\t\tif (clauseType.toLowerCase().startsWith('with')) {\r\n\t\t\t\twithRollup = true;\r\n\t\t\t\tparse.tokens.shift();\r\n\t\t\t} else if (clauseType.toLowerCase().startsWith('having')) {\r\n\t\t\t\thaving = parseCallback(parse.tokens.shift().trim());\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn new this(columns, having, withRollup);\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * InsertInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'InsertStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/util/str/wrapped.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport InsertInterface from './InsertInterface.js';\r\nimport { Assignment } from '@web-native-js/jsen';\r\nimport Table from '../Expr/Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Insert class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Insert extends InsertInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, columns, values, withUac, insertType, onDuplicateKeyUpdate) {\r\n\t\tsuper();\r\n\t\tthis.table = table;\r\n\t\tthis.columns = columns;\r\n\t\tthis.values = values;\r\n\t\tthis.withUac = withUac;\r\n\t\tthis.insertType = insertType;\r\n\t\tthis.onDuplicateKeyUpdate = onDuplicateKeyUpdate;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync eval(database, params = {}) {\r\n\t\tvar tableBase = this.table.eval(database, params);\r\n\t\tvar tableSchema = this.table.getSchema();\r\n\t\t// ---------------------------\r\n\t\tvar values = this.values;\r\n\t\tvar insertType = this.insertType.toUpperCase();\r\n\t\tif (insertType === 'SET') {\r\n\t\t\tvar columns = values.map(assignment => assignment.reference.name);\r\n\t\t\tvalues = [values.map(assignment => assignment.val.eval({}, params))];\r\n\t\t} else {\r\n\t\t\tvar columns = this.columns || (tableSchema.fields ? Object.keys(tableSchema.fields) : []);\r\n\t\t\tif (insertType === 'SELECT') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalues = (await values.eval(database, params)).map(row => Object.values(row));\r\n\t\t\t\t} catch(e) {\r\n\t\t\t\t\tthrow new Error('[\"' + values.stringify() + '\" in SELECT clause]: ' + e.message);\r\n\t\t\t\t}\r\n\t\t\t} else if (insertType === 'VALUES') {\r\n\t\t\t\tvalues = values.map(row => row.map(val => val.eval({}, params)));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Invalid insert statement \"' + this + '\"!');\r\n\t\t\t}\r\n\t\t}\r\n\t\tcolumns = columns.map(c => c + '');\r\n\t\tawait tableBase.insert(values, columns, newRow => {\r\n\t\t\tif (this.onDuplicateKeyUpdate) {\r\n\t\t\t\tthis.onDuplicateKeyUpdate.forEach(assignment => assignment.eval({$: newRow}, params));\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn values.length;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar str = [this.table.stringify(params)];\r\n\t\tif (this.insertType.toUpperCase() === 'SET') {\r\n\t\t\tstr.push('SET ' + this.values.map(assignment => assignment.stringify(params)).join(', '));\r\n\t\t} else {\r\n\t\t\tif (this.columns) {\r\n\t\t\t\tstr.push('(' + this.columns.join(', ') + ')');\r\n\t\t\t}\r\n\t\t\tif (this.insertType.toUpperCase() === 'SELECT') {\r\n\t\t\t\tstr.push(this.values.stringify(params));\r\n\t\t\t} else {\r\n\t\t\t\tstr.push('VALUES (' + this.values.map(\r\n\t\t\t\t\trow => row.map(\r\n\t\t\t\t\t\tval => val.stringify(params)\r\n\t\t\t\t\t).join(', ')\r\n\t\t\t\t).join('), (') + ')');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.onDuplicateKeyUpdate) {\r\n\t\t\tstr.push('ON DUPLICATE KEY UPDATE ' + this.onDuplicateKeyUpdate.map(assignment => assignment.stringify(params)).join(', '));\r\n\t\t}\r\n\t\treturn 'INSERT INTO ' + str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.trim().match(/^INSERT([ ]+WITH[ ]+UAC)?([ ]+INTO)?/, 'i')) {\r\n\t\t\tvar withUac = false;\r\n\t\t\tif (expr.match(/INSERT[ ]+WITH[ ]+UAC/i)) {\r\n\t\t\t\twithUac = true;\r\n\t\t\t\texpr = expr.replace(/[ ]+WITH[ ]+UAC/i, '');\r\n\t\t\t}\r\n\t\t\tvar parse = Lexer.lex(expr, Object.values(Insert.clauses), {useRegex:'i'});\r\n\t\t\tparse.tokens.shift();\r\n\t\t\tvar table = parse.tokens.shift().trim();\r\n\t\t\tvar columns = [];\r\n\t\t\tvar values = parse.tokens.shift();\r\n\t\t\tvar insertType = parse.matches[1].toUpperCase();\r\n\t\t\tif (insertType === 'SET') {\r\n\t\t\t\ttable = parseCallback(table, [Table]);\r\n\t\t\t\tvalues = Lexer.split(values.trim(), [','])\r\n\t\t\t\t\t.map(e => parseCallback(e.trim(), [Assignment]));\r\n\t\t\t} else {\r\n\t\t\t\tvar tableColumnSplit = Lexer.split(table, [' ']);\r\n\t\t\t\ttable = parseCallback(tableColumnSplit.shift().trim(), [Table]);\r\n\t\t\t\tif (tableColumnSplit.length) {\r\n\t\t\t\t\tcolumns = tableColumnSplit[0].trim();\r\n\t\t\t\t\tcolumns = Lexer.split(_wrapped(columns, '(', ')') ? _unwrap(columns, '(', ')') : columns, [','])\r\n\t\t\t\t\t\t.map(c => c.trim());\r\n\t\t\t\t}\r\n\t\t\t\tif (insertType === 'SELECT') {\r\n\t\t\t\t\tvalues = parseCallback('SELECT ' + values.trim());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// insertType === 'VALUES' || insertType === 'VALUE'\r\n\t\t\t\t\tvalues = Lexer.split(values.trim(), [','])\r\n\t\t\t\t\t\t.map(row => Lexer.split(_unwrap(row.trim(), '(', ')'), [','])\r\n\t\t\t\t\t\t\t.map(val => parseCallback(val.trim())));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar onDuplicateKeyUpdate = parse.tokens.shift();\r\n\t\t\tif (onDuplicateKeyUpdate) {\r\n\t\t\t\tonDuplicateKeyUpdate = Lexer.split(onDuplicateKeyUpdate.trim(), [','])\r\n\t\t\t\t\t.map(assignment => parseCallback(assignment.trim(), [Assignment]));\r\n\t\t\t}\r\n\t\t\tvar instance = new this(table, columns, values, withUac, insertType, onDuplicateKeyUpdate);\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nInsert.clauses = {\r\n\ttable: 'INSERT([ ]+INTO)?',\r\n\tvalues: '(VALUES|VALUE|SET|SELECT)',\r\n\tupdate: 'ON[ ]+DUPLICATE[ ]+KEY[ ]+UPDATE',\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * JoinInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'JoinConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport JoinInterface from './JoinInterface.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Join class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Join extends JoinInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, condition, conditionClause) {\r\n\t\tsuper();\r\n\t\tthis.table = table;\r\n\t\tthis.condition = condition;\r\n\t\tthis.conditionClause = conditionClause;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database, params = {}) {\r\n\t\tvar TableBase = this.table.eval(database, params);\r\n\t\tTableBase.join = {\r\n\t\t\ttype: this.type, // Expected to be added by context\r\n\t\t\tcondition: this.condition, \r\n\t\t\tconditionClause: this.conditionClause\r\n\t\t};\r\n\t\treturn TableBase;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetName() {\r\n\t\treturn this.table.getName();\r\n\t}\t\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetAlias() {\r\n\t\treturn this.table.getAlias();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn [\r\n\t\t\tthis.table.stringify(params), \r\n\t\t\tthis.conditionClause, \r\n\t\t\tthis.condition.stringify(params)\r\n\t\t].join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = Lexer.lex(expr, Join.clauses);\r\n\t\tif (parse.tokens.length === 2) {\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(parse.tokens[0], [Table]), \r\n\t\t\t\tparseCallback(parse.tokens[1]), \r\n\t\t\t\tparse.matches[0]\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nJoin.clauses = [' on ', ' using ', ' ON ', ' USING ',];\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * JoinInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Placeholder'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mixin from '@onephrase/util/js/mixin.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport _instanceof from '@onephrase/util/js/instanceof.js';\r\nimport _arrFrom from '@onephrase/util/arr/from.js';\r\nimport _pushUnique from '@onephrase/util/arr/pushUnique.js';\r\nimport _find from '@onephrase/util/obj/find.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport SelectInterface from './SelectInterface.js';\r\nimport AggrInterface from '../Expr/AggrInterface.js';\r\nimport JoinInterface from '../Expr/JoinInterface.js';\r\nimport Field from '../Expr/Field.js';\r\nimport Window from '../Expr/Window.js';\r\nimport GroupBy from '../Expr/GroupBy.js';\r\nimport OrderBy from '../Expr/OrderBy.js';\r\nimport Stmt from './Stmt.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Select class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Select extends _mixin(Stmt, SelectInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses, withUac = false, flags = [], references = []) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t\tthis.withUac = withUac;\r\n\t\tthis.flags = flags;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Fields\r\n\t * \r\n\t * @return array\r\n\t */\r\n\tgetFields() {\r\n\t\treturn this.exprs.fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Table component\r\n\t * \r\n\t * @return Object|array\r\n\t */\r\n\tgetTable() {\r\n\t\treturn this.exprs.table;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Where component\r\n\t * \r\n\t * @return Object\r\n\t */\r\n\tgetWhere() {\r\n\t\treturn this.exprs.where;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Join components\r\n\t * \r\n\t * @return array\r\n\t */\r\n\tgetJoins() {\r\n\t\treturn this.exprs.joins;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's GroupBy components\r\n\t * \r\n\t * @return array\r\n\t */\r\n\tgetGroupBy() {\r\n\t\treturn this.exprs.groupBy;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Windows components\r\n\t * \r\n\t * @return array\r\n\t */\r\n\tgetWindows() {\r\n\t\treturn this.exprs.windows;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's OrderBy components\r\n\t * \r\n\t * @return array\r\n\t */\r\n\tgetOrderBy() {\r\n\t\treturn this.exprs.orderBy;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Offset components\r\n\t * \r\n\t * @return string\r\n\t */\r\n\tgetOffset() {\r\n\t\treturn this.exprs.offset;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the SELECT STMT's Limit components\r\n\t * \r\n\t * @return string\r\n\t */\r\n\tgetLimit() {\r\n\t\treturn this.exprs.limit;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync eval(database, params = {}) {\r\n\t\t\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tthis.base = this.getBase(database, params);\r\n\t\t// BUILD (TEMP) ROWS, WHERE\r\n\t\tvar tempRows = [], tempRow;\r\n\t\twhile ((tempRow = await this.base.fetch())) {\r\n\t\t\ttempRows.push(tempRow);\r\n\t\t}\r\n\r\n\t\t// ---------------------------\r\n\t\t// BUILD RESPONSE ROWS INTO THE \"$\" KEY\r\n\t\t// ---------------------------\r\n\t\tvar applyFields = (tempRows, fields, collectAggrs = null) => {\r\n\t\t\tif (collectAggrs) {\r\n\t\t\t\tcollectAggrs = {aggr:[], win:[]};\r\n\t\t\t}\r\n\t\t\ttempRows.forEach(tempRow => {\r\n\t\t\t\tif (!tempRow.$) {\r\n\t\t\t\t\ttempRow.$ = {};\r\n\t\t\t\t}\r\n\t\t\t\tfields.forEach(field => {\r\n\t\t\t\t\tif (collectAggrs) {\r\n\t\t\t\t\t\t// This build will ignore AGGR columns for nowthis.\r\n\t\t\t\t\t\tvar aggrs = field.expr.meta.vars.slice().concat([field.expr]).filter(x => x instanceof AggrInterface);\r\n\t\t\t\t\t\tif (aggrs.length) {\r\n\t\t\t\t\t\t\t_pushUnique(aggrs.filter(x => x.window).length ? collectAggrs.win : collectAggrs.aggr, field);\r\n\t\t\t\t\t\t\t// But we'll set them to UNDEFINED (not NULL), to secure their slots\r\n\t\t\t\t\t\t\tif (!(field.getAlias() in tempRow.$)) {\r\n\t\t\t\t\t\t\t\ttempRow.$[field.getAlias()] = undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar fieldValObject = field.eval(tempRow, database, params);\r\n\t\t\t\t\t\tvar key = field.getAlias();\r\n\t\t\t\t\t\tObject.defineProperty(tempRow.$, key, Object.getOwnPropertyDescriptor(fieldValObject, key));\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + field.stringify() + '\" in field list]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn collectAggrs;\r\n\t\t};\r\n\r\n\t\t// ---------------------------\r\n\t\t// UNDERSTAND AGGREGATIONS\r\n\t\t// ---------------------------\r\n\t\tvar aggrExprs = {aggr:[], win:[]};\r\n\t\tthis.meta.vars.forEach(x => {\r\n\t\t\t//if (_instanceof(x, AggrInterface)) {\r\n\t\t\tif (x instanceof AggrInterface) {\r\n\t\t\t\t_pushUnique(x.window ? aggrExprs.win : aggrExprs.aggr, x);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// BUILD FIELDS\r\n\t\tvar fields = [], _fields, _schema;\r\n\t\tthis.exprs.fields.forEach(field => {\r\n\t\t\tif (field.getName() === '*') {\r\n\t\t\t\ttables.forEach(table => {\r\n\t\t\t\t\tif (table instanceof JoinInterface) {\r\n\t\t\t\t\t\ttable = table.table;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(_schema = table.getSchema())) {\r\n\t\t\t\t\t\tthrow new Error('Can\\'t resolve *; schema not found for table \"' + table.getName() + '\".');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(_fields = Object.keys(_schema.fields)).length) {\r\n\t\t\t\t\t\tthrow new Error('Can\\'t resolve *; fields not defined for table \"' + table.getName() + '\".');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_fields.forEach(_field => {\r\n\t\t\t\t\t\tfields.push(Mql.parse(_field, [Field]));\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar aggrFields = applyFields(tempRows, fields, true/*collectAggrs*/);\r\n\r\n\t\t// ---------------------------\r\n\t\t// GROUP BY?\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.groupBy || aggrExprs.aggr.length) {\r\n\t\t\tvar groupBy = this.exprs.groupBy || new GroupBy([]);\r\n\t\t\ttempRows = groupBy.eval(tempRows, params);\r\n\t\t\t// REVISIT RESPONSE ROWS and apply AGGR columns\r\n\t\t\tapplyFields(tempRows, aggrFields.aggr);\r\n\t\t}\r\n\r\n\t\t// ---------------------------\r\n\t\t// WINDOWING\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.windows || aggrExprs.win.length) {\r\n\t\t\tvar completed = [];\r\n\t\t\taggrExprs.win.forEach(expr => {\r\n\t\t\t\tvar uuid = expr.window.stringify();\r\n\t\t\t\tif (completed.indexOf(uuid) === -1) {\r\n\t\t\t\t\texpr.window.eval(tempRows, this.exprs.windows, params);\r\n\t\t\t\t\tcompleted.push(uuid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// REVISIT RESPONSE ROWS and apply AGGR OVER () columns\r\n\t\t\tapplyFields(tempRows, aggrFields.win);\r\n\t\t}\r\n\r\n\t\t// ---------------------------\r\n\t\t// ORDER BY\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.orderBy) {\r\n\t\t\ttempRows = this.exprs.orderBy.eval(tempRows, params);\r\n\t\t}\r\n\r\n\t\t// ---------------------------\r\n\t\t// DISTINCT\r\n\t\t// ---------------------------\r\n\t\tif (this.flags.includes('DISTINCT')) {\r\n\t\t\ttempRows = tempRows.filter((tempRow, i) => i === _find(tempRows, _tempRow => _even(_tempRow, tempRow)));\r\n\t\t}\r\n\r\n\t\t// ---------------------------\r\n\t\t// LIMIT\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.offset || this.exprs.limit) {\r\n\t\t\tvar limit = this.exprs.limit ? this.exprs.limit.slice() : [];\r\n\t\t\tvar offset = this.exprs.offset || (limit.length === 2 ? limit.shift() : 0);\r\n\t\t\ttempRows = limit.length \r\n\t\t\t\t? tempRows.slice(offset, offset + limit[0]) \r\n\t\t\t\t: tempRows.slice(offset);\r\n\t\t}\r\n\r\n\t\t// ---------------------------\r\n\t\t// SEND RESPONSE ROWS\r\n\t\t// ---------------------------\r\n\t\treturn tempRows.map(tempRow => tempRow.$);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.getToString(params, (clauseType, expr, clause) => {\r\n\t\t\tif (clauseType === 'fields') {\r\n\t\t\t\treturn clause + ' ' + (this.flags.length ? ' ' + this.flags.join(' ') : '') + expr.map(x => x.stringify(params)).join(', ');\r\n\t\t\t} else if (clauseType === 'windows') {\r\n\t\t\t\treturn clause + ' ' + Object.keys(expr).map(\r\n\t\t\t\t\twindowName => windowName + ' AS ' + expr[windowName].stringify(params)\r\n\t\t\t\t).join(', ');\r\n\t\t\t} else if (clauseType === 'groupBy' || clauseType === 'orderBy') {\r\n\t\t\t\treturn clause + ' ' + expr.stringify(params);\r\n\t\t\t} else if (clauseType === 'limit') {\r\n\t\t\t\treturn clause + ' ' + expr.join(', ');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.trim().substr(0, 6).toLowerCase() === 'select') {\r\n\t\t\tvar withUac = false;\r\n\t\t\tif (expr.match(/SELECT[ ]+WITH[ ]+UAC/i)) {\r\n\t\t\t\twithUac = true;\r\n\t\t\t\texpr = expr.replace(/[ ]+WITH[ ]+UAC/i, '');\r\n\t\t\t}\r\n\t\t\tvar stmtParse = super.getParse(expr, withUac, this.clauses, parseCallback, params, (clauseType, _expr) => {\r\n\t\t\t\tif (clauseType === 'fields') {\r\n\t\t\t\t\treturn Lexer.split(_expr, [',']).map(\r\n\t\t\t\t\t\tfield => parseCallback(field.trim(), [Field])\r\n\t\t\t\t\t);\r\n\t\t\t\t} else if (clauseType === 'windows') {\r\n\t\t\t\t\tvar windowsByName = {};\r\n\t\t\t\t\tLexer.split(_expr, [',']).forEach(window => {\r\n\t\t\t\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\r\n\t\t\t\t\t\t// NOTICE the space around \"as\", important in view of \"city ASC\"\r\n\t\t\t\t\t\tvar windowSplit = window.split(new RegExp(' as ', 'i'));\r\n\t\t\t\t\t\twindowsByName[windowSplit[0].trim()] = parseCallback(windowSplit[1].trim(), [Window]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn windowsByName;\r\n\t\t\t\t} else if (clauseType === 'groupBy') {\r\n\t\t\t\t\treturn parseCallback(_expr, [GroupBy]);\r\n\t\t\t\t} else if (clauseType === 'orderBy') {\r\n\t\t\t\t\treturn parseCallback(_expr, [OrderBy]);\r\n\t\t\t\t} else if (clauseType === 'limit') {\r\n\t\t\t\t\treturn _expr.split(',').map(n => parseInt(n));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn new this(\r\n\t\t\t\tstmtParse.exprs, \r\n\t\t\t\tstmtParse.clauses, \r\n\t\t\t\twithUac,\r\n\t\t\t\tstmtParse.clauses.fields.replace(/SELECT/i, '').split(' ').filter(flag => flag),\r\n\t\t\t\tstmtParse.references,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nSelect.clauses = {\r\n\tfields: 'SELECT([ ]+(ALL|DISTINCT))?',\r\n\ttable: 'FROM',\r\n\twhere: 'WHERE',\r\n\t// INNER JOIN, CROSS JOIN, {LEFT|RIGHT} [OUTER] JOIN\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n\tgroupBy: 'GROUP[ ]+BY',\r\n\twindows: 'WINDOW',\r\n\torderBy: 'ORDER[ ]+BY',\r\n\toffset: 'OFFSET',\r\n\tlimit: 'LIMIT',\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * UpdateInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'UpdateStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mixin from '@onephrase/util/js/mixin.js';\r\nimport _isArray from '@onephrase/util/js/isArray.js';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport UpdateInterface from './UpdateInterface.js';\r\nimport { Assignment } from '@web-native-js/jsen';\r\nimport Stmt from './Stmt.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Update class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Update extends _mixin(Stmt, UpdateInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses, withUac) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t\tthis.withUac = withUac;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tasync eval(database, params = {}) {\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tthis.base = this.getBase(database, params);\r\n\t\tvar rowComposition, count = 0;\r\n\t\twhile(rowComposition = await this.base.fetch()) {\r\n\t\t\tthis.exprs.assignments.forEach(assignment => assignment.eval(rowComposition, params));\r\n\t\t\tcount ++;\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.getToString(params, (clauseType, expr, clause) => {\r\n\t\t\tif (clauseType === 'assignments') {\r\n\t\t\t\treturn clause + ' ' + expr.map(assignment => assignment.stringify(params)).join(', ');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.trim().substr(0, 6).toLowerCase() === 'update') {\r\n\t\t\tvar withUac = false;\r\n\t\t\tif (expr.match(/UPDATE[ ]+WITH[ ]+UAC/i)) {\r\n\t\t\t\twithUac = true;\r\n\t\t\t\texpr = expr.replace(/[ ]+WITH[ ]+UAC/i, '');\r\n\t\t\t}\r\n\t\t\tvar stmtParse = super.getParse(expr, withUac, this.clauses, parseCallback, params, (clauseType, _expr) => {\r\n\t\t\t\tif (clauseType === 'assignments') {\r\n\t\t\t\t\treturn Lexer.split(_expr, [','])\r\n\t\t\t\t\t\t.map(assignment => parseCallback(assignment.trim(), [Assignment]));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn new this(stmtParse.exprs, stmtParse.clauses, withUac);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nUpdate.clauses = {\r\n\ttable: 'UPDATE',\r\n\tassignments: 'SET',\r\n\twhere: 'WHERE',\r\n\t// inner join, cross join, {left|right} [outer] join\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport Rql from './Rql.js';\r\nimport ExprInterface from './ExprInterface.js';\r\n// Reuse\r\nimport {\r\n\tAbstraction,\r\n\tAssignment,\r\n\tBool,\r\n\tCall,\r\n\tMath,\r\n\tNum,\r\n\tStr,\r\n\tVoid,\r\n} from '@web-native-js/jsen';\r\nimport {\r\n\tAbstractionInterface,\r\n\tAssignmentInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tStrInterface,\r\n\tVoidInterface,\r\n} from '@web-native-js/jsen';\r\n// Extended\r\nimport {\r\n\tAssertionInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tReferenceInterface,\r\n} from '@web-native-js/jsen';\r\nimport Assertion from './Expr/Assertion.js';\r\nimport Comparison from './Expr/Comparison.js';\r\nimport Condition from './Expr/Condition.js';\r\nimport Reference from './Expr/Reference.js';\r\n// New types\r\nimport Aggr from './Expr/Aggr.js';\r\nimport AggrInterface from './Expr/AggrInterface.js';\r\nimport Delete from './Stmt/Delete.js';\r\nimport DeleteInterface from './Stmt/DeleteInterface.js';\r\nimport Field from './Expr/Field.js';\r\nimport FieldInterface from './Expr/FieldInterface.js';\r\nimport GroupBy from './Expr/GroupBy.js';\r\nimport GroupByInterface from './Expr/GroupByInterface.js';\r\nimport Insert from './Stmt/Insert.js';\r\nimport InsertInterface from './Stmt/InsertInterface.js';\r\nimport Join from './Expr/Join.js';\r\nimport JoinInterface from './Expr/JoinInterface.js';\r\nimport OrderBy from './Expr/OrderBy.js';\r\nimport OrderByInterface from './Expr/OrderByInterface.js';\r\nimport Placeholder from './Expr/Placeholder.js';\r\nimport PlaceholderInterface from './Expr/PlaceholderInterface.js';\r\nimport Select from './Stmt/Select.js';\r\nimport SelectInterface from './Stmt/SelectInterface.js';\r\nimport Table from './Expr/Table.js';\r\nimport TableInterface from './Expr/TableInterface.js';\r\nimport Union from './Stmt/Union.js';\r\nimport UnionInterface from './Stmt/UnionInterface.js';\r\nimport Update from './Stmt/Update.js';\r\nimport UpdateInterface from './Stmt/UpdateInterface.js';\r\nimport Window from './Expr/Window.js';\r\nimport WindowInterface from './Expr/WindowInterface.js';\r\n\r\n/**\r\n * @var object\r\n */\r\nRql.grammars = {\r\n\t// Statements and union\r\n\tUnion: Union,\t\t\t\t// ... UNION ...\r\n\tSelect: Select,\t\t\t\t// SELECT ... FROM ...\r\n\tInsert: Insert,\t\t\t\t// INSERT INTO ...\r\n\tUpdate: Update,\t\t\t\t// UPDATE ...\r\n\tDelete: Delete,\t\t\t\t// DELETE FROM ...\r\n\t// Expressions\r\n\tJoin: Join,\t\t\t\t\t// table2 ON|USING ...\r\n\tAbstraction: Abstraction,\t// (...)\r\n\tCondition: Condition,\t\t// IF(..., ..., ...)\r\n\tAssertion: Assertion,\t\t// !field1 OR field2\r\n\tComparison: Comparison,\t\t// field1 > field2\r\n\tMath: Math,\t\t\t\t\t// field1 + field2\r\n\tNum: Num,\t\t\t\t\t// [0-9]\r\n\tStr: Str,\t\t\t\t\t// \"\"\r\n\tBool: Bool,\t\t\t\t\t// true\r\n\tVoid: Void,\t\t\t\t\t// null|undefined\r\n\tAggr: Aggr,\t\t\t\t\t// MIN() OVER()\r\n\tCall: Call,\t\t\t\t\t// COUNT()\r\n\tPlaceholder: Placeholder,\t// ? :var\r\n\tReference: Reference,\t\t// field1\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Rql;\r\nexport {\r\n\tExprInterface,\r\n};\r\nexport {\r\n\tAbstraction,\r\n\tAggr,\r\n\tAssertion,\r\n\tAssignment,\r\n\tBool,\r\n\tCall,\r\n\tComparison,\r\n\tCondition,\r\n\tDelete,\r\n\tField,\r\n\tGroupBy,\r\n\tInsert,\r\n\tJoin,\r\n\tMath,\r\n\tNum,\r\n\tOrderBy,\r\n\tPlaceholder,\r\n\tReference,\r\n\tSelect,\r\n\tStr,\r\n\tTable,\r\n\tUnion,\r\n\tUpdate,\r\n\tVoid,\r\n\tWindow\r\n};\r\nexport {\r\n\tAbstractionInterface,\r\n\tAggrInterface,\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tDeleteInterface,\r\n\tFieldInterface,\r\n\tGroupByInterface,\r\n\tInsertInterface,\r\n\tJoinInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tOrderByInterface,\r\n\tPlaceholderInterface,\r\n\tReferenceInterface,\r\n\tSelectInterface,\r\n\tStrInterface,\r\n\tTableInterface,\r\n\tUnionInterface,\r\n\tUpdateInterface,\r\n\tVoidInterface,\r\n\tWindowInterface\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport OrderBy from '../Expr/OrderBy.js';\r\nimport UnionInterface from './UnionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Union class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Union extends UnionInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(query, queries, orderBy = null, limit = null) {\r\n\t\tsuper();\r\n\t\tthis.query = query;\r\n\t\tthis.queries = queries;\r\n\t\tthis.orderBy = orderBy;\r\n\t\tthis.limit = limit;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\tvar str = [[this.query.stringify(params)].concat(\r\n\t\t\tthis.queries.map(q => (q.onDuplicate ? q.onDuplicate.toUpperCase() + ' ' : '') + q.select.stringify(params))\r\n\t\t).join(' UNION ')];\r\n\t\tif (this.orderBy) {\r\n\t\t\tstr.push('ORDER BY ' + this.orderBy.stringify(params));\r\n\t\t}\r\n\t\tif (this.limit) {\r\n\t\t\tstr.push('LIMIT ' + this.limit.join(', '));\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tvar parse = null;\r\n\t\tvar paramsRegex = {useRegex: 'i'};\r\n\t\tif ((parse = Lexer.lex(expr, [' UNION([ ]+(ALL|DISTINCT))? '], paramsRegex)) && parse.matches.length) {\r\n\t\t\tvar selects = parse.tokens;\r\n\t\t\tvar clauses = parse.matches;\r\n\t\t\tvar orderBy = null;\r\n\t\t\tvar limit = null;\r\n\t\t\t// Are the selects parenthisized? Then there could be outer ORDER BY / LIMIT clauses\r\n\t\t\tif (selects[0].trim().startsWith('(')) {\r\n\t\t\t\tvar lastStmtSplit = Lexer.lex(selects.pop(), ['ORDER[ ]+BY', 'LIMIT'], paramsRegex);\r\n\t\t\t\tselects.push(lastStmtSplit.tokens.shift());\r\n\t\t\t\tlastStmtSplit.matches.forEach(clause => {\r\n\t\t\t\t\tvar _expr = lastStmtSplit.tokens.shift().trim();\r\n\t\t\t\t\tif (clause.toUpperCase().startsWith('ORDER')) {\r\n\t\t\t\t\t\torderBy = parseCallback(_expr, [OrderBy]);\r\n\t\t\t\t\t} else if (clause.toUpperCase().startsWith('LIMIT')) {\r\n\t\t\t\t\t\tlimit = _expr.split(',').map(n => parseInt(n));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn new this(\r\n\t\t\t\tparseCallback(selects.shift().trim()),\r\n\t\t\t\tselects.map((select, i) => {return {\r\n\t\t\t\t\tselect: parseCallback(select.trim()),\r\n\t\t\t\t\tonDuplicate: (clauses[i].match(new RegExp('ALL|DISTINCT', 'i')) || [])[0]\r\n\t\t\t\t}}),\r\n\t\t\t\torderBy,\r\n\t\t\t\tlimit\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tCondition as _Condition\r\n} from '@web-native-js/jsen';\r\nimport Lexer from '@onephrase/util/str/Lexer.js';\r\nimport _unwrap from '@onephrase/util/str/unwrap.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class Condition extends _Condition {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn 'IF (' + [\r\n\t\t\tthis.assertion.stringify(params), \r\n\t\t\tthis.onTrue.stringify(params),\r\n\t\t\tthis.onFalse.stringify(params)\r\n\t\t].join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.match(/^if[ ]*?\\(/i)) {\r\n\t\t\tvar tokens = Lexer.split(_unwrap(expr.trim().substr(2).trim(), '(', ')'), [',']);\r\n\t\t\tif (tokens.length !== 3) {\r\n\t\t\t\tthrow new Error('Malformed condition expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new this(...tokens.map(expr => parseCallback(expr.trim())));\r\n\t\t}\r\n\t}\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumeric from '@onephrase/util/js/isNumeric.js';\r\nimport PlaceholderInterface from './PlaceholderInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\nexport default class Placeholder extends PlaceholderInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(name, notation) {\r\n\t\tsuper();\r\n\t\tthis.name = _isNumeric(name) ? parseInt(name) : name;\r\n\t\tthis.notation = notation;\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow, params = {}) {\r\n\t\tif (typeof this.name === 'number') {\r\n\t\t\tif (!params.vars) {\r\n\t\t\t\tthrow new Error('Annonymous placeholders require a \"params.vars\" array to be resolved.');\r\n\t\t\t}\r\n\t\t\treturn params.vars[this.name];\r\n\t\t}\r\n\t\tif (!params.vars) {\r\n\t\t\tthrow new Error('Named placeholders require a \"params.vars\" object to be resolved.');\r\n\t\t}\r\n\t\treturn params.vars[this.name];\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.stringify();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify(params = {}) {\r\n\t\treturn this.notation === '?' ? '?' : this.notation + this.name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, params = {}) {\r\n\t\tif (expr.startsWith('?') || expr.startsWith(':')) {\r\n\t\t\treturn new this(expr.substr(1), expr.substr(0, 1));\r\n\t\t}\r\n\t}\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Rql from './index.js';\r\n\r\n// As globals\r\nif (!window.WN) {\r\n\twindow.WN = {};\r\n}\r\nwindow.WN.Rql = Rql;\r\nif (!window.WebNative) {\r\n\twindow.WebNative = {};\r\n}\r\nwindow.WebNative.Rql = Rql;\r\n"],"sourceRoot":""}